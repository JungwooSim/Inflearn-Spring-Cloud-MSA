{"version":3,"file":"NewDashboardsFolder.1f65f885c5a67f13d9d6.js","mappings":"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","sources":["webpack://grafana/./public/app/features/folders/components/NewDashboardsFolder.tsx","webpack://grafana/./public/app/features/folders/state/actions.ts","webpack://grafana/./public/app/features/folders/state/navModel.ts"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { Button, Input, Form, Field } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { createNewFolder } from '../state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types';\nimport { validationSrv } from '../../manage-dashboards/services/ValidationSrv';\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'manage-dashboards'),\n});\n\nconst mapDispatchToProps = {\n  createNewFolder,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps {}\n\ninterface FormModel {\n  folderName: string;\n}\n\nconst initialFormModel: FormModel = { folderName: '' };\n\ntype Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class NewDashboardsFolder extends PureComponent<Props> {\n  onSubmit = (formData: FormModel) => {\n    this.props.createNewFolder(formData.folderName);\n  };\n\n  validateFolderName = (folderName: string) => {\n    return validationSrv\n      .validateNewFolderName(folderName)\n      .then(() => {\n        return true;\n      })\n      .catch((e) => {\n        return e.message;\n      });\n  };\n\n  render() {\n    return (\n      <Page navModel={this.props.navModel}>\n        <Page.Contents>\n          <h3>New dashboard folder</h3>\n          <Form defaultValues={initialFormModel} onSubmit={this.onSubmit}>\n            {({ register, errors }) => (\n              <>\n                <Field\n                  label=\"Folder name\"\n                  invalid={!!errors.folderName}\n                  error={errors.folderName && errors.folderName.message}\n                >\n                  <Input\n                    id=\"folder-name-input\"\n                    {...register('folderName', {\n                      required: 'Folder name is required.',\n                      validate: async (v) => await this.validateFolderName(v),\n                    })}\n                  />\n                </Field>\n                <Button type=\"submit\">Create</Button>\n              </>\n            )}\n          </Form>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(NewDashboardsFolder);\n","import { AppEvents, locationUtil } from '@grafana/data';\nimport { getBackendSrv, locationService } from '@grafana/runtime';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { FolderState, ThunkResult } from 'app/types';\nimport { DashboardAcl, DashboardAclUpdateDTO, NewDashboardAclItem, PermissionLevel } from 'app/types/acl';\nimport { updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport appEvents from 'app/core/app_events';\nimport { loadFolder, loadFolderPermissions } from './reducers';\n\nexport function getFolderByUid(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    const folder = await backendSrv.getFolderByUid(uid);\n    dispatch(loadFolder(folder));\n    dispatch(updateNavIndex(buildNavModel(folder)));\n  };\n}\n\nexport function saveFolder(folder: FolderState): ThunkResult<void> {\n  return async (dispatch) => {\n    const res = await backendSrv.put(`/api/folders/${folder.uid}`, {\n      title: folder.title,\n      version: folder.version,\n    });\n\n    // this should be redux action at some point\n    appEvents.emit(AppEvents.alertSuccess, ['Folder saved']);\n    locationService.push(`${res.url}/settings`);\n  };\n}\n\nexport function deleteFolder(uid: string): ThunkResult<void> {\n  return async () => {\n    await backendSrv.delete(`/api/folders/${uid}?forceDeleteRules=false`);\n    locationService.push('/dashboards');\n  };\n}\n\nexport function getFolderPermissions(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    const permissions = await backendSrv.get(`/api/folders/${uid}/permissions`);\n    dispatch(loadFolderPermissions(permissions));\n  };\n}\n\nfunction toUpdateItem(item: DashboardAcl): DashboardAclUpdateDTO {\n  return {\n    userId: item.userId,\n    teamId: item.teamId,\n    role: item.role,\n    permission: item.permission,\n  };\n}\n\nexport function updateFolderPermission(itemToUpdate: DashboardAcl, level: PermissionLevel): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n\n      const updated = toUpdateItem(item);\n\n      // if this is the item we want to update, update it's permission\n      if (itemToUpdate === item) {\n        updated.permission = level;\n      }\n\n      itemsToUpdate.push(updated);\n    }\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function removeFolderPermission(itemToDelete: DashboardAcl): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited || item === itemToDelete) {\n        continue;\n      }\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function addFolderPermission(newItem: NewDashboardAclItem): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    itemsToUpdate.push({\n      userId: newItem.userId,\n      teamId: newItem.teamId,\n      role: newItem.role,\n      permission: newItem.permission,\n    });\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function createNewFolder(folderName: string): ThunkResult<void> {\n  return async () => {\n    const newFolder = await getBackendSrv().post('/api/folders', { title: folderName });\n    appEvents.emit(AppEvents.alertSuccess, ['Folder Created', 'OK']);\n    locationService.push(locationUtil.stripBaseFromUrl(newFolder.url));\n  };\n}\n","import { NavModel, NavModelItem } from '@grafana/data';\n\nimport { FolderDTO } from 'app/types';\n\nexport function buildNavModel(folder: FolderDTO): NavModelItem {\n  const model = {\n    icon: 'folder',\n    id: 'manage-folder',\n    subTitle: 'Manage folder dashboards and permissions',\n    url: '',\n    text: folder.title,\n    breadcrumbs: [{ title: 'Dashboards', url: 'dashboards' }],\n    children: [\n      {\n        active: false,\n        icon: 'apps',\n        id: `folder-dashboards-${folder.uid}`,\n        text: 'Dashboards',\n        url: folder.url,\n      },\n    ],\n  };\n\n  model.children.push({\n    active: false,\n    icon: 'library-panel',\n    id: `folder-library-panels-${folder.uid}`,\n    text: 'Panels',\n    url: `${folder.url}/library-panels`,\n  });\n\n  if (folder.canAdmin) {\n    model.children.push({\n      active: false,\n      icon: 'lock',\n      id: `folder-permissions-${folder.uid}`,\n      text: 'Permissions',\n      url: `${folder.url}/permissions`,\n    });\n  }\n\n  if (folder.canSave) {\n    model.children.push({\n      active: false,\n      icon: 'cog',\n      id: `folder-settings-${folder.uid}`,\n      text: 'Settings',\n      url: `${folder.url}/settings`,\n    });\n  }\n\n  return model;\n}\n\nexport function getLoadingNav(tabIndex: number): NavModel {\n  const main = buildNavModel({\n    id: 1,\n    uid: 'loading',\n    title: 'Loading',\n    url: 'url',\n    canSave: true,\n    canEdit: true,\n    canAdmin: true,\n    version: 0,\n  });\n\n  main.children![tabIndex].active = true;\n\n  return {\n    main: main,\n    node: main.children![tabIndex],\n  };\n}\n"],"names":["mapDispatchToProps","createNewFolder","connector","connect","state","navModel","getNavModel","navIndex","initialFormModel","folderName","NewDashboardsFolder","PureComponent","formData","this","props","validationSrv","then","catch","e","message","render","Form","defaultValues","onSubmit","register","errors","Field","label","invalid","error","Input","id","required","validate","async","validateFolderName","v","Button","type","getFolderByUid","uid","folder","backendSrv","dispatch","loadFolder","updateNavIndex","buildNavModel","saveFolder","res","title","version","appEvents","AppEvents","locationService","url","deleteFolder","getFolderPermissions","permissions","loadFolderPermissions","toUpdateItem","item","userId","teamId","role","permission","updateFolderPermission","itemToUpdate","level","getStore","itemsToUpdate","inherited","updated","push","items","removeFolderPermission","itemToDelete","addFolderPermission","newItem","newFolder","getBackendSrv","post","locationUtil","model","icon","subTitle","text","breadcrumbs","children","active","canAdmin","canSave","getLoadingNav","tabIndex","main","canEdit","node"],"sourceRoot":""}