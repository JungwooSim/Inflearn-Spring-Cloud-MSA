{"version":3,"file":"SelectOrgPage.1f65f885c5a67f13d9d6.js","mappings":"wsBAOA,MAAMA,EAAW,CACfC,KAAM,CACJC,KAAM,UACNC,SAAU,cACVC,KAAM,8BAERC,KAAM,CACJD,KAAM,+BAeGE,EAAoB,KAC/B,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,YAKxB,OAHAC,EAAAA,EAAAA,IAASC,UACPH,OAfgBG,gBACLC,EAAAA,EAAAA,iBAAgBC,IAAI,kBAcjBC,MACb,KAED,SAAC,IAAD,CAAMd,SAAUA,EAAhB,UACE,SAAC,aAAD,WACE,kCACE,oLAIA,SAAC,EAAAe,gBAAD,CAAiBC,MAAI,EAArB,SACGT,GACCA,EAAKU,KAAKC,IACR,SAAC,EAAAC,OAAD,CAAwBjB,KAAK,SAASkB,QAAS,IAzB5CT,OAAAA,SACJC,EAAAA,EAAAA,iBACVS,KAAK,mBAAqBH,EAAII,OAC9BC,MAAK,KACJC,OAAOC,SAASC,KAAOC,EAAAA,OAAAA,UAAmB,OAqBqBC,CAAWV,GAAhE,SACGA,EAAIW,MADMX,EAAII,mBAWjC","sources":["webpack://grafana/./public/app/features/org/SelectOrgPage.tsx"],"sourcesContent":["import React, { FC, useState } from 'react';\nimport Page from 'app/core/components/Page/Page';\nimport { getBackendSrv, config } from '@grafana/runtime';\nimport { UserOrg } from 'app/types';\nimport { useAsync } from 'react-use';\nimport { Button, HorizontalGroup } from '@grafana/ui';\n\nconst navModel = {\n  main: {\n    icon: 'grafana',\n    subTitle: 'Preferences',\n    text: 'Select active organization',\n  },\n  node: {\n    text: 'Select active organization',\n  },\n};\n\nconst getUserOrgs = async () => {\n  return await getBackendSrv().get('/api/user/orgs');\n};\nconst setUserOrg = async (org: UserOrg) => {\n  return await getBackendSrv()\n    .post('/api/user/using/' + org.orgId)\n    .then(() => {\n      window.location.href = config.appSubUrl + '/';\n    });\n};\n\nexport const SelectOrgPage: FC = () => {\n  const [orgs, setOrgs] = useState<UserOrg[]>();\n\n  useAsync(async () => {\n    setOrgs(await getUserOrgs());\n  }, []);\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <div>\n          <p>\n            You have been invited to another organization! Please select which organization that you want to use right\n            now. You can change this later at any time.\n          </p>\n          <HorizontalGroup wrap>\n            {orgs &&\n              orgs.map((org) => (\n                <Button key={org.orgId} icon=\"signin\" onClick={() => setUserOrg(org)}>\n                  {org.name}\n                </Button>\n              ))}\n          </HorizontalGroup>\n        </div>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default SelectOrgPage;\n"],"names":["navModel","main","icon","subTitle","text","node","SelectOrgPage","orgs","setOrgs","useState","useAsync","async","getBackendSrv","get","getUserOrgs","HorizontalGroup","wrap","map","org","Button","onClick","post","orgId","then","window","location","href","config","setUserOrg","name"],"sourceRoot":""}