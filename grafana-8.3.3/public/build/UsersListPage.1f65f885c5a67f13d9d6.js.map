{"version":3,"file":"UsersListPage.1f65f885c5a67f13d9d6.js","mappings":"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","sources":["webpack://grafana/./public/app/features/users/state/selectors.ts","webpack://grafana/./public/app/features/users/UsersActionBar.tsx","webpack://grafana/./public/app/features/users/state/actions.ts","webpack://grafana/./public/app/features/users/InviteeRow.tsx","webpack://grafana/./public/app/features/users/InviteesTable.tsx","webpack://grafana/./public/app/features/users/UsersListPage.tsx","webpack://grafana/./public/app/features/users/UsersTable.tsx"],"sourcesContent":["import { UsersState } from 'app/types';\n\nexport const getUsers = (state: UsersState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.users.filter((user) => {\n    return regex.test(user.login) || regex.test(user.email) || regex.test(user.name);\n  });\n};\n\nexport const getInvitees = (state: UsersState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.invitees.filter((invitee) => {\n    return regex.test(invitee.name) || regex.test(invitee.email);\n  });\n};\n\nexport const getInviteesCount = (state: UsersState) => state.invitees.length;\nexport const getUsersSearchQuery = (state: UsersState) => state.searchQuery;\nexport const getUsersSearchPage = (state: UsersState) => state.searchPage;\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { setUsersSearchQuery } from './state/reducers';\nimport { getInviteesCount, getUsersSearchQuery } from './state/selectors';\nimport { RadioButtonGroup, LinkButton, FilterInput } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nexport interface Props {\n  searchQuery: string;\n  setUsersSearchQuery: typeof setUsersSearchQuery;\n  onShowInvites: () => void;\n  pendingInvitesCount: number;\n  canInvite: boolean;\n  showInvites: boolean;\n  externalUserMngLinkUrl: string;\n  externalUserMngLinkName: string;\n}\n\nexport class UsersActionBar extends PureComponent<Props> {\n  render() {\n    const {\n      canInvite,\n      externalUserMngLinkName,\n      externalUserMngLinkUrl,\n      searchQuery,\n      pendingInvitesCount,\n      setUsersSearchQuery,\n      onShowInvites,\n      showInvites,\n    } = this.props;\n    const options = [\n      { label: 'Users', value: 'users' },\n      { label: `Pending Invites (${pendingInvitesCount})`, value: 'invites' },\n    ];\n    const canAddToOrg = contextSrv.hasAccess(AccessControlAction.UsersCreate, canInvite);\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput\n            value={searchQuery}\n            onChange={setUsersSearchQuery}\n            placeholder=\"Search user by login, email or name\"\n          />\n        </div>\n        {pendingInvitesCount > 0 && (\n          <div style={{ marginLeft: '1rem' }}>\n            <RadioButtonGroup value={showInvites ? 'invites' : 'users'} options={options} onChange={onShowInvites} />\n          </div>\n        )}\n        {canAddToOrg && <LinkButton href=\"org/users/invite\">Invite</LinkButton>}\n        {externalUserMngLinkUrl && (\n          <LinkButton href={externalUserMngLinkUrl} target=\"_blank\" rel=\"noopener\">\n            {externalUserMngLinkName}\n          </LinkButton>\n        )}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    searchQuery: getUsersSearchQuery(state.users),\n    pendingInvitesCount: getInviteesCount(state.users),\n    externalUserMngLinkName: state.users.externalUserMngLinkName,\n    externalUserMngLinkUrl: state.users.externalUserMngLinkUrl,\n    canInvite: state.users.canInvite,\n  };\n}\n\nconst mapDispatchToProps = {\n  setUsersSearchQuery,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersActionBar);\n","import { AccessControlAction, ThunkResult } from '../../../types';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { OrgUser } from 'app/types';\nimport { inviteesLoaded, usersLoaded } from './reducers';\nimport { contextSrv } from 'app/core/core';\n\nexport function loadUsers(): ThunkResult<void> {\n  return async (dispatch) => {\n    const users = await getBackendSrv().get('/api/org/users');\n    dispatch(usersLoaded(users));\n  };\n}\n\nexport function loadInvitees(): ThunkResult<void> {\n  return async (dispatch) => {\n    if (!contextSrv.hasPermission(AccessControlAction.UsersCreate)) {\n      return;\n    }\n\n    const invitees = await getBackendSrv().get('/api/org/invites');\n    dispatch(inviteesLoaded(invitees));\n  };\n}\n\nexport function updateUser(user: OrgUser): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().patch(`/api/org/users/${user.userId}`, { role: user.role });\n    dispatch(loadUsers());\n  };\n}\n\nexport function removeUser(userId: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`/api/org/users/${userId}`);\n    dispatch(loadUsers());\n  };\n}\n\nexport function revokeInvite(code: string): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().patch(`/api/org/invites/${code}/revoke`, {});\n    dispatch(loadInvitees());\n  };\n}\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { Invitee } from 'app/types';\nimport { revokeInvite } from './state/actions';\nimport { Button, ClipboardButton } from '@grafana/ui';\n\nconst mapDispatchToProps = {\n  revokeInvite,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ninterface OwnProps {\n  invitee: Invitee;\n}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nclass InviteeRow extends PureComponent<Props> {\n  render() {\n    const { invitee, revokeInvite } = this.props;\n    return (\n      <tr>\n        <td>{invitee.email}</td>\n        <td>{invitee.name}</td>\n        <td className=\"text-right\">\n          <ClipboardButton variant=\"secondary\" size=\"sm\" getText={() => invitee.url}>\n            Copy Invite\n          </ClipboardButton>\n          &nbsp;\n        </td>\n        <td>\n          <Button variant=\"destructive\" size=\"sm\" icon=\"times\" onClick={() => revokeInvite(invitee.code)} />\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default connector(InviteeRow);\n","import React, { PureComponent } from 'react';\nimport { Invitee } from 'app/types';\nimport InviteeRow from './InviteeRow';\n\nexport interface Props {\n  invitees: Invitee[];\n}\n\nexport default class InviteesTable extends PureComponent<Props> {\n  render() {\n    const { invitees } = this.props;\n\n    return (\n      <table className=\"filter-table form-inline\">\n        <thead>\n          <tr>\n            <th>Email</th>\n            <th>Name</th>\n            <th />\n            <th style={{ width: '34px' }} />\n          </tr>\n        </thead>\n        <tbody>\n          {invitees.map((invitee, index) => {\n            return <InviteeRow key={`${invitee.id}-${index}`} invitee={invitee} />;\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { renderMarkdown } from '@grafana/data';\nimport { HorizontalGroup, Pagination, VerticalGroup } from '@grafana/ui';\n\nimport Page from 'app/core/components/Page/Page';\nimport UsersActionBar from './UsersActionBar';\nimport UsersTable from './UsersTable';\nimport InviteesTable from './InviteesTable';\nimport { OrgUser, OrgRole, StoreState } from 'app/types';\nimport { loadInvitees, loadUsers, removeUser, updateUser } from './state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getInvitees, getUsers, getUsersSearchQuery, getUsersSearchPage } from './state/selectors';\nimport { setUsersSearchQuery, setUsersSearchPage } from './state/reducers';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'users'),\n    users: getUsers(state.users),\n    searchQuery: getUsersSearchQuery(state.users),\n    searchPage: getUsersSearchPage(state.users),\n    invitees: getInvitees(state.users),\n    externalUserMngInfo: state.users.externalUserMngInfo,\n    hasFetched: state.users.hasFetched,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadUsers,\n  loadInvitees,\n  setUsersSearchQuery,\n  setUsersSearchPage,\n  updateUser,\n  removeUser,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = ConnectedProps<typeof connector>;\n\nexport interface State {\n  showInvites: boolean;\n}\n\nconst pageLimit = 30;\n\nexport class UsersListPage extends PureComponent<Props, State> {\n  declare externalUserMngInfoHtml: string;\n\n  constructor(props: Props) {\n    super(props);\n\n    if (this.props.externalUserMngInfo) {\n      this.externalUserMngInfoHtml = renderMarkdown(this.props.externalUserMngInfo);\n    }\n\n    this.state = {\n      showInvites: false,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchUsers();\n    this.fetchInvitees();\n  }\n\n  async fetchUsers() {\n    return await this.props.loadUsers();\n  }\n\n  async fetchInvitees() {\n    return await this.props.loadInvitees();\n  }\n\n  onRoleChange = (role: OrgRole, user: OrgUser) => {\n    const updatedUser = { ...user, role: role };\n\n    this.props.updateUser(updatedUser);\n  };\n\n  onShowInvites = () => {\n    this.setState((prevState) => ({\n      showInvites: !prevState.showInvites,\n    }));\n  };\n\n  getPaginatedUsers = (users: OrgUser[]) => {\n    const offset = (this.props.searchPage - 1) * pageLimit;\n    return users.slice(offset, offset + pageLimit);\n  };\n\n  renderTable() {\n    const { invitees, users, setUsersSearchPage } = this.props;\n    const paginatedUsers = this.getPaginatedUsers(users);\n    const totalPages = Math.ceil(users.length / pageLimit);\n\n    if (this.state.showInvites) {\n      return <InviteesTable invitees={invitees} />;\n    } else {\n      return (\n        <VerticalGroup spacing=\"md\">\n          <UsersTable\n            users={paginatedUsers}\n            onRoleChange={(role, user) => this.onRoleChange(role, user)}\n            onRemoveUser={(user) => this.props.removeUser(user.userId)}\n          />\n          <HorizontalGroup justify=\"flex-end\">\n            <Pagination\n              onNavigate={setUsersSearchPage}\n              currentPage={this.props.searchPage}\n              numberOfPages={totalPages}\n              hideWhenSinglePage={true}\n            />\n          </HorizontalGroup>\n        </VerticalGroup>\n      );\n    }\n  }\n\n  render() {\n    const { navModel, hasFetched } = this.props;\n    const externalUserMngInfoHtml = this.externalUserMngInfoHtml;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!hasFetched}>\n          <>\n            <UsersActionBar onShowInvites={this.onShowInvites} showInvites={this.state.showInvites} />\n            {externalUserMngInfoHtml && (\n              <div className=\"grafana-info-box\" dangerouslySetInnerHTML={{ __html: externalUserMngInfoHtml }} />\n            )}\n            {hasFetched && this.renderTable()}\n          </>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(UsersListPage);\n","import React, { FC, useEffect, useState } from 'react';\nimport { AccessControlAction, OrgUser, Role } from 'app/types';\nimport { OrgRolePicker } from '../admin/OrgRolePicker';\nimport { Button, ConfirmModal } from '@grafana/ui';\nimport { OrgRole } from '@grafana/data';\nimport { contextSrv } from 'app/core/core';\nimport { fetchBuiltinRoles, fetchRoleOptions, UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\n\nexport interface Props {\n  users: OrgUser[];\n  orgId?: number;\n  onRoleChange: (role: OrgRole, user: OrgUser) => void;\n  onRemoveUser: (user: OrgUser) => void;\n}\n\nconst UsersTable: FC<Props> = (props) => {\n  const { users, orgId, onRoleChange, onRemoveUser } = props;\n  const canUpdateRole = contextSrv.hasPermission(AccessControlAction.OrgUsersRoleUpdate);\n  const canRemoveFromOrg = contextSrv.hasPermission(AccessControlAction.OrgUsersRemove);\n  const rolePickerDisabled = !canUpdateRole;\n\n  const [showRemoveModal, setShowRemoveModal] = useState<string | boolean>(false);\n  const [roleOptions, setRoleOptions] = useState<Role[]>([]);\n  const [builtinRoles, setBuiltinRoles] = useState<{ [key: string]: Role[] }>({});\n\n  useEffect(() => {\n    async function fetchOptions() {\n      try {\n        let options = await fetchRoleOptions(orgId);\n        setRoleOptions(options);\n        const builtInRoles = await fetchBuiltinRoles(orgId);\n        setBuiltinRoles(builtInRoles);\n      } catch (e) {\n        console.error('Error loading options');\n      }\n    }\n    if (contextSrv.accessControlEnabled()) {\n      fetchOptions();\n    }\n  }, [orgId]);\n\n  const getRoleOptions = async () => roleOptions;\n  const getBuiltinRoles = async () => builtinRoles;\n\n  return (\n    <table className=\"filter-table form-inline\">\n      <thead>\n        <tr>\n          <th />\n          <th>Login</th>\n          <th>Email</th>\n          <th>Name</th>\n          <th>Seen</th>\n          <th>Role</th>\n          <th style={{ width: '34px' }} />\n        </tr>\n      </thead>\n      <tbody>\n        {users.map((user, index) => {\n          return (\n            <tr key={`${user.userId}-${index}`}>\n              <td className=\"width-2 text-center\">\n                <img className=\"filter-table__avatar\" src={user.avatarUrl} alt=\"User avatar\" />\n              </td>\n              <td className=\"max-width-6\">\n                <span className=\"ellipsis\" title={user.login}>\n                  {user.login}\n                </span>\n              </td>\n\n              <td className=\"max-width-5\">\n                <span className=\"ellipsis\" title={user.email}>\n                  {user.email}\n                </span>\n              </td>\n              <td className=\"max-width-5\">\n                <span className=\"ellipsis\" title={user.name}>\n                  {user.name}\n                </span>\n              </td>\n              <td className=\"width-1\">{user.lastSeenAtAge}</td>\n\n              <td className=\"width-8\">\n                {contextSrv.accessControlEnabled() ? (\n                  <UserRolePicker\n                    userId={user.userId}\n                    orgId={orgId}\n                    builtInRole={user.role}\n                    onBuiltinRoleChange={(newRole) => onRoleChange(newRole, user)}\n                    getRoleOptions={getRoleOptions}\n                    getBuiltinRoles={getBuiltinRoles}\n                    disabled={rolePickerDisabled}\n                  />\n                ) : (\n                  <OrgRolePicker\n                    aria-label=\"Role\"\n                    value={user.role}\n                    disabled={!canUpdateRole}\n                    onChange={(newRole) => onRoleChange(newRole, user)}\n                  />\n                )}\n              </td>\n\n              {canRemoveFromOrg && (\n                <td>\n                  <Button\n                    size=\"sm\"\n                    variant=\"destructive\"\n                    onClick={() => setShowRemoveModal(user.login)}\n                    icon=\"times\"\n                    aria-label=\"Delete user\"\n                  />\n                  <ConfirmModal\n                    body={`Are you sure you want to delete user ${user.login}?`}\n                    confirmText=\"Delete\"\n                    title=\"Delete\"\n                    onDismiss={() => setShowRemoveModal(false)}\n                    isOpen={user.login === showRemoveModal}\n                    onConfirm={() => {\n                      onRemoveUser(user);\n                    }}\n                  />\n                </td>\n              )}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default UsersTable;\n"],"names":["getUsers","state","regex","RegExp","searchQuery","users","filter","user","test","login","email","name","getInvitees","invitees","invitee","getInviteesCount","length","getUsersSearchQuery","getUsersSearchPage","searchPage","UsersActionBar","PureComponent","render","canInvite","externalUserMngLinkName","externalUserMngLinkUrl","pendingInvitesCount","setUsersSearchQuery","onShowInvites","showInvites","this","props","options","label","value","canAddToOrg","contextSrv","AccessControlAction","className","FilterInput","onChange","placeholder","style","marginLeft","RadioButtonGroup","LinkButton","href","target","rel","mapDispatchToProps","connect","loadUsers","async","getBackendSrv","get","dispatch","usersLoaded","loadInvitees","inviteesLoaded","revokeInvite","code","patch","connector","InviteeRow","ClipboardButton","variant","size","getText","url","Button","icon","onClick","InviteesTable","width","map","index","id","setUsersSearchPage","updateUser","userId","role","removeUser","delete","navModel","getNavModel","navIndex","externalUserMngInfo","hasFetched","UsersListPage","constructor","super","updatedUser","setState","prevState","offset","slice","externalUserMngInfoHtml","renderMarkdown","componentDidMount","fetchUsers","fetchInvitees","renderTable","paginatedUsers","getPaginatedUsers","totalPages","Math","ceil","VerticalGroup","spacing","UsersTable","onRoleChange","onRemoveUser","HorizontalGroup","justify","Pagination","onNavigate","currentPage","numberOfPages","hideWhenSinglePage","Page","isLoading","dangerouslySetInnerHTML","__html","orgId","canUpdateRole","canRemoveFromOrg","rolePickerDisabled","showRemoveModal","setShowRemoveModal","useState","roleOptions","setRoleOptions","builtinRoles","setBuiltinRoles","useEffect","fetchRoleOptions","builtInRoles","fetchBuiltinRoles","e","console","error","fetchOptions","getRoleOptions","getBuiltinRoles","src","avatarUrl","alt","title","lastSeenAtAge","builtInRole","onBuiltinRoleChange","newRole","disabled","ConfirmModal","body","confirmText","onDismiss","isOpen","onConfirm"],"sourceRoot":""}