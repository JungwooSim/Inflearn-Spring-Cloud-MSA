{"version":3,"file":"DataSourcesListPage.1f65f885c5a67f13d9d6.js","mappings":"ibAWe,MAAMA,UAAsBC,EAAAA,cACzCC,SACE,MAAM,YAAEC,EAAF,WAAeC,EAAf,eAA2BC,EAA3B,OAA2CC,EAA3C,YAAmDC,EAAc,0BAA6BC,KAAKC,MACnGC,EAAY,CAAEC,KAAMP,MAAAA,OAAF,EAAEA,EAAYO,KAAMC,SAAUR,MAAAA,OAAF,EAAEA,EAAYQ,UAMlE,OAJIN,IACDI,EAAkBJ,OAASA,IAI5B,iBAAKO,UAAU,kBAAf,WACE,gBAAKA,UAAU,wBAAf,UACE,SAAC,EAAAC,YAAD,CAAaC,MAAOZ,EAAaa,SAAUX,EAAgBE,YAAaA,MAEzEH,IAAc,SAAC,EAAAa,WAAD,iBAAgBP,EAAhB,UAA4BN,EAAWc,e,u7BCZvD,MA2BP,EA3B0C,EAAGC,YAAAA,EAAaC,WAAAA,MACxD,MAAMC,GAASC,EAAAA,EAAAA,WAAUC,GAEzB,OACE,eAAIV,UAAWQ,EAAOG,KAAtB,SACGL,EAAYM,KAAI,CAACC,EAAYC,KAE1B,yBACE,UAAC,EAAAC,KAAD,CAAMC,QAASH,EAAWI,KAAMnB,KAAO,oBAAmBe,EAAWK,MAArE,WACE,SAAC,EAAAH,KAAA,OAAD,WACE,gBAAKI,IAAKN,EAAWO,YAAaC,IAAKR,EAAWI,UAEpD,SAAC,EAAAF,KAAA,KAAD,UACG,CACCF,EAAWS,SACXT,EAAWU,IACXV,EAAWW,YAAX,OAAwB,SAAC,EAAAC,IAAD,CAAuBR,KAAM,UAAWS,WAAY,GAA3C,wBAThCb,EAAWc,SAsBxBjB,EAAY,KACT,CACLC,KAAMiB,EAAAA,GAAI;;+QCRd,MAAMC,EAAqB,CACzBC,gBADyB,KAEzBC,0BAFyB,KAGzBC,yBAAwBA,EAAAA,IAGpBC,GAAYC,EAAAA,EAAAA,UAjBlB,SAAyBC,GACvB,MAAO,CACLC,UAAUC,EAAAA,EAAAA,GAAYF,EAAMG,SAAU,eACtChC,aAAaiC,EAAAA,EAAAA,IAAeJ,EAAM7B,aAClCC,YAAYiC,EAAAA,EAAAA,IAAyBL,EAAM7B,aAC3CmC,kBAAkBC,EAAAA,EAAAA,IAAoBP,EAAM7B,aAC5ChB,aAAaqD,EAAAA,EAAAA,IAA0BR,EAAM7B,aAC7CsC,WAAYT,EAAM7B,YAAYsC,cAUSf,GAIrCgB,EAAiB,CACrBxC,MAAO,0BACPyC,WAAY,WACZC,WAAY,kBACZC,YAAa,kBACbC,OAAQ,gEACRC,WAAY,8FACZC,gBAAiB,aACjBC,aAAc,UAGT,MAAMC,UAA4BjE,EAAAA,cACvCkE,oBACE3D,KAAKC,MAAMkC,kBAGbzC,SACE,MAAM,YACJiB,EADI,iBAEJmC,EAFI,SAGJL,EAHI,WAIJ7B,EAJI,YAKJjB,EALI,0BAMJyC,EANI,WAOJa,GACEjD,KAAKC,MAEH2D,EACJC,EAAAA,GAAAA,cAAyBC,EAAAA,GAAAA,oBACzBD,EAAAA,GAAAA,cAAyBC,EAAAA,GAAAA,kBAErBlE,EAAa,CACjBO,KAAM,kBACNO,MAAO,kBACPN,UAAWwD,GAGPG,EAAY,OAAH,UACVb,EADU,CAEbc,gBAAiBJ,IAGnB,OACE,SAACK,EAAA,EAAD,CAAMxB,SAAUA,EAAhB,UACE,SAACwB,EAAA,WAAD,CAAeC,WAAYjB,EAA3B,UACE,gCACGA,GAAmC,IAArBH,IAA0B,SAACqB,EAAA,EAAD,iBAAkBJ,IAC1Dd,GACCH,EAAmB,GAAK,EACtB,SAACtD,EAAA,EAAD,CACEG,YAAaA,EACbE,eAAiBuE,GAAUhC,EAA0BgC,GACrDxE,WAAYA,GACR,eAEN,SAAC,EAAD,CAAiBe,YAAaA,EAAaC,WAAYA,GAAgB,iBASvF,QAAe0B,EAAUoB","sources":["webpack://grafana/./public/app/core/components/PageActionBar/PageActionBar.tsx","webpack://grafana/./public/app/features/datasources/DataSourcesList.tsx","webpack://grafana/./public/app/features/datasources/DataSourcesListPage.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { LinkButton, FilterInput } from '@grafana/ui';\n\nexport interface Props {\n  searchQuery: string;\n  setSearchQuery: (value: string) => void;\n  linkButton?: { href: string; title: string; disabled?: boolean };\n  target?: string;\n  placeholder?: string;\n}\n\nexport default class PageActionBar extends PureComponent<Props> {\n  render() {\n    const { searchQuery, linkButton, setSearchQuery, target, placeholder = 'Search by name or type' } = this.props;\n    const linkProps = { href: linkButton?.href, disabled: linkButton?.disabled };\n\n    if (target) {\n      (linkProps as any).target = target;\n    }\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput value={searchQuery} onChange={setSearchQuery} placeholder={placeholder} />\n        </div>\n        {linkButton && <LinkButton {...linkProps}>{linkButton.title}</LinkButton>}\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { FC } from 'react';\n\n// Types\nimport { DataSourceSettings, LayoutMode } from '@grafana/data';\nimport { Card, Tag, useStyles } from '@grafana/ui';\nimport { css } from '@emotion/css';\n\nexport interface Props {\n  dataSources: DataSourceSettings[];\n  layoutMode: LayoutMode;\n}\n\nexport const DataSourcesList: FC<Props> = ({ dataSources, layoutMode }) => {\n  const styles = useStyles(getStyles);\n\n  return (\n    <ul className={styles.list}>\n      {dataSources.map((dataSource, index) => {\n        return (\n          <li key={dataSource.id}>\n            <Card heading={dataSource.name} href={`datasources/edit/${dataSource.uid}`}>\n              <Card.Figure>\n                <img src={dataSource.typeLogoUrl} alt={dataSource.name} />\n              </Card.Figure>\n              <Card.Meta>\n                {[\n                  dataSource.typeName,\n                  dataSource.url,\n                  dataSource.isDefault && <Tag key=\"default-tag\" name={'default'} colorIndex={1} />,\n                ]}\n              </Card.Meta>\n            </Card>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default DataSourcesList;\n\nconst getStyles = () => {\n  return {\n    list: css`\n      list-style: none;\n    `,\n  };\n};\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n// Services & Utils\nimport { contextSrv } from 'app/core/core';\n// Components\nimport Page from 'app/core/components/Page/Page';\nimport PageActionBar from 'app/core/components/PageActionBar/PageActionBar';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport DataSourcesList from './DataSourcesList';\n// Types\nimport { IconName } from '@grafana/ui';\nimport { StoreState, AccessControlAction } from 'app/types';\n// Actions\nimport { loadDataSources } from './state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\n\nimport {\n  getDataSources,\n  getDataSourcesCount,\n  getDataSourcesLayoutMode,\n  getDataSourcesSearchQuery,\n} from './state/selectors';\nimport { setDataSourcesLayoutMode, setDataSourcesSearchQuery } from './state/reducers';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'datasources'),\n    dataSources: getDataSources(state.dataSources),\n    layoutMode: getDataSourcesLayoutMode(state.dataSources),\n    dataSourcesCount: getDataSourcesCount(state.dataSources),\n    searchQuery: getDataSourcesSearchQuery(state.dataSources),\n    hasFetched: state.dataSources.hasFetched,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadDataSources,\n  setDataSourcesSearchQuery,\n  setDataSourcesLayoutMode,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = ConnectedProps<typeof connector>;\n\nconst emptyListModel = {\n  title: 'No data sources defined',\n  buttonIcon: 'database' as IconName,\n  buttonLink: 'datasources/new',\n  buttonTitle: 'Add data source',\n  proTip: 'You can also define data sources through configuration files.',\n  proTipLink: 'http://docs.grafana.org/administration/provisioning/#datasources?utm_source=grafana_ds_list',\n  proTipLinkTitle: 'Learn more',\n  proTipTarget: '_blank',\n};\n\nexport class DataSourcesListPage extends PureComponent<Props> {\n  componentDidMount() {\n    this.props.loadDataSources();\n  }\n\n  render() {\n    const {\n      dataSources,\n      dataSourcesCount,\n      navModel,\n      layoutMode,\n      searchQuery,\n      setDataSourcesSearchQuery,\n      hasFetched,\n    } = this.props;\n\n    const canCreateDataSource =\n      contextSrv.hasPermission(AccessControlAction.DataSourcesCreate) &&\n      contextSrv.hasPermission(AccessControlAction.DataSourcesWrite);\n\n    const linkButton = {\n      href: 'datasources/new',\n      title: 'Add data source',\n      disabled: !canCreateDataSource,\n    };\n\n    const emptyList = {\n      ...emptyListModel,\n      buttonDisabled: !canCreateDataSource,\n    };\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!hasFetched}>\n          <>\n            {hasFetched && dataSourcesCount === 0 && <EmptyListCTA {...emptyList} />}\n            {hasFetched &&\n              dataSourcesCount > 0 && [\n                <PageActionBar\n                  searchQuery={searchQuery}\n                  setSearchQuery={(query) => setDataSourcesSearchQuery(query)}\n                  linkButton={linkButton}\n                  key=\"action-bar\"\n                />,\n                <DataSourcesList dataSources={dataSources} layoutMode={layoutMode} key=\"list\" />,\n              ]}\n          </>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(DataSourcesListPage);\n"],"names":["PageActionBar","PureComponent","render","searchQuery","linkButton","setSearchQuery","target","placeholder","this","props","linkProps","href","disabled","className","FilterInput","value","onChange","LinkButton","title","dataSources","layoutMode","styles","useStyles","getStyles","list","map","dataSource","index","Card","heading","name","uid","src","typeLogoUrl","alt","typeName","url","isDefault","Tag","colorIndex","id","css","mapDispatchToProps","loadDataSources","setDataSourcesSearchQuery","setDataSourcesLayoutMode","connector","connect","state","navModel","getNavModel","navIndex","getDataSources","getDataSourcesLayoutMode","dataSourcesCount","getDataSourcesCount","getDataSourcesSearchQuery","hasFetched","emptyListModel","buttonIcon","buttonLink","buttonTitle","proTip","proTipLink","proTipLinkTitle","proTipTarget","DataSourcesListPage","componentDidMount","canCreateDataSource","contextSrv","AccessControlAction","emptyList","buttonDisabled","Page","isLoading","EmptyListCTA","query"],"sourceRoot":""}