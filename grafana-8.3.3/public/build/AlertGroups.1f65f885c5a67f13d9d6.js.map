{"version":3,"file":"AlertGroups.1f65f885c5a67f13d9d6.js","mappings":"qeAKO,SAASA,IACd,MAAM,OAAEC,IAAWC,EAAAA,EAAAA,MAMnB,MAAO,EALaC,EAAAA,EAAAA,UAAQ,KAAMC,EAAAA,EAAAA,wBAAuBH,GAAU,KAAK,CAACA,KAC1DI,EAAAA,EAAAA,cACb,CAACC,EAAqBC,IAAsBC,cAAa,IAAMC,EAAAA,gBAAAA,QAAwBH,EAAQC,MAC/F,O,i3CCKG,MAAMG,EAAqD,EAAGC,MAAAA,EAAOC,uBAAAA,MAC1E,MAAMC,GAASC,EAAAA,EAAAA,YAAWC,GAC1B,OACE,iCACE,iBAAKC,UAAWH,EAAOI,WAAvB,UACGN,EAAMO,OAAOC,QAAUC,EAAAA,GAAAA,aACtB,SAAC,EAAAC,WAAD,CACEC,KAAO,IAAEC,EAAAA,EAAAA,IACP,qBACAX,iBACcD,EAAMO,OAAOM,WAAWC,KAAK,OAC7CT,UAAWH,EAAOa,OAClBC,KAAM,OACNC,KAAM,KAPR,6BAYDjB,EAAMO,OAAOC,QAAUC,EAAAA,GAAAA,SACtB,SAAC,EAAAC,WAAD,CACEC,KAAO,IAAEC,EAAAA,EAAAA,IAAW,wBAAyBX,OAA2BiB,EAAAA,EAAAA,GACtElB,EAAMmB,UAERd,UAAWH,EAAOa,OAClBC,KAAM,aACNC,KAAM,KANR,qBAWDjB,EAAMoB,eACL,SAAC,EAAAV,WAAD,CAAYL,UAAWH,EAAOa,OAAQJ,KAAMX,EAAMoB,aAAcJ,KAAM,aAAcC,KAAM,KAA1F,2BAKHI,OAAOC,QAAQtB,EAAMuB,aAAaC,KAAI,EAAEC,EAAeC,MACtD,SAACC,EAAA,EAAD,CAA4CF,cAAeA,EAAeG,MAAOF,GAApDD,MAE/B,iBAAKpB,UAAWH,EAAO2B,UAAvB,uBACa,IACV7B,EAAM6B,UACJL,KAAI,EAAGM,KAAAA,KAAWA,IAClBC,QAAQD,KAAWA,IACnBhB,KAAK,aAMVV,EAAa4B,IAAD,CAChBjB,OAAQkB,EAAAA,GAAI;;qBAEOD,EAAME,QAAQ;;IAGjC5B,WAAY2B,EAAAA,GAAI;eACHD,EAAME,QAAQ,EAAG;+BACDF,EAAMG,OAAOC,OAAOC;IAEjDR,UAAWI,EAAAA,GAAI;eACFD,EAAME,QAAQ,EAAG;MCzDnBI,EAAwB,EAAGC,OAAAA,EAAQtC,uBAAAA,MAC9C,MAAMC,GAASC,EAAAA,EAAAA,YAAWC,GAEpBoC,GAAUhD,EAAAA,EAAAA,UACd,IAA0C,CACxC,CACEiD,GAAI,QACJC,MAAO,QAEPC,WAAY,EAAGC,KAAM5C,MACnB,iCACE,SAAC6C,EAAA,EAAD,CAAiBrC,MAAOR,EAAMO,OAAOC,SACrC,kBAAMH,UAAWH,EAAO4C,SAAxB,gBACM,KACHC,EAAAA,EAAAA,qCAAoC,CACnCC,MAAO,IAAIC,KAAKjD,EAAMkD,UACtBC,IAAK,IAAIF,KAAKjD,EAAMoD,gBAK5BnC,KAAM,SAER,CACEwB,GAAI,SACJC,MAAO,SAEPC,WAAY,EAAGC,MAAQzB,OAAAA,OAAe,SAACkC,EAAA,EAAD,CAAahD,UAAWH,EAAOiB,OAAQA,OAAQA,IACrFF,KAAM,KAGV,CAACf,IAGGoD,GAAQ9D,EAAAA,EAAAA,UACZ,IACE+C,EAAOf,KAAKxB,IAAD,CACTyC,GAAIzC,EAAMuD,YACVX,KAAM5C,OAEV,CAACuC,IAGH,OACE,gBAAKlC,UAAWH,EAAOsD,aAAc,cAAY,oBAAjD,UACE,SAACC,EAAA,EAAD,CACEC,KAAMlB,EACNc,MAAOA,EACPK,cAAc,EACdC,sBAAuB,EAAGhB,KAAM5C,MAC9B,SAACD,EAAD,CAAcC,MAAOA,EAAOC,uBAAwBA,SAOxDG,EAAa4B,IAAD,CAChBwB,aAAcvB,EAAAA,GAAI;kBACFD,EAAME,QAAQ;MAC1BF,EAAM6B,YAAYC,GAAG;qBACN9B,EAAME,QAAQ;;IAGjCY,SAAUb,EAAAA,GAAI;mBACGD,EAAME,QAAQ;iBAChBF,EAAM+B,WAAWC,UAAUC;IAE1C9C,OAAQc,EAAAA,GAAI;;mLCxEP,MAAMiC,EAAa,EAAGjE,uBAAAA,EAAwBkE,MAAAA,MACnD,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,WAAkB,GAClDpE,GAASC,EAAAA,EAAAA,YAAWC,GAE1B,OACE,iBAAKC,UAAWH,EAAOqE,QAAvB,WACE,iBAAKlE,UAAWH,EAAOsE,OAAvB,WACE,iBAAKnE,UAAWH,EAAOiE,MAAO,cAAY,cAA1C,WACE,SAACM,EAAA,EAAD,CACEL,YAAaA,EACbM,SAAU,IAAML,GAAgBD,GAChC,cAAY,gCAEb/C,OAAOsD,KAAKR,EAAMhD,QAAQyD,QACzB,SAACvB,EAAA,EAAD,CAAahD,UAAWH,EAAO2E,aAAc1D,OAAQgD,EAAMhD,SAD5D,OAGC,+CAGJ,SAAC2D,EAAA,EAAD,CAAkBX,MAAOA,QAEzBC,IAAe,SAAC9B,EAAD,CAAuBrC,uBAAwBA,EAAwBsC,OAAQ4B,EAAM5B,aAKtGnC,EAAa4B,IAAD,CAChBuC,QAAStC,EAAAA,GAAI;;oBAEKD,EAAME,QAAQ;;IAGhC2C,aAAc5C,EAAAA,GAAI;;sBAEED,EAAME,QAAQ;IAElCsC,OAAQvC,EAAAA,GAAI;;;;;;eAMCD,EAAME,QAAQ,EAAG,EAAG,EAAG;wBACdF,EAAMG,OAAO4C,WAAWC;;IAG9Cb,MAAOlC,EAAAA,GAAI;;;;IAKXgD,QAAShD,EAAAA,GAAI,GACbiD,YAAajD,EAAAA,GAAI;mBACAD,EAAME,QAAQ;IAE/B,CAACzB,EAAAA,GAAAA,QAAoBwB,EAAAA,GAAI;aACdD,EAAMG,OAAOgD,MAAMC;IAE9B,CAAC3E,EAAAA,GAAAA,YAAwBwB,EAAAA,GAAI;aAClBD,EAAMG,OAAOkD,QAAQD;IAEhC,CAAC3E,EAAAA,GAAAA,aAAyBwB,EAAAA,GAAI;aACnBD,EAAMG,OAAO6C,UAAUI;4FClE7B,MAAME,EAAgB,EAAGjF,UAAAA,EAAWkF,eAAAA,EAAgBC,YAAAA,MACzD,MAAMtF,GAASC,EAAAA,EAAAA,YAAWC,GAK1B,OACE,iBAAKC,UAAWA,EAAhB,WACE,UAAC,EAAAoF,MAAD,YACE,SAAC,EAAAC,QAAD,CACEC,QAAO,OACL,sEAEE,yBAAO,yDAJb,UAQE,SAAC,EAAAC,KAAD,CAAMvF,UAAWH,EAAOc,KAAMc,KAAK,cAAcb,KAAK,SAT1D,sBAaA,SAAC,EAAA4E,MAAD,CACEC,YAAY,SACZC,aAAcP,EACdQ,SAtBsBC,IAC1B,MAAMC,EAASD,EAAEC,OACjBX,EAAeW,EAAOtE,QAqBlB,cAAY,2BAMdxB,EAAa4B,IAAD,CAChBhB,KAAMiB,EAAAA,GAAI;oBACQD,EAAME,QAAQ;YCjC3B,MAAMiE,EAAmB,EAAGC,oBAAAA,EAAqBC,YAAAA,MACtD,MAAMnG,GAASC,EAAAA,EAAAA,YAAWC,GACpBkG,EAAuCjF,OAAOC,QAAQb,EAAAA,IACzD8F,MAAK,EAAEC,IAAUC,KAAaD,EAASC,GAAU,EAAI,IACrDjF,KAAI,EAAEkB,EAAOlC,MAAT,CACHkC,MAAAA,EACAd,MAAOpB,MAGX,OACE,iBAAKH,UAAWH,EAAOqE,QAAvB,iBACE,SAAC,EAAAkB,MAAD,sBACA,SAAC,EAAAiB,iBAAD,CAAkBC,QAASL,EAAmB1E,MAAOyE,EAAaL,SAAUI,QAK5EhG,EAAa4B,IAAD,CAChBuC,QAAStC,EAAAA,GAAI;mBACID,EAAME,QAAQ;0HCjB1B,MAAM0E,EAAU,EAAGvG,UAAAA,EAAWwG,OAAAA,EAAQC,QAAAA,EAASC,iBAAAA,MACpD,MAAMC,GAAkBC,EAAAA,EAAAA,MAAKJ,EAAOK,SAAS/C,GAAUA,EAAM5B,SAAQ2E,SAAQ,EAAG/F,OAAAA,KAAaE,OAAOsD,KAAKxD,MACtGY,QAAQW,KAAYA,EAAMyE,WAAW,OAASzE,EAAM0E,SAAS,SAC7D5F,KAAsB6F,IAAD,CACpB3E,MAAO2E,EACPzF,MAAOyF,MAGX,OACE,iBAAK,cAAa,qBAAsBhH,UAAWA,EAAnD,iBACE,SAAC,EAAAoF,MAAD,gCACA,SAAC,EAAA6B,YAAD,CACE,aAAY,sBACZ1F,MAAOkF,EACPhB,YAAY,WACZyB,OAAM,OAAE,SAAC,EAAA3B,KAAD,CAAM9D,KAAM,aACpBkE,SAAW1C,IACTyD,EAAiBzD,EAAM9B,KAAI,EAAGI,MAAAA,KAAYA,MAE5C+E,QAASK,Q,qFCbV,MAAMQ,EAAmB,EAAGX,OAAAA,MACjC,MAAOY,EAAWC,IAAgBpD,EAAAA,EAAAA,UAAiBqD,KAAKC,MAAsB,IAAhBD,KAAKE,YAC5DC,EAAaC,IAAkB1I,EAAAA,EAAAA,MAChC,QAAEyH,EAAU,GAAZ,YAAgBtB,EAAhB,WAA6BwC,IAAeC,EAAAA,EAAAA,IAAwBH,GACpEI,EAAoB,WAAUT,KAE7BxH,EAAwBkI,IAA6BC,EAAAA,EAAAA,KACtDlI,GAASC,EAAAA,EAAAA,YAAWC,GAWpBiI,KAAqBvB,EAAQlC,OAAS,GAAKY,GAAewC,GAEhE,OACE,iBAAK3H,UAAWH,EAAOqE,QAAvB,WACE,SAAC+D,EAAA,EAAD,CAAoBC,QAAStI,EAAwB+F,SAAUmC,KAC/D,iBAAK9H,UAAWH,EAAOsI,cAAvB,WACE,SAAClD,EAAD,CACEjF,UAAWH,EAAOuI,YAElBjD,YAAaA,EACbD,eAAiB3D,GAAUmG,EAAe,CAAEvC,YAAa5D,GAAgB,QAFpEsG,IAIP,SAACtB,EAAD,CACEvG,UAAWH,EAAOuI,YAClB5B,OAAQA,EACRC,QAASA,EACTC,iBAAmBpC,GAASoD,EAAe,CAAEjB,QAASnC,EAAKC,OAASD,EAAK7D,KAAK,KAAO,UAEvF,SAACqF,EAAD,CACEE,YAAa2B,EACb5B,oBAAsBxE,GAAUmG,EAAe,CAAEC,WAAYpG,GAAgB,SAE9EyG,IACC,SAAC,EAAAK,OAAD,CAAQrI,UAAWH,EAAOyI,YAAaC,QAAS,YAAa5H,KAAK,QAAQ6H,QAhC7D,KACnBd,EAAe,CACbjB,QAAS,KACTtB,YAAa,KACbwC,WAAY,OAEdc,YAAW,IAAMpB,EAAaD,EAAY,IAAI,MA0BxC,kCASJrH,EAAa4B,IAAD,CAChBuC,QAAStC,EAAAA,GAAI;+BACgBD,EAAMG,OAAOC,OAAOC;qBAC9BL,EAAME,QAAQ;IAEjCsG,cAAevG,EAAAA,GAAI;;;qBAGAD,EAAME,QAAQ;IAEjCuG,YAAaxG,EAAAA,GAAI;;;qBAGED,EAAME,QAAQ;;IAGjCyG,YAAa1G,EAAAA,GAAI;mBACAD,EAAME,QAAQ;;yWCjEjC,MAqDM9B,EAAa4B,IAAD,CAChB+G,eAAgB9G,EAAAA,GAAI;cACRD,EAAME,QAAQ,EAAG;MAI/B,EA3DoB,KAAM,MACxB,MAAOjC,IAA0BmI,EAAAA,EAAAA,KAC3BY,GAAWC,EAAAA,EAAAA,gBACVnB,IAAezI,EAAAA,EAAAA,MAChB,QAAEyH,EAAU,KAAOmB,EAAAA,EAAAA,IAAwBH,GAC3C5H,GAASC,EAAAA,EAAAA,YAAWC,GAEpB8I,GAAcC,EAAAA,EAAAA,IAA4B3I,GAAUA,EAAM4I,iBAC1D,QAAEC,EAAF,MAAWlE,EAAOmE,OAAQC,EAAU,IAApC,UACJL,EAAYjJ,GAA0B,WADlC,QACyCuJ,EAAAA,GAEzCC,EC5BwB,EAAC5C,EAA6BC,KACrDtH,EAAAA,EAAAA,UAAQ,IACU,IAAnBsH,EAAQlC,OACHiC,EAEMA,EAAOK,SAAQ,EAAG3E,OAAAA,KAAaA,IAChCmH,QAAO,CAACC,EAAW3J,KAG/B,GAF+B8G,EAAQ8C,OAAOC,GAAiBxI,OAAOsD,KAAK3E,EAAMmB,QAAQ2I,SAASD,KAEtE,CAC1B,MAAME,EAAmBJ,EAAUK,MAAM7F,GAChC2C,EAAQ8C,OAAOK,GACb9F,EAAMhD,OAAO8I,KAAcjK,EAAMmB,OAAO8I,OAGnD,GAAKF,EAaHA,EAAiBxH,OAAO2H,KAAKlK,OAbR,CACrB,MAAMmB,EAAS2F,EAAQ4C,QAAO,CAACS,EAAK9C,IAC5B,OAAH,UAAQ8C,EAAR,CAAa,CAAC9C,GAAMrH,EAAMmB,OAAOkG,MAEnC,IACHsC,EAAUO,KAAK,CACb3H,OAAQ,CAACvC,GACTmB,OAAAA,EACAiJ,SAAU,CACRtI,KAAM,eAMP,CACL,MAAMuI,EAAkBV,EAAUK,MAAM7F,GAA+C,IAArC9C,OAAOsD,KAAKR,EAAMhD,QAAQyD,SACvEyF,EAGHA,EAAgB9H,OAAO2H,KAAKlK,GAF5B2J,EAAUO,KAAK,CAAE3H,OAAQ,CAACvC,GAAQmB,OAAQ,GAAIiJ,SAAU,CAAEtI,KAAM,UAMpE,OAAO6H,IACN,KACF,CAAC9C,EAAQC,IDbUwD,CAAiBf,EAASzC,GAC1CyD,EE3B4B1D,CAAAA,IAClC,MAAOiB,IAAezI,EAAAA,EAAAA,KAChBmL,GAAUvC,EAAAA,EAAAA,IAAwBH,GAClC2C,GAAWC,EAAAA,EAAAA,IAAcF,EAAQhF,aAAe,IAEtD,OAAOhG,EAAAA,EAAAA,UAAQ,IACNqH,EAAO6C,QAAO,CAACiB,EAAexG,KACnC,MAAM5B,EAAS4B,EAAM5B,OAAOR,QAAO,EAAGZ,OAAAA,EAAQZ,OAAAA,MAC5C,MAAMqK,GAAcC,EAAAA,EAAAA,IAAoB1J,EAAQsJ,GAC1CK,GAAeN,EAAQxC,YAAazH,EAAOC,QAAUgK,EAAQxC,WACnE,OAAO4C,GAAeE,KAUxB,OARIvI,EAAOqC,OAAS,IAEuB,IAArCvD,OAAOsD,KAAKR,EAAMhD,QAAQyD,OAC5B+F,EAAcI,QAAd,iBAA2B5G,EAA3B,CAAkC5B,OAAAA,KAElCoI,EAAcT,KAAd,iBAAwB/F,EAAxB,CAA+B5B,OAAAA,MAG5BoI,IACN,KACF,CAAC9D,EAAQ2D,EAASC,KFKOO,CAAoBvB,GAehD,OAbAwB,EAAAA,EAAAA,YAAU,KACR,SAASC,IACHjL,GACF+I,GAASmC,EAAAA,EAAAA,IAAuBlL,IAGpCiL,IACA,MAAME,EAAWC,YAAYH,EAAoBI,EAAAA,IACjD,MAAO,KACLC,cAAcH,MAEf,CAACpC,EAAU/I,KAGZ,UAACuL,EAAA,EAAD,CAAqBC,OAAO,SAA5B,WACE,SAACjE,EAAD,CAAkBX,OAAQ0C,IACzBF,IAAO,OAAI,SAAC,EAAAqC,mBAAD,CAAoBC,KAAK,4BACpCxG,IAAUkE,IACT,SAAC,EAAAuC,MAAD,CAAOC,MAAO,8BAA+BC,SAAU,QAAvD,SACG3G,EAAM4G,SAAW,kBAGrBxC,GACCgB,EAAoB/I,KAAI,CAAC2C,EAAO6H,KAE5B,UAAC,WAAD,YACe,IAAVA,GAAqE,IAAtD3K,OAAOsD,KAAK4F,EAAoB,GAAGpJ,QAAQyD,QAChD,IAAVoH,GAAe3K,OAAOsD,KAAKR,EAAMhD,QAAQyD,OAAS,KACnD,eAAGvE,UAAWH,EAAO6I,eAArB,yBAAkD1H,OAAOsD,KAAKR,EAAMhD,QAAQL,KAAK,UAEnF,SAACoD,EAAD,CAAYjE,uBAAwBA,GAA0B,GAAIkE,MAAOA,MALrD,GAAE8H,KAAKC,UAAU/H,EAAMhD,iBAAiB6K,OASnEzC,IAAYgB,EAAoB3F,SAAhC,OAA0C,8C,qkBG1D1C,MAAM4G,EAAiC,EAAGW,SAAAA,EAAUV,OAAAA,EAAQW,UAAAA,MACjE,MAAMC,GAAWC,EAAAA,EAAAA,IACfC,EAAAA,EAAAA,cAAa/L,GAAsBA,EAAMgM,WACzCf,GAGF,OACE,SAAC,IAAD,CAAMY,SAAUA,EAAhB,UACE,SAAC,aAAD,CAAeD,UAAWA,EAA1B,SAAsCD,Q,8uBCX5C,MAAMM,EAAyB,CAAC,UAAW,eAO9B9K,EAAoC,EAAGF,cAAAA,EAAeG,MAAAA,MACjE,MAAMc,EAAQgK,EAAAA,GAAiBjL,IAC7B,SAAC,EAAAiE,QAAD,CAASC,QAASlE,EAAekL,UAAU,MAAM3K,MAAM,OAAvD,UACE,0BAAO0K,EAAAA,GAAiBjL,OAG1BA,EAGF,OACE,SAAC,IAAD,CAAciB,MAAOA,EAAOkK,YAAY,EAAxC,UACE,SAACC,EAAD,CAAiBpL,cAAeA,EAAeG,MAAOA,OAKtDiL,EAA6B,EAAGpL,cAAAA,EAAeG,MAAAA,MACnD,MAAM1B,GAAS4M,EAAAA,EAAAA,WAAU1M,GACzB,OAAIqM,EAAuB3C,SAASrI,IAC3B,SAAC,IAAD,UAAOG,IACLA,GAASA,EAAMuF,WAAW,SAEjC,cAAGxG,KAAMiB,EAAOsE,OAAO,UAAU7F,UAAWH,EAAO6M,KAAnD,SACGnL,KAIA,8BAAGA,KAGCxB,EAAa4B,IAAD,CACvBgL,KAAM/K,EAAAA,GAAI;;IAGV8K,KAAM9K,EAAAA,GAAI;;aAECD,EAAMG,OAAO8K;8hBCxCnB,MAAMC,EAA0B,EAAG7M,UAAAA,EAAWqC,MAAAA,EAAOkK,WAAAA,EAAYT,SAAAA,MACtE,MAAMjM,GAASC,EAAAA,EAAAA,YAAWC,GAE1B,OACE,iBAAKC,WAAW8M,EAAAA,EAAAA,IAAG9M,EAAWH,EAAOkN,MAAOR,EAAa1M,EAAOmN,gBAAkBnN,EAAOoN,eAAzF,WACE,yBAAM5K,KACN,yBAAMyJ,QAKN/L,EAAa4B,IAAD,CAChBqL,gBAAiBpL,EAAAA,GAAI;;MAEjBD,EAAM6B,YAAY0J,KAAK;;;IAI3BD,cAAerL,EAAAA,GAAI;;IAGnBmL,MAAOnL,EAAAA,GAAI;;cAECD,EAAME,QAAQ;;;;uBAILF,EAAME,QAAQ;mBAClBF,EAAM+B,WAAW9C,KAAKuM;qBACpBxL,EAAM+B,WAAW0J;;;;;eAKvBzL,EAAMG,OAAOwJ,KAAK3G;;giBCD1B,MAAM0I,EAAe,EAC1BhK,KAAAA,EACAJ,MAAAA,EACAK,aAAAA,GAAe,EACfgK,WAAAA,EACAC,SAAAA,EACAC,WAAAA,EACAjK,sBAAAA,EACAkK,gBAAAA,EAIAC,iBAAAA,EACAC,mBAAAA,MAEA,IAAKL,GAAcC,GAAYC,MAAiBF,GAAcC,GAAYC,GACxE,MAAM,IAAII,MAAM,4EAElB,IAAKtK,GAAgBC,MAA4BD,IAAgBC,GAC/D,MAAM,IAAIqK,MAAM,iFAElB,MAAM/N,GAASC,EAAAA,EAAAA,YAAWC,EAAUsD,EAAMC,IAAgBqK,KAEnDE,EAAaC,IAAkB7J,EAAAA,EAAAA,UAA6C,IAWnF,OACE,iBAAKjE,UAAWH,EAAOkO,UAAW,cAAY,gBAA9C,WACE,iBAAK/N,UAAWH,EAAOmO,IAAK,cAAY,SAAxC,UACGL,GAAsBA,IACtBrK,IAAgB,gBAAKtD,UAAWH,EAAOoO,OACvC5K,EAAKlC,KAAK+M,IACT,gBAAKlO,UAAWH,EAAOoO,KAAvB,SACGC,EAAI7L,OAD2B6L,EAAI9L,SAMzCa,EAAM9B,KAAI,CAACgN,EAAMxC,KAAU,MAC1B,MAAMyC,EAAiBZ,EAAaA,EAAWW,GAAQN,EAAYpE,SAAS0E,EAAK/L,IACjF,OACE,iBAAKpC,UAAWH,EAAOmO,IAAmB,wBAAaP,MAAAA,OAAb,EAAaA,EAAkBU,EAAMxC,UAArC,QAA+C,MAAzF,UACG+B,GAAoBA,EAAiBS,EAAMxC,EAAO1I,GAClDK,IACC,gBAAKtD,WAAW8M,EAAAA,EAAAA,IAAGjN,EAAOoO,KAAMpO,EAAOwO,YAAvC,UACE,SAAC,EAAAC,WAAD,CACE,cAAeF,EAAiB,WAAa,UAAhC,OACbxN,KAAK,KACL,cAAY,kBACZZ,UAAWH,EAAO0O,aAClB9M,KAAM2M,EAAiB,aAAe,cACtC5F,QAAS,IAlCD2F,CAAAA,IAClBX,GAAcF,GAAcC,EAC9BC,EAAWW,GAAQb,EAAWa,GAAQZ,EAASY,GAE/CL,EACED,EAAYpE,SAAS0E,EAAK/L,IAAMyL,EAAYnM,QAAQ8M,GAAWA,IAAWL,EAAK/L,KAAM,IAAIyL,EAAaM,EAAK/L,MA6BlFqM,CAAeN,GAC9BO,KAAK,aAIVrL,EAAKlC,KAAK+M,IACT,gBAAKlO,WAAW8M,EAAAA,EAAAA,IAAGjN,EAAOoO,KAAMpO,EAAO8O,UAAW,cAAaT,EAAI7L,MAAnE,SACG6L,EAAI5L,WAAW6L,EAAMxC,IADwD,GAAEwC,EAAK/L,MAAM8L,EAAI9L,QAIlGgM,GAAkB7K,IACjB,gBAAKvD,UAAWH,EAAO+O,mBAAoB,cAAY,mBAAvD,SACGrL,EAAsB4K,EAAMxC,EAAO1I,OAtBTkL,EAAK/L,WAgC1CrC,EAAY,CAChBsD,EACAC,EACAuL,KAEA,MAAMC,EAAQzL,EAAKlC,KAAK+M,GACjBA,EAAItN,KAIe,iBAAbsN,EAAItN,KACL,GAAEsN,EAAItN,SAGTsN,EAAItN,KAPF,SAkBX,OARI0C,GACFwL,EAAMpE,QAAQ,oBAGZmE,GACFC,EAAMpE,QAAQ,KAGR/I,IAAD,CACLoM,UAAWnM,EAAAA,GAAI;0BACOD,EAAMG,OAAOC,OAAOgN;;eAE/BpN,EAAMG,OAAOwJ,KAAK3G;MAE7BqJ,IAAKpM,EAAAA,GAAI;;+BAEkBkN,EAAMrO,KAAK;;;;4BAIdkB,EAAMG,OAAO4C,WAAWC;;;;4BAIxBhD,EAAMG,OAAO4C,WAAWM;;;QAG5CrD,EAAM6B,YAAY0J,KAAK;;;qBAGVvL,EAAME,QAAQ;;;;;;UAMzBgN,EACG,6FAKD;;MAGRZ,KAAMrM,EAAAA,GAAI;;iBAEGD,EAAME,QAAQ;;QAEvBF,EAAM6B,YAAY0J,KAAK;mBACZvL,EAAME,QAAQ;;;MAI7B8M,SAAU/M,EAAAA,GAAI;;;QAGVD,EAAM6B,YAAY0J,KAAK;;;;;;;mBAOZvL,EAAMG,OAAOwJ,KAAKtG;;;MAIjCqJ,WAAYzM,EAAAA,GAAI;;;QAGZD,EAAM6B,YAAY0J,KAAK;;;;MAK3B0B,mBAAoBhN,EAAAA,GAAI;yBACHkN,EAAMvK,OAAS;2BACbsK,EAAgB,EAAI;;mBAE5BlN,EAAME,QAAQ,QAAQF,EAAME,QAAQ;;;QAG/CF,EAAM6B,YAAY0J,KAAK;;gCAECvL,EAAMG,OAAOC,OAAOgN;;mBAEjCpN,EAAME,QAAQ;;MAG7B0M,aAAc3M,EAAAA,GAAI;;;6pBC/Nf,MAAMwB,EAA6B,IAGA,IAHmB,sBAC3DG,GAEwC,EADrCyL,E,oIACqC,MACxC,MAAMnP,GAASC,EAAAA,EAAAA,YAAWC,GAC1B,OACE,SAAC,IAAD,eACEwD,sBACEA,EACI,CAAC4K,EAAMxC,EAAO1I,KACZ,kCACK0I,IAAU1I,EAAMsB,OAAS,KAAM,gBAAKvE,WAAW8M,EAAAA,EAAAA,IAAGjN,EAAOoP,iBAAkBpP,EAAOqP,aACpF3L,EAAsB4K,EAAMxC,EAAO1I,WAGxCkM,EAENxB,mBAAoB,KAClB,gBAAK3N,UAAWH,EAAOuP,SAAvB,UACE,gBAAKpP,WAAW8M,EAAAA,EAAAA,IAAGjN,EAAOwP,gBAAiBxP,EAAOqP,eAGtDxB,iBAAkB,CAAC4B,EAAG3D,EAAO1I,KAC3B,iBAAKjD,UAAWH,EAAOuP,SAAvB,WACE,gBAAKpP,WAAW8M,EAAAA,EAAAA,IAAGjN,EAAO0P,aAAc1P,EAAOqP,eAC5CvD,IAAU1I,EAAMsB,OAAS,KAAM,gBAAKvE,WAAW8M,EAAAA,EAAAA,IAAGjN,EAAO2P,gBAAiB3P,EAAOqP,iBAGpFF,KAKGjP,EAAa4B,IAAD,CACvByN,SAAUxN,EAAAA,GAAI;;;IAIdsN,UAAWtN,EAAAA,GAAI;;6BAEYD,EAAMG,OAAOC,OAAOC;;;MAG3CL,EAAM6B,YAAY0J,KAAK;;;IAI3BqC,aAAc3N,EAAAA,GAAI;;+BAEWD,EAAMG,OAAOC,OAAOC;;;IAIjDwN,gBAAiB5N,EAAAA,GAAI;;;IAIrBqN,iBAAkBrN,EAAAA,GAAI;;;;IAKtByN,gBAAiBzN,EAAAA,GAAI;;;shBChEhB,MAAM6N,EAAkB,EAAG3D,SAAAA,EAAU9L,UAAAA,MAC1C,MAAMH,GAAS4M,EAAAA,EAAAA,WAAU1M,GACzB,OAAO,gBAAKC,WAAW8M,EAAAA,EAAAA,IAAGjN,EAAOqE,QAASlE,GAAnC,SAAgD8L,KAE5C/L,EAAa4B,IAAD,CACvBuC,QAAStC,EAAAA,GAAI;wBACSD,EAAMG,OAAO4N;wBACb/N,EAAMG,OAAO6N;qBAChBhO,EAAMI,OAAO6N,OAAOzC;eAC1BxL,EAAME,QAAQgO,MAAMlO,EAAME,QAAQsL;mBAC9BxL,EAAM+B,WAAWoM,WAAWC;gdCb/C,MAAMC,EAA+C,CACnD,CAAC5P,EAAAA,GAAAA,QAAoB,MACrB,CAACA,EAAAA,GAAAA,aAAyB,UAC1B,CAACA,EAAAA,GAAAA,YAAwB,QAOdoC,EAA6B,EAAGrC,MAAAA,MAAY,SAAC,IAAD,CAAUA,MAAO6P,EAAkB7P,GAAnC,SAA4CA,K,yaCRrG,SAAS8P,EAAqBrQ,GAC5B,OACEA,IAA2BsQ,EAAAA,OACzBC,EAAAA,EAAAA,MAA6BxG,MAAMyG,GAAOA,EAAG3O,OAAS7B,IAQrD,SAASmI,IACd,MAAON,EAAa4I,IAAqBrR,EAAAA,EAAAA,KAEnCsR,GAASjR,EAAAA,EAAAA,cACZO,IACMqQ,EAAqBrQ,KAGtBA,IAA2BsQ,EAAAA,IAC7BK,EAAAA,EAAAA,OAAaC,EAAAA,IACbH,EAAkB,CAAE,CAACI,EAAAA,IAA8B,SAEnDF,EAAAA,EAAAA,IAAUC,EAAAA,GAAqC5Q,GAC/CyQ,EAAkB,CAAE,CAACI,EAAAA,IAA8B7Q,QAGvD,CAACyQ,IAGGK,EAAcjJ,EAAYgJ,EAAAA,IAEhC,GAAIC,GAAsC,iBAAhBA,EACxB,OAAIT,EAAqBS,GAChB,CAACA,EAAaJ,GAGd,MAACnB,EAAWmB,GAGvB,MAAMK,EAAcJ,EAAAA,EAAAA,IAAUC,EAAAA,IAC9B,OAAIG,GAAsC,iBAAhBA,GAA4BV,EAAqBU,IACzEL,EAAOK,GACA,CAACA,EAAaL,IAGhB,CAACJ,EAAAA,GAA2BI","sources":["webpack://grafana/./public/app/core/hooks/useQueryParams.ts","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroupAlertsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/MatcherFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertStateFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/GroupBy.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroupFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/AlertGroups.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useGroupedAlerts.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useFilteredAmGroups.ts","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AnnotationDetailsField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/DetailsField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/DynamicTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/DynamicTableWithGuidelines.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Well.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/AmAlertStateTag.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts"],"sourcesContent":["import { UrlQueryMap } from '@grafana/data';\nimport { locationSearchToObject, locationService } from '@grafana/runtime';\nimport { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport function useQueryParams(): [UrlQueryMap, (values: UrlQueryMap, replace?: boolean) => void] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => locationSearchToObject(search || ''), [search]);\n  const update = useCallback(\n    (values: UrlQueryMap, replace?: boolean) => setImmediate(() => locationService.partial(values, replace)),\n    []\n  );\n  return [queryParams, update];\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LinkButton, useStyles2 } from '@grafana/ui';\nimport { AlertmanagerAlert, AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport React, { FC } from 'react';\nimport { makeAMLink } from '../../utils/misc';\nimport { AnnotationDetailsField } from '../AnnotationDetailsField';\nimport { getMatcherQueryParams } from '../../utils/matchers';\n\ninterface AmNotificationsAlertDetailsProps {\n  alertManagerSourceName: string;\n  alert: AlertmanagerAlert;\n}\n\nexport const AlertDetails: FC<AmNotificationsAlertDetailsProps> = ({ alert, alertManagerSourceName }) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <>\n      <div className={styles.actionsRow}>\n        {alert.status.state === AlertState.Suppressed && (\n          <LinkButton\n            href={`${makeAMLink(\n              '/alerting/silences',\n              alertManagerSourceName\n            )}&silenceIds=${alert.status.silencedBy.join(',')}`}\n            className={styles.button}\n            icon={'bell'}\n            size={'sm'}\n          >\n            Manage silences\n          </LinkButton>\n        )}\n        {alert.status.state === AlertState.Active && (\n          <LinkButton\n            href={`${makeAMLink('/alerting/silence/new', alertManagerSourceName)}&${getMatcherQueryParams(\n              alert.labels\n            )}`}\n            className={styles.button}\n            icon={'bell-slash'}\n            size={'sm'}\n          >\n            Silence\n          </LinkButton>\n        )}\n        {alert.generatorURL && (\n          <LinkButton className={styles.button} href={alert.generatorURL} icon={'chart-line'} size={'sm'}>\n            See source\n          </LinkButton>\n        )}\n      </div>\n      {Object.entries(alert.annotations).map(([annotationKey, annotationValue]) => (\n        <AnnotationDetailsField key={annotationKey} annotationKey={annotationKey} value={annotationValue} />\n      ))}\n      <div className={styles.receivers}>\n        Receivers:{' '}\n        {alert.receivers\n          .map(({ name }) => name)\n          .filter((name) => !!name)\n          .join(', ')}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  button: css`\n    & + & {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  actionsRow: css`\n    padding: ${theme.spacing(2, 0)} !important;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n  `,\n  receivers: css`\n    padding: ${theme.spacing(1, 0)};\n  `,\n});\n","import { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\nimport React, { useMemo } from 'react';\nimport { useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { AmAlertStateTag } from '../silences/AmAlertStateTag';\nimport { AlertLabels } from '../AlertLabels';\nimport { DynamicTableWithGuidelines } from '../DynamicTableWithGuidelines';\nimport { AlertDetails } from './AlertDetails';\n\ninterface Props {\n  alerts: AlertmanagerAlert[];\n  alertManagerSourceName: string;\n}\n\ntype AlertGroupAlertsTableColumnProps = DynamicTableColumnProps<AlertmanagerAlert>;\ntype AlertGroupAlertsTableItemProps = DynamicTableItemProps<AlertmanagerAlert>;\n\nexport const AlertGroupAlertsTable = ({ alerts, alertManagerSourceName }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const columns = useMemo(\n    (): AlertGroupAlertsTableColumnProps[] => [\n      {\n        id: 'state',\n        label: 'State',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: alert }) => (\n          <>\n            <AmAlertStateTag state={alert.status.state} />\n            <span className={styles.duration}>\n              for{' '}\n              {intervalToAbbreviatedDurationString({\n                start: new Date(alert.startsAt),\n                end: new Date(alert.endsAt),\n              })}\n            </span>\n          </>\n        ),\n        size: '190px',\n      },\n      {\n        id: 'labels',\n        label: 'Labels',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: { labels } }) => <AlertLabels className={styles.labels} labels={labels} />,\n        size: 1,\n      },\n    ],\n    [styles]\n  );\n\n  const items = useMemo(\n    (): AlertGroupAlertsTableItemProps[] =>\n      alerts.map((alert) => ({\n        id: alert.fingerprint,\n        data: alert,\n      })),\n    [alerts]\n  );\n\n  return (\n    <div className={styles.tableWrapper} data-testid=\"alert-group-table\">\n      <DynamicTableWithGuidelines\n        cols={columns}\n        items={items}\n        isExpandable={true}\n        renderExpandedContent={({ data: alert }) => (\n          <AlertDetails alert={alert} alertManagerSourceName={alertManagerSourceName} />\n        )}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableWrapper: css`\n    margin-top: ${theme.spacing(3)};\n    ${theme.breakpoints.up('md')} {\n      margin-left: ${theme.spacing(4.5)};\n    }\n  `,\n  duration: css`\n    margin-left: ${theme.spacing(1)};\n    font-size: ${theme.typography.bodySmall.fontSize};\n  `,\n  labels: css`\n    padding-bottom: 0;\n  `,\n});\n","import { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport React, { useState } from 'react';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { AlertLabels } from '../AlertLabels';\nimport { AlertGroupAlertsTable } from './AlertGroupAlertsTable';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { AlertGroupHeader } from './AlertGroupHeader';\n\ninterface Props {\n  group: AlertmanagerGroup;\n  alertManagerSourceName: string;\n}\n\nexport const AlertGroup = ({ alertManagerSourceName, group }: Props) => {\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(true);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.header}>\n        <div className={styles.group} data-testid=\"alert-group\">\n          <CollapseToggle\n            isCollapsed={isCollapsed}\n            onToggle={() => setIsCollapsed(!isCollapsed)}\n            data-testid=\"alert-group-collapse-toggle\"\n          />\n          {Object.keys(group.labels).length ? (\n            <AlertLabels className={styles.headerLabels} labels={group.labels} />\n          ) : (\n            <span>No grouping</span>\n          )}\n        </div>\n        <AlertGroupHeader group={group} />\n      </div>\n      {!isCollapsed && <AlertGroupAlertsTable alertManagerSourceName={alertManagerSourceName} alerts={group.alerts} />}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    & + & {\n      margin-top: ${theme.spacing(2)};\n    }\n  `,\n  headerLabels: css`\n    padding-bottom: 0 !important;\n    margin-bottom: -${theme.spacing(0.5)};\n  `,\n  header: css`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: space-between;\n    padding: ${theme.spacing(1, 1, 1, 0)};\n    background-color: ${theme.colors.background.secondary};\n    width: 100%;\n  `,\n  group: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  `,\n  summary: css``,\n  spanElement: css`\n    margin-left: ${theme.spacing(0.5)};\n  `,\n  [AlertState.Active]: css`\n    color: ${theme.colors.error.main};\n  `,\n  [AlertState.Suppressed]: css`\n    color: ${theme.colors.primary.main};\n  `,\n  [AlertState.Unprocessed]: css`\n    color: ${theme.colors.secondary.main};\n  `,\n});\n","import React, { FormEvent } from 'react';\nimport { Label, Tooltip, Input, Icon, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\n\ninterface Props {\n  className?: string;\n  queryString?: string;\n  onFilterChange: (filterString: string) => void;\n}\n\nexport const MatcherFilter = ({ className, onFilterChange, queryString }: Props) => {\n  const styles = useStyles2(getStyles);\n  const handleSearchChange = (e: FormEvent<HTMLInputElement>) => {\n    const target = e.target as HTMLInputElement;\n    onFilterChange(target.value);\n  };\n  return (\n    <div className={className}>\n      <Label>\n        <Tooltip\n          content={\n            <div>\n              Filter alerts using label querying, ex:\n              <pre>{`{severity=\"critical\", instance=~\"cluster-us-.+\"}`}</pre>\n            </div>\n          }\n        >\n          <Icon className={styles.icon} name=\"info-circle\" size=\"xs\" />\n        </Tooltip>\n        Search by label\n      </Label>\n      <Input\n        placeholder=\"Search\"\n        defaultValue={queryString}\n        onChange={handleSearchChange}\n        data-testid=\"search-query-input\"\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  icon: css`\n    margin-right: ${theme.spacing(0.5)};\n  `,\n});\n","import React from 'react';\nimport { RadioButtonGroup, Label, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport { css } from '@emotion/css';\n\ninterface Props {\n  stateFilter?: AlertState;\n  onStateFilterChange: (value: AlertState) => void;\n}\n\nexport const AlertStateFilter = ({ onStateFilterChange, stateFilter }: Props) => {\n  const styles = useStyles2(getStyles);\n  const alertStateOptions: SelectableValue[] = Object.entries(AlertState)\n    .sort(([labelA], [labelB]) => (labelA < labelB ? -1 : 1))\n    .map(([label, state]) => ({\n      label,\n      value: state,\n    }));\n\n  return (\n    <div className={styles.wrapper}>\n      <Label>State</Label>\n      <RadioButtonGroup options={alertStateOptions} value={stateFilter} onChange={onStateFilterChange} />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n});\n","import { AlertmanagerGroup } from 'app/plugins/datasource/alertmanager/types';\nimport React from 'react';\nimport { uniq } from 'lodash';\nimport { Icon, Label, MultiSelect } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\n\ninterface Props {\n  className?: string;\n  groups: AlertmanagerGroup[];\n  groupBy: string[];\n  onGroupingChange: (keys: string[]) => void;\n}\n\nexport const GroupBy = ({ className, groups, groupBy, onGroupingChange }: Props) => {\n  const labelKeyOptions = uniq(groups.flatMap((group) => group.alerts).flatMap(({ labels }) => Object.keys(labels)))\n    .filter((label) => !(label.startsWith('__') && label.endsWith('__'))) // Filter out private labels\n    .map<SelectableValue>((key) => ({\n      label: key,\n      value: key,\n    }));\n\n  return (\n    <div data-testid={'group-by-container'} className={className}>\n      <Label>Custom group by</Label>\n      <MultiSelect\n        aria-label={'group by label keys'}\n        value={groupBy}\n        placeholder=\"Group by\"\n        prefix={<Icon name={'tag-alt'} />}\n        onChange={(items) => {\n          onGroupingChange(items.map(({ value }) => value as string));\n        }}\n        options={labelKeyOptions}\n      />\n    </div>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { AlertManagerPicker } from '../AlertManagerPicker';\nimport { MatcherFilter } from './MatcherFilter';\nimport { AlertStateFilter } from './AlertStateFilter';\nimport { GroupBy } from './GroupBy';\nimport { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\n\nimport { useAlertManagerSourceName } from '../../hooks/useAlertManagerSourceName';\nimport { css } from '@emotion/css';\nimport { getFiltersFromUrlParams } from '../../utils/misc';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\n\ninterface Props {\n  groups: AlertmanagerGroup[];\n}\n\nexport const AlertGroupFilter = ({ groups }: Props) => {\n  const [filterKey, setFilterKey] = useState<number>(Math.floor(Math.random() * 100));\n  const [queryParams, setQueryParams] = useQueryParams();\n  const { groupBy = [], queryString, alertState } = getFiltersFromUrlParams(queryParams);\n  const matcherFilterKey = `matcher-${filterKey}`;\n\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName();\n  const styles = useStyles2(getStyles);\n\n  const clearFilters = () => {\n    setQueryParams({\n      groupBy: null,\n      queryString: null,\n      alertState: null,\n    });\n    setTimeout(() => setFilterKey(filterKey + 1), 100);\n  };\n\n  const showClearButton = !!(groupBy.length > 0 || queryString || alertState);\n\n  return (\n    <div className={styles.wrapper}>\n      <AlertManagerPicker current={alertManagerSourceName} onChange={setAlertManagerSourceName} />\n      <div className={styles.filterSection}>\n        <MatcherFilter\n          className={styles.filterInput}\n          key={matcherFilterKey}\n          queryString={queryString}\n          onFilterChange={(value) => setQueryParams({ queryString: value ? value : null })}\n        />\n        <GroupBy\n          className={styles.filterInput}\n          groups={groups}\n          groupBy={groupBy}\n          onGroupingChange={(keys) => setQueryParams({ groupBy: keys.length ? keys.join(',') : null })}\n        />\n        <AlertStateFilter\n          stateFilter={alertState as AlertState}\n          onStateFilterChange={(value) => setQueryParams({ alertState: value ? value : null })}\n        />\n        {showClearButton && (\n          <Button className={styles.clearButton} variant={'secondary'} icon=\"times\" onClick={clearFilters}>\n            Clear filters\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    border-bottom: 1px solid ${theme.colors.border.medium};\n    margin-bottom: ${theme.spacing(3)};\n  `,\n  filterSection: css`\n    display: flex;\n    flex-direction: row;\n    margin-bottom: ${theme.spacing(3)};\n  `,\n  filterInput: css`\n    width: 340px;\n    & + & {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  clearButton: css`\n    margin-left: ${theme.spacing(1)};\n    margin-top: 19px;\n  `,\n});\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Alert, LoadingPlaceholder, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\n\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { AlertGroup } from './components/alert-groups/AlertGroup';\nimport { AlertGroupFilter } from './components/alert-groups/AlertGroupFilter';\nimport { fetchAlertGroupsAction } from './state/actions';\n\nimport { initialAsyncRequestState } from './utils/redux';\nimport { getFiltersFromUrlParams } from './utils/misc';\nimport { NOTIFICATIONS_POLL_INTERVAL_MS } from './utils/constants';\n\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { useGroupedAlerts } from './hooks/useGroupedAlerts';\nimport { useFilteredAmGroups } from './hooks/useFilteredAmGroups';\nimport { css } from '@emotion/css';\n\nconst AlertGroups = () => {\n  const [alertManagerSourceName] = useAlertManagerSourceName();\n  const dispatch = useDispatch();\n  const [queryParams] = useQueryParams();\n  const { groupBy = [] } = getFiltersFromUrlParams(queryParams);\n  const styles = useStyles2(getStyles);\n\n  const alertGroups = useUnifiedAlertingSelector((state) => state.amAlertGroups);\n  const { loading, error, result: results = [] } =\n    alertGroups[alertManagerSourceName || ''] ?? initialAsyncRequestState;\n\n  const groupedAlerts = useGroupedAlerts(results, groupBy);\n  const filteredAlertGroups = useFilteredAmGroups(groupedAlerts);\n\n  useEffect(() => {\n    function fetchNotifications() {\n      if (alertManagerSourceName) {\n        dispatch(fetchAlertGroupsAction(alertManagerSourceName));\n      }\n    }\n    fetchNotifications();\n    const interval = setInterval(fetchNotifications, NOTIFICATIONS_POLL_INTERVAL_MS);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [dispatch, alertManagerSourceName]);\n\n  return (\n    <AlertingPageWrapper pageId=\"groups\">\n      <AlertGroupFilter groups={results} />\n      {loading && <LoadingPlaceholder text=\"Loading notifications\" />}\n      {error && !loading && (\n        <Alert title={'Error loading notifications'} severity={'error'}>\n          {error.message || 'Unknown error'}\n        </Alert>\n      )}\n      {results &&\n        filteredAlertGroups.map((group, index) => {\n          return (\n            <React.Fragment key={`${JSON.stringify(group.labels)}-group-${index}`}>\n              {((index === 1 && Object.keys(filteredAlertGroups[0].labels).length === 0) ||\n                (index === 0 && Object.keys(group.labels).length > 0)) && (\n                <p className={styles.groupingBanner}>Grouped by: {Object.keys(group.labels).join(', ')}</p>\n              )}\n              <AlertGroup alertManagerSourceName={alertManagerSourceName || ''} group={group} />\n            </React.Fragment>\n          );\n        })}\n      {results && !filteredAlertGroups.length && <p>No results.</p>}\n    </AlertingPageWrapper>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  groupingBanner: css`\n    margin: ${theme.spacing(2, 0)};\n  `,\n});\n\nexport default AlertGroups;\n","import { useMemo } from 'react';\nimport { AlertmanagerGroup } from 'app/plugins/datasource/alertmanager/types';\nimport { Labels } from '@grafana/data';\n\nexport const useGroupedAlerts = (groups: AlertmanagerGroup[], groupBy: string[]) => {\n  return useMemo(() => {\n    if (groupBy.length === 0) {\n      return groups;\n    }\n    const alerts = groups.flatMap(({ alerts }) => alerts);\n    return alerts.reduce((groupings, alert) => {\n      const alertContainsGroupings = groupBy.every((groupByLabel) => Object.keys(alert.labels).includes(groupByLabel));\n\n      if (alertContainsGroupings) {\n        const existingGrouping = groupings.find((group) => {\n          return groupBy.every((groupKey) => {\n            return group.labels[groupKey] === alert.labels[groupKey];\n          });\n        });\n        if (!existingGrouping) {\n          const labels = groupBy.reduce((acc, key) => {\n            acc = { ...acc, [key]: alert.labels[key] };\n            return acc;\n          }, {} as Labels);\n          groupings.push({\n            alerts: [alert],\n            labels,\n            receiver: {\n              name: 'NONE',\n            },\n          });\n        } else {\n          existingGrouping.alerts.push(alert);\n        }\n      } else {\n        const noGroupingGroup = groupings.find((group) => Object.keys(group.labels).length === 0);\n        if (!noGroupingGroup) {\n          groupings.push({ alerts: [alert], labels: {}, receiver: { name: 'NONE' } });\n        } else {\n          noGroupingGroup.alerts.push(alert);\n        }\n      }\n\n      return groupings;\n    }, [] as AlertmanagerGroup[]);\n  }, [groups, groupBy]);\n};\n","import { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { AlertmanagerGroup } from 'app/plugins/datasource/alertmanager/types';\nimport { useMemo } from 'react';\nimport { labelsMatchMatchers, parseMatchers } from '../utils/alertmanager';\nimport { getFiltersFromUrlParams } from '../utils/misc';\n\nexport const useFilteredAmGroups = (groups: AlertmanagerGroup[]) => {\n  const [queryParams] = useQueryParams();\n  const filters = getFiltersFromUrlParams(queryParams);\n  const matchers = parseMatchers(filters.queryString || '');\n\n  return useMemo(() => {\n    return groups.reduce((filteredGroup, group) => {\n      const alerts = group.alerts.filter(({ labels, status }) => {\n        const labelsMatch = labelsMatchMatchers(labels, matchers);\n        const filtersMatch = filters.alertState ? status.state === filters.alertState : true;\n        return labelsMatch && filtersMatch;\n      });\n      if (alerts.length > 0) {\n        // The ungrouped alerts should be first in the results\n        if (Object.keys(group.labels).length === 0) {\n          filteredGroup.unshift({ ...group, alerts });\n        } else {\n          filteredGroup.push({ ...group, alerts });\n        }\n      }\n      return filteredGroup;\n    }, [] as AlertmanagerGroup[]);\n  }, [groups, filters, matchers]);\n};\n","import React, { FC } from 'react';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper: FC<Props> = ({ children, pageId, isLoading }) => {\n  const navModel = getNavModel(\n    useSelector((state: StoreState) => state.navIndex),\n    pageId\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import React, { FC } from 'react';\nimport { Well } from './Well';\nimport { GrafanaTheme } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { Tooltip, useStyles } from '@grafana/ui';\nimport { DetailsField } from './DetailsField';\nimport { Annotation, annotationLabels } from '../utils/constants';\n\nconst wellableAnnotationKeys = ['message', 'description'];\n\ninterface Props {\n  annotationKey: string;\n  value: string;\n}\n\nexport const AnnotationDetailsField: FC<Props> = ({ annotationKey, value }) => {\n  const label = annotationLabels[annotationKey as Annotation] ? (\n    <Tooltip content={annotationKey} placement=\"top\" theme=\"info\">\n      <span>{annotationLabels[annotationKey as Annotation]}</span>\n    </Tooltip>\n  ) : (\n    annotationKey\n  );\n\n  return (\n    <DetailsField label={label} horizontal={true}>\n      <AnnotationValue annotationKey={annotationKey} value={value} />\n    </DetailsField>\n  );\n};\n\nconst AnnotationValue: FC<Props> = ({ annotationKey, value }) => {\n  const styles = useStyles(getStyles);\n  if (wellableAnnotationKeys.includes(annotationKey)) {\n    return <Well>{value}</Well>;\n  } else if (value && value.startsWith('http')) {\n    return (\n      <a href={value} target=\"__blank\" className={styles.link}>\n        {value}\n      </a>\n    );\n  }\n  return <>{value}</>;\n};\n\nexport const getStyles = (theme: GrafanaTheme) => ({\n  well: css`\n    word-break: break-all;\n  `,\n  link: css`\n    word-break: break-all;\n    color: ${theme.colors.textBlue};\n  `,\n});\n","import React, { FC } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\ninterface Props {\n  label: React.ReactNode;\n  className?: string;\n  horizontal?: boolean;\n}\n\nexport const DetailsField: FC<Props> = ({ className, label, horizontal, children }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={cx(className, styles.field, horizontal ? styles.fieldHorizontal : styles.fieldVertical)}>\n      <div>{label}</div>\n      <div>{children}</div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  fieldHorizontal: css`\n    flex-direction: row;\n    ${theme.breakpoints.down('md')} {\n      flex-direction: column;\n    }\n  `,\n  fieldVertical: css`\n    flex-direction: column;\n  `,\n  field: css`\n    display: flex;\n    margin: ${theme.spacing(2)} 0;\n\n    & > div:first-child {\n      width: 110px;\n      padding-right: ${theme.spacing(1)};\n      font-size: ${theme.typography.size.sm};\n      font-weight: ${theme.typography.fontWeightBold};\n      line-height: 1.8;\n    }\n    & > div:nth-child(2) {\n      flex: 1;\n      color: ${theme.colors.text.secondary};\n    }\n  `,\n});\n","import React, { ReactNode, useState } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconButton, useStyles2 } from '@grafana/ui';\n\nexport interface DynamicTableColumnProps<T = unknown> {\n  id: string | number;\n  label: string;\n\n  renderCell: (item: DynamicTableItemProps<T>, index: number) => ReactNode;\n  size?: number | string;\n}\n\nexport interface DynamicTableItemProps<T = unknown> {\n  id: string | number;\n  data: T;\n  renderExpandedContent?: () => ReactNode;\n}\n\nexport interface DynamicTableProps<T = unknown> {\n  cols: Array<DynamicTableColumnProps<T>>;\n  items: Array<DynamicTableItemProps<T>>;\n\n  isExpandable?: boolean;\n\n  // provide these to manually control expanded status\n  onCollapse?: (item: DynamicTableItemProps<T>) => void;\n  onExpand?: (item: DynamicTableItemProps<T>) => void;\n  isExpanded?: (item: DynamicTableItemProps<T>) => boolean;\n\n  renderExpandedContent?: (\n    item: DynamicTableItemProps<T>,\n    index: number,\n    items: Array<DynamicTableItemProps<T>>\n  ) => ReactNode;\n  testIdGenerator?: (item: DynamicTableItemProps<T>, index: number) => string;\n  renderPrefixHeader?: () => ReactNode;\n  renderPrefixCell?: (\n    item: DynamicTableItemProps<T>,\n    index: number,\n    items: Array<DynamicTableItemProps<T>>\n  ) => ReactNode;\n}\n\nexport const DynamicTable = <T extends object>({\n  cols,\n  items,\n  isExpandable = false,\n  onCollapse,\n  onExpand,\n  isExpanded,\n  renderExpandedContent,\n  testIdGenerator,\n\n  // render a cell BEFORE expand icon for header/ each row.\n  // currently use by RuleList to render guidelines\n  renderPrefixCell,\n  renderPrefixHeader,\n}: DynamicTableProps<T>) => {\n  if ((onCollapse || onExpand || isExpanded) && !(onCollapse && onExpand && isExpanded)) {\n    throw new Error('either all of onCollapse, onExpand, isExpanded must be provided, or none');\n  }\n  if ((isExpandable || renderExpandedContent) && !(isExpandable && renderExpandedContent)) {\n    throw new Error('either both isExpanded and renderExpandedContent must be provided, or neither');\n  }\n  const styles = useStyles2(getStyles(cols, isExpandable, !!renderPrefixHeader));\n\n  const [expandedIds, setExpandedIds] = useState<Array<DynamicTableItemProps['id']>>([]);\n\n  const toggleExpanded = (item: DynamicTableItemProps<T>) => {\n    if (isExpanded && onCollapse && onExpand) {\n      isExpanded(item) ? onCollapse(item) : onExpand(item);\n    } else {\n      setExpandedIds(\n        expandedIds.includes(item.id) ? expandedIds.filter((itemId) => itemId !== item.id) : [...expandedIds, item.id]\n      );\n    }\n  };\n  return (\n    <div className={styles.container} data-testid=\"dynamic-table\">\n      <div className={styles.row} data-testid=\"header\">\n        {renderPrefixHeader && renderPrefixHeader()}\n        {isExpandable && <div className={styles.cell} />}\n        {cols.map((col) => (\n          <div className={styles.cell} key={col.id}>\n            {col.label}\n          </div>\n        ))}\n      </div>\n\n      {items.map((item, index) => {\n        const isItemExpanded = isExpanded ? isExpanded(item) : expandedIds.includes(item.id);\n        return (\n          <div className={styles.row} key={item.id} data-testid={testIdGenerator?.(item, index) ?? 'row'}>\n            {renderPrefixCell && renderPrefixCell(item, index, items)}\n            {isExpandable && (\n              <div className={cx(styles.cell, styles.expandCell)}>\n                <IconButton\n                  aria-label={`${isItemExpanded ? 'Collapse' : 'Expand'} row`}\n                  size=\"xl\"\n                  data-testid=\"collapse-toggle\"\n                  className={styles.expandButton}\n                  name={isItemExpanded ? 'angle-down' : 'angle-right'}\n                  onClick={() => toggleExpanded(item)}\n                  type=\"button\"\n                />\n              </div>\n            )}\n            {cols.map((col) => (\n              <div className={cx(styles.cell, styles.bodyCell)} data-column={col.label} key={`${item.id}-${col.id}`}>\n                {col.renderCell(item, index)}\n              </div>\n            ))}\n            {isItemExpanded && renderExpandedContent && (\n              <div className={styles.expandedContentRow} data-testid=\"expanded-content\">\n                {renderExpandedContent(item, index, items)}\n              </div>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nconst getStyles = <T extends unknown>(\n  cols: Array<DynamicTableColumnProps<T>>,\n  isExpandable: boolean,\n  hasPrefixCell: boolean\n) => {\n  const sizes = cols.map((col) => {\n    if (!col.size) {\n      return 'auto';\n    }\n\n    if (typeof col.size === 'number') {\n      return `${col.size}fr`;\n    }\n\n    return col.size;\n  });\n\n  if (isExpandable) {\n    sizes.unshift('calc(1em + 16px)');\n  }\n\n  if (hasPrefixCell) {\n    sizes.unshift('0');\n  }\n\n  return (theme: GrafanaTheme2) => ({\n    container: css`\n      border: 1px solid ${theme.colors.border.strong};\n      border-radius: 2px;\n      color: ${theme.colors.text.secondary};\n    `,\n    row: css`\n      display: grid;\n      grid-template-columns: ${sizes.join(' ')};\n      grid-template-rows: 1fr auto;\n\n      &:nth-child(2n + 1) {\n        background-color: ${theme.colors.background.secondary};\n      }\n\n      &:nth-child(2n) {\n        background-color: ${theme.colors.background.primary};\n      }\n\n      ${theme.breakpoints.down('sm')} {\n        grid-template-columns: auto 1fr;\n        grid-template-areas: 'left right';\n        padding: 0 ${theme.spacing(0.5)};\n\n        &:first-child {\n          display: none;\n        }\n\n        ${hasPrefixCell\n          ? `\n            & > *:first-child {\n              display: none;\n            }\n          `\n          : ''}\n      }\n    `,\n    cell: css`\n      align-items: center;\n      padding: ${theme.spacing(1)};\n\n      ${theme.breakpoints.down('sm')} {\n        padding: ${theme.spacing(1)} 0;\n        grid-template-columns: 1fr;\n      }\n    `,\n    bodyCell: css`\n      overflow: hidden;\n      word-break: break-all;\n      ${theme.breakpoints.down('sm')} {\n        grid-column-end: right;\n        grid-column-start: right;\n\n        &::before {\n          content: attr(data-column);\n          display: block;\n          color: ${theme.colors.text.primary};\n        }\n      }\n    `,\n    expandCell: css`\n      justify-content: center;\n\n      ${theme.breakpoints.down('sm')} {\n        align-items: start;\n        grid-area: left;\n      }\n    `,\n    expandedContentRow: css`\n      grid-column-end: ${sizes.length + 1};\n      grid-column-start: ${hasPrefixCell ? 3 : 2};\n      grid-row: 2;\n      padding: 0 ${theme.spacing(3)} 0 ${theme.spacing(1)};\n      position: relative;\n\n      ${theme.breakpoints.down('sm')} {\n        grid-column-start: 2;\n        border-top: 1px solid ${theme.colors.border.strong};\n        grid-row: auto;\n        padding: ${theme.spacing(1)} 0 0 0;\n      }\n    `,\n    expandButton: css`\n      margin-right: 0;\n      display: block;\n    `,\n  });\n};\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\nimport { DynamicTable, DynamicTableProps } from './DynamicTable';\n\nexport type DynamicTableWithGuidelinesProps<T> = Omit<DynamicTableProps<T>, 'renderPrefixHeader, renderPrefixCell'>;\n\n// DynamicTable, but renders visual guidelines on the left, for larger screen widths\nexport const DynamicTableWithGuidelines = <T extends object>({\n  renderExpandedContent,\n  ...props\n}: DynamicTableWithGuidelinesProps<T>) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <DynamicTable\n      renderExpandedContent={\n        renderExpandedContent\n          ? (item, index, items) => (\n              <>\n                {!(index === items.length - 1) && <div className={cx(styles.contentGuideline, styles.guideline)} />}\n                {renderExpandedContent(item, index, items)}\n              </>\n            )\n          : undefined\n      }\n      renderPrefixHeader={() => (\n        <div className={styles.relative}>\n          <div className={cx(styles.headerGuideline, styles.guideline)} />\n        </div>\n      )}\n      renderPrefixCell={(_, index, items) => (\n        <div className={styles.relative}>\n          <div className={cx(styles.topGuideline, styles.guideline)} />\n          {!(index === items.length - 1) && <div className={cx(styles.bottomGuideline, styles.guideline)} />}\n        </div>\n      )}\n      {...props}\n    />\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  relative: css`\n    position: relative;\n    height: 100%;\n  `,\n  guideline: css`\n    left: -19px;\n    border-left: 1px solid ${theme.colors.border.medium};\n    position: absolute;\n\n    ${theme.breakpoints.down('md')} {\n      display: none;\n    }\n  `,\n  topGuideline: css`\n    width: 18px;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n    top: 0;\n    bottom: 50%;\n  `,\n  bottomGuideline: css`\n    top: 50%;\n    bottom: 0;\n  `,\n  contentGuideline: css`\n    top: 0;\n    bottom: 0;\n    left: -49px !important;\n  `,\n  headerGuideline: css`\n    top: -25px;\n    bottom: 0;\n  `,\n});\n","import React, { FC } from 'react';\nimport { useStyles } from '@grafana/ui';\nimport { cx, css } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\n\ntype Props = React.HTMLAttributes<HTMLDivElement>;\n\nexport const Well: FC<Props> = ({ children, className }) => {\n  const styles = useStyles(getStyles);\n  return <div className={cx(styles.wrapper, className)}>{children}</div>;\n};\nexport const getStyles = (theme: GrafanaTheme) => ({\n  wrapper: css`\n    background-color: ${theme.colors.panelBg};\n    border: solid 1px ${theme.colors.formInputBorder};\n    border-radius: ${theme.border.radius.sm};\n    padding: ${theme.spacing.xs} ${theme.spacing.sm};\n    font-family: ${theme.typography.fontFamily.monospace};\n  `,\n});\n","import { AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC } from 'react';\nimport { State, StateTag } from '../StateTag';\n\nconst alertStateToState: Record<AlertState, State> = {\n  [AlertState.Active]: 'bad',\n  [AlertState.Unprocessed]: 'neutral',\n  [AlertState.Suppressed]: 'info',\n};\n\ninterface Props {\n  state: AlertState;\n}\n\nexport const AmAlertStateTag: FC<Props> = ({ state }) => <StateTag state={alertStateToState[state]}>{state}</StateTag>;\n","import { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\nimport { useCallback } from 'react';\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { getAlertManagerDataSources, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction isAlertManagerSource(alertManagerSourceName: string): boolean {\n  return (\n    alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME ||\n    !!getAlertManagerDataSources().find((ds) => ds.name === alertManagerSourceName)\n  );\n}\n\n/* this will return am name either from query params or from local storage or a default (grafana).\n *\n * fallbackUrl - if provided, will redirect to this url if alertmanager provided in query no longer\n */\nexport function useAlertManagerSourceName(): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerSource(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerSource(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerSource(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  return [GRAFANA_RULES_SOURCE_NAME, update];\n}\n"],"names":["useQueryParams","search","useLocation","useMemo","locationSearchToObject","useCallback","values","replace","setImmediate","locationService","AlertDetails","alert","alertManagerSourceName","styles","useStyles2","getStyles","className","actionsRow","status","state","AlertState","LinkButton","href","makeAMLink","silencedBy","join","button","icon","size","getMatcherQueryParams","labels","generatorURL","Object","entries","annotations","map","annotationKey","annotationValue","AnnotationDetailsField","value","receivers","name","filter","theme","css","spacing","colors","border","medium","AlertGroupAlertsTable","alerts","columns","id","label","renderCell","data","AmAlertStateTag","duration","intervalToAbbreviatedDurationString","start","Date","startsAt","end","endsAt","AlertLabels","items","fingerprint","tableWrapper","DynamicTableWithGuidelines","cols","isExpandable","renderExpandedContent","breakpoints","up","typography","bodySmall","fontSize","AlertGroup","group","isCollapsed","setIsCollapsed","useState","wrapper","header","CollapseToggle","onToggle","keys","length","headerLabels","AlertGroupHeader","background","secondary","summary","spanElement","error","main","primary","MatcherFilter","onFilterChange","queryString","Label","Tooltip","content","Icon","Input","placeholder","defaultValue","onChange","e","target","AlertStateFilter","onStateFilterChange","stateFilter","alertStateOptions","sort","labelA","labelB","RadioButtonGroup","options","GroupBy","groups","groupBy","onGroupingChange","labelKeyOptions","uniq","flatMap","startsWith","endsWith","key","MultiSelect","prefix","AlertGroupFilter","filterKey","setFilterKey","Math","floor","random","queryParams","setQueryParams","alertState","getFiltersFromUrlParams","matcherFilterKey","setAlertManagerSourceName","useAlertManagerSourceName","showClearButton","AlertManagerPicker","current","filterSection","filterInput","Button","clearButton","variant","onClick","setTimeout","groupingBanner","dispatch","useDispatch","alertGroups","useUnifiedAlertingSelector","amAlertGroups","loading","result","results","initialAsyncRequestState","groupedAlerts","reduce","groupings","every","groupByLabel","includes","existingGrouping","find","groupKey","push","acc","receiver","noGroupingGroup","useGroupedAlerts","filteredAlertGroups","filters","matchers","parseMatchers","filteredGroup","labelsMatch","labelsMatchMatchers","filtersMatch","unshift","useFilteredAmGroups","useEffect","fetchNotifications","fetchAlertGroupsAction","interval","setInterval","NOTIFICATIONS_POLL_INTERVAL_MS","clearInterval","AlertingPageWrapper","pageId","LoadingPlaceholder","text","Alert","title","severity","message","index","JSON","stringify","children","isLoading","navModel","getNavModel","useSelector","navIndex","wellableAnnotationKeys","annotationLabels","placement","horizontal","AnnotationValue","useStyles","link","well","textBlue","DetailsField","cx","field","fieldHorizontal","fieldVertical","down","sm","fontWeightBold","DynamicTable","onCollapse","onExpand","isExpanded","testIdGenerator","renderPrefixCell","renderPrefixHeader","Error","expandedIds","setExpandedIds","container","row","cell","col","item","isItemExpanded","expandCell","IconButton","expandButton","itemId","toggleExpanded","type","bodyCell","expandedContentRow","hasPrefixCell","sizes","strong","props","contentGuideline","guideline","undefined","relative","headerGuideline","_","topGuideline","bottomGuideline","Well","panelBg","formInputBorder","radius","xs","fontFamily","monospace","alertStateToState","isAlertManagerSource","GRAFANA_RULES_SOURCE_NAME","getAlertManagerDataSources","ds","updateQueryParams","update","store","ALERTMANAGER_NAME_LOCAL_STORAGE_KEY","ALERTMANAGER_NAME_QUERY_KEY","querySource","storeSource"],"sourceRoot":""}