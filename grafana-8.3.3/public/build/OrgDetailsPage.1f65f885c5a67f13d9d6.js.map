{"version":3,"file":"OrgDetailsPage.1f65f885c5a67f13d9d6.js","mappings":"+4BAqCA,MAAMA,EAA4B,CAChC,CAAEC,MAAO,GAAIC,MAAO,WACpB,CAAED,MAAO,OAAQC,MAAO,QACxB,CAAED,MAAO,QAASC,MAAO,UAGpB,MAAMC,UAA0BC,EAAAA,cAGrCC,YAAYC,GACVC,MAAMD,GADkB,gDAiDXE,UACb,MAAM,gBAAEC,EAAF,MAAmBC,EAAnB,SAA0BC,EAA1B,UAAoCC,GAAcC,KAAKC,YACvDD,KAAKE,QAAQC,OAAO,CAAEP,gBAAAA,EAAiBC,MAAAA,EAAOC,SAAAA,EAAUC,UAAAA,IAC9DK,OAAOC,SAASC,YApDQ,yBAuDRlB,IAChBY,KAAKO,SAAS,CAAEV,MAAOT,OAxDC,4BA2DLU,IACdA,GAGLE,KAAKO,SAAS,CAAET,SAAUA,OA/DF,6BAkEJC,IACpBC,KAAKO,SAAS,CAAER,UAAWA,OAnEH,iCAsEAS,IACxBR,KAAKO,SAAS,CAAEX,gBAAiBY,OAvET,0BA0EPC,QACoB,IAA1BA,EAAUC,aAAyD,KAA1BD,EAAUC,YACrDD,EAAUE,MAEZF,EAAUC,YAAc,MAAQD,EAAUE,QA3EjDX,KAAKE,QAAU,IAAIU,EAAAA,EAAmBnB,EAAMoB,aAC5Cb,KAAKC,MAAQ,CACXL,gBAAiB,EACjBC,MAAO,GACPC,SAAU,GACVC,UAAW,GACXe,WAAY,IAIO,0BACrB,MAAMC,QAAcf,KAAKE,QAAQc,OAC3BF,QAAmBG,EAAAA,GAAAA,OAAkB,CAAEC,SAAS,IAkBtD,GAAIH,EAAMnB,gBAAkB,IAAMkB,EAAWK,MAAMC,GAAMA,EAAEC,KAAON,EAAMnB,kBAAkB,CACxF,MAAM0B,QAAgBL,EAAAA,GAAAA,OAAkB,CAAEM,aAAc,CAACR,EAAMnB,mBAC3D0B,GAAWA,EAAQE,OAAS,GAC9BV,EAAWW,KAAKH,EAAQ,IAI5BtB,KAAKO,SAAS,CACZX,gBAAiBmB,EAAMnB,gBACvBC,MAAOkB,EAAMlB,MACbC,SAAUiB,EAAMjB,SAChBC,UAAWgB,EAAMhB,UACjBe,WAAY,CA7BkC,CAC9CO,GAAI,EACJV,MAAO,UACPe,KAAM,GACNC,KAAM,GACNC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,SAAU,EACVrB,YAAa,GACbsB,UAAW,GACXC,UAAW,GACXC,WAAW,EACXC,KAAM,GACNC,MAAO,OAe8BtB,KAoCzCuB,SACE,MAAM,MAAExC,EAAF,SAASC,EAAT,UAAmBC,EAAnB,gBAA8BH,EAA9B,WAA+CkB,GAAed,KAAKC,OACnE,SAAEqC,GAAatC,KAAKP,MACpB8C,EAASC,IAEf,OACE,SAAC,EAAAC,KAAD,CAAMC,SAAU1C,KAAK2C,aAArB,SACG,KAAM,MACL,OACE,UAAC,EAAAC,SAAD,CAAUvD,MAAM,cAAciD,SAAUA,EAAxC,WACE,SAAC,EAAAO,MAAD,CAAOxD,MAAM,WAAb,UACE,SAAC,EAAAyD,iBAAD,CACEC,QAAS5D,EACTC,MAAK,UAAED,EAAOgC,MAAM6B,GAASA,EAAK5D,QAAUS,WAAvC,aAAE,EAA6CT,MACpD6D,SAAUjD,KAAKkD,oBAInB,SAAC,EAAAL,MAAD,CACExD,OACE,UAAC,EAAA8D,MAAD,CAAOC,QAAQ,wBAAf,WACE,iBAAMC,UAAWd,EAAOe,UAAxB,4BADF,OAEE,SAAC,EAAAC,QAAD,CAASC,QAAQ,+FAAjB,UACE,SAAC,EAAAC,KAAD,CAAMC,KAAK,sBAIjB,cAAY,4CATd,UAWE,SAAC,EAAAC,OAAD,CACEC,kBAAgB,EAChBxE,MAAO0B,EAAWK,MAAMV,GAAcA,EAAUY,KAAOzB,IACvDiE,eAAiBC,GAAMA,EAAEzC,GACzB0C,eAAgB/D,KAAKgE,gBACrBf,SAAWxC,GACTT,KAAKiE,uBAAuBxD,EAAUY,IAExC0B,QAASjC,EACToD,YAAY,2BACZC,QAAQ,6BAIZ,SAAC,EAAAtB,MAAD,CAAOxD,MAAM,WAAW,cAAa+E,EAAAA,GAAAA,WAAAA,eAAAA,YAArC,UACE,SAAC,EAAAC,eAAD,CACEC,iBAAiB,EACjBlF,MAAOU,EACPmD,SAAUjD,KAAKuE,kBACfJ,QAAS,0CAIb,SAAC,EAAAtB,MAAD,CAAOxD,MAAM,aAAa,cAAa+E,EAAAA,GAAAA,WAAAA,gBAAAA,YAAvC,UACE,SAAC,EAAAI,gBAAD,CACEpF,MAAOW,EACPkD,SAAUjD,KAAKyE,mBACfN,QAAS,2CA/Cf,OAkDE,gBAAKd,UAAU,qBAAf,UACE,SAAC,EAAAqB,OAAD,CAAQC,QAAQ,UAAU,aAAW,+BAArC,4BAYhB,UAEMnC,GAAYoC,EAAAA,EAAAA,gBAAc,KACvB,CACLtB,UAAWuB,EAAAA,GAAI;;wpBC7LnB,MAkBA,EAlB8B,EAAGnC,SAAAA,EAAUoC,QAAAA,MACzC,MAAMC,EAAcC,EAAAA,GAAAA,cAAyBC,EAAAA,GAAAA,WAE7C,OACE,SAAC,EAAAxC,KAAD,CAAMyC,cAAe,CAAEJ,QAAAA,GAAWpC,SAAU,EAAGoC,QAAAA,KAAuBpC,EAASoC,GAA/E,SACG,EAAGK,SAAAA,MACF,UAAC,EAAAvC,SAAD,CAAUvD,MAAM,uBAAuBiD,UAAWyC,EAAlD,WACE,SAAC,EAAAlC,MAAD,CAAOxD,MAAM,oBAAb,UACE,SAAC,EAAA+F,MAAD,eAAO/D,GAAG,iBAAiBM,KAAK,QAAWwD,EAAS,UAAW,CAAEE,UAAU,QAF/E,OAKE,SAAC,EAAAX,OAAD,CAAQ/C,KAAK,SAAb,6C,4NClBH,SAAS2D,EACdC,EAAyC,CAAEC,cAAeA,EAAAA,gBAE1D,OAAO7F,MAAAA,IACL,MAAM8F,QAA6BF,EAAaC,gBAAgBE,IAAI,YAGpE,OAFAC,GAASC,EAAAA,EAAAA,IAAmBH,IAErBA,G,mDCQJ,MAAMI,UAAuBtG,EAAAA,cAAqB,kB,UAAA,Y,EAK/BuF,IACtB9E,KAAKP,MAAMqG,oBAAoBhB,GAC/B9E,KAAKP,MAAMsG,uB,EAP0C,0B,EAAA,M,sFAChC,gCACf/F,KAAKP,MAAM6F,mBAQnBjD,SACE,MAAM,SAAE2D,EAAF,aAAYC,GAAiBjG,KAAKP,MAClCyG,EAAiD,IAArCC,OAAOC,KAAKH,GAAczE,OACtC6E,EAAarB,EAAAA,GAAAA,cAAyBC,EAAAA,GAAAA,UACtCqB,EAAqBtB,EAAAA,GAAAA,cAAyBC,EAAAA,GAAAA,qBAC9CsB,EAAsBvB,EAAAA,GAAAA,cAAyBC,EAAAA,GAAAA,sBAErD,OACE,SAACuB,EAAA,EAAD,CAAMR,SAAUA,EAAhB,UACE,SAACQ,EAAA,WAAD,CAAeN,UAAWA,EAA1B,UACIA,IACA,UAAC,EAAAO,cAAD,CAAeC,QAAQ,KAAvB,UACGL,IAAc,SAAC,EAAD,CAAY3D,SAAU1C,KAAK2G,qBAAsB7B,QAASmB,EAAavC,OACrF4C,IAAsB,SAAChH,EAAA,EAAD,CAAmBuB,YAAY,MAAMyB,UAAWiE,YAgBrF,MAAMK,EAAqB,CACzBtB,iBADyB,EAEzBQ,oBAFyB,KAGzBC,mBD9CK,SACLR,EAAyC,CAAEC,cAAeA,EAAAA,gBAE1D,OAAO7F,MAAOgG,EAAUkB,KACtB,MAAMZ,EAAeY,IAAWZ,aAAaA,mBAEvCV,EAAaC,gBAAgBsB,IAAI,WAAY,CAAEpD,KAAMuC,EAAavC,OAExEiC,GAASoB,EAAAA,EAAAA,IAA4Bd,EAAavC,OAClDiC,EAASL,EAAiBC,OCwC9B,GAAeyB,EAAAA,EAAAA,UAbf,SAAyB/G,GACvB,MAAO,CACL+F,UAAUiB,EAAAA,EAAAA,GAAYhH,EAAMiH,SAAU,gBACtCjB,aAAchG,EAAMgG,aAAaA,gBAUGW,EAAxC,CAA4Df","sources":["webpack://grafana/./public/app/core/components/SharedPreferences/SharedPreferences.tsx","webpack://grafana/./public/app/features/org/OrgProfile.tsx","webpack://grafana/./public/app/features/org/state/actions.ts","webpack://grafana/./public/app/features/org/OrgDetailsPage.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { css } from '@emotion/css';\n\nimport {\n  Button,\n  Field,\n  FieldSet,\n  Form,\n  Icon,\n  Label,\n  RadioButtonGroup,\n  Select,\n  stylesFactory,\n  TimeZonePicker,\n  Tooltip,\n  WeekStartPicker,\n} from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { DashboardSearchHit, DashboardSearchItemType } from 'app/features/search/types';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { PreferencesService } from 'app/core/services/PreferencesService';\n\nexport interface Props {\n  resourceUri: string;\n  disabled?: boolean;\n}\n\nexport interface State {\n  homeDashboardId: number;\n  theme: string;\n  timezone: string;\n  weekStart: string;\n  dashboards: DashboardSearchHit[];\n}\n\nconst themes: SelectableValue[] = [\n  { value: '', label: 'Default' },\n  { value: 'dark', label: 'Dark' },\n  { value: 'light', label: 'Light' },\n];\n\nexport class SharedPreferences extends PureComponent<Props, State> {\n  service: PreferencesService;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.service = new PreferencesService(props.resourceUri);\n    this.state = {\n      homeDashboardId: 0,\n      theme: '',\n      timezone: '',\n      weekStart: '',\n      dashboards: [],\n    };\n  }\n\n  async componentDidMount() {\n    const prefs = await this.service.load();\n    const dashboards = await backendSrv.search({ starred: true });\n    const defaultDashboardHit: DashboardSearchHit = {\n      id: 0,\n      title: 'Default',\n      tags: [],\n      type: '' as DashboardSearchItemType,\n      uid: '',\n      uri: '',\n      url: '',\n      folderId: 0,\n      folderTitle: '',\n      folderUid: '',\n      folderUrl: '',\n      isStarred: false,\n      slug: '',\n      items: [],\n    };\n\n    if (prefs.homeDashboardId > 0 && !dashboards.find((d) => d.id === prefs.homeDashboardId)) {\n      const missing = await backendSrv.search({ dashboardIds: [prefs.homeDashboardId] });\n      if (missing && missing.length > 0) {\n        dashboards.push(missing[0]);\n      }\n    }\n\n    this.setState({\n      homeDashboardId: prefs.homeDashboardId,\n      theme: prefs.theme,\n      timezone: prefs.timezone,\n      weekStart: prefs.weekStart,\n      dashboards: [defaultDashboardHit, ...dashboards],\n    });\n  }\n\n  onSubmitForm = async () => {\n    const { homeDashboardId, theme, timezone, weekStart } = this.state;\n    await this.service.update({ homeDashboardId, theme, timezone, weekStart });\n    window.location.reload();\n  };\n\n  onThemeChanged = (value: string) => {\n    this.setState({ theme: value });\n  };\n\n  onTimeZoneChanged = (timezone?: string) => {\n    if (!timezone) {\n      return;\n    }\n    this.setState({ timezone: timezone });\n  };\n\n  onWeekStartChanged = (weekStart: string) => {\n    this.setState({ weekStart: weekStart });\n  };\n\n  onHomeDashboardChanged = (dashboardId: number) => {\n    this.setState({ homeDashboardId: dashboardId });\n  };\n\n  getFullDashName = (dashboard: SelectableValue<DashboardSearchHit>) => {\n    if (typeof dashboard.folderTitle === 'undefined' || dashboard.folderTitle === '') {\n      return dashboard.title;\n    }\n    return dashboard.folderTitle + ' / ' + dashboard.title;\n  };\n\n  render() {\n    const { theme, timezone, weekStart, homeDashboardId, dashboards } = this.state;\n    const { disabled } = this.props;\n    const styles = getStyles();\n\n    return (\n      <Form onSubmit={this.onSubmitForm}>\n        {() => {\n          return (\n            <FieldSet label=\"Preferences\" disabled={disabled}>\n              <Field label=\"UI Theme\">\n                <RadioButtonGroup\n                  options={themes}\n                  value={themes.find((item) => item.value === theme)?.value}\n                  onChange={this.onThemeChanged}\n                />\n              </Field>\n\n              <Field\n                label={\n                  <Label htmlFor=\"home-dashboard-select\">\n                    <span className={styles.labelText}>Home Dashboard</span>\n                    <Tooltip content=\"Not finding the dashboard you want? Star it first, then it should appear in this select box.\">\n                      <Icon name=\"info-circle\" />\n                    </Tooltip>\n                  </Label>\n                }\n                data-testid=\"User preferences home dashboard drop down\"\n              >\n                <Select\n                  menuShouldPortal\n                  value={dashboards.find((dashboard) => dashboard.id === homeDashboardId)}\n                  getOptionValue={(i) => i.id}\n                  getOptionLabel={this.getFullDashName}\n                  onChange={(dashboard: SelectableValue<DashboardSearchHit>) =>\n                    this.onHomeDashboardChanged(dashboard.id)\n                  }\n                  options={dashboards}\n                  placeholder=\"Choose default dashboard\"\n                  inputId=\"home-dashboard-select\"\n                />\n              </Field>\n\n              <Field label=\"Timezone\" data-testid={selectors.components.TimeZonePicker.containerV2}>\n                <TimeZonePicker\n                  includeInternal={true}\n                  value={timezone}\n                  onChange={this.onTimeZoneChanged}\n                  inputId={'shared-preferences-timezone-picker'}\n                />\n              </Field>\n\n              <Field label=\"Week start\" data-testid={selectors.components.WeekStartPicker.containerV2}>\n                <WeekStartPicker\n                  value={weekStart}\n                  onChange={this.onWeekStartChanged}\n                  inputId={'shared-preferences-week-start-picker'}\n                />\n              </Field>\n              <div className=\"gf-form-button-row\">\n                <Button variant=\"primary\" aria-label=\"User preferences save button\">\n                  Save\n                </Button>\n              </div>\n            </FieldSet>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport default SharedPreferences;\n\nconst getStyles = stylesFactory(() => {\n  return {\n    labelText: css`\n      margin-right: 6px;\n    `,\n  };\n});\n","import React, { FC } from 'react';\nimport { Input, Field, FieldSet, Button, Form } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nexport interface Props {\n  orgName: string;\n  onSubmit: (orgName: string) => void;\n}\n\ninterface FormDTO {\n  orgName: string;\n}\n\nconst OrgProfile: FC<Props> = ({ onSubmit, orgName }) => {\n  const canWriteOrg = contextSrv.hasPermission(AccessControlAction.OrgsWrite);\n\n  return (\n    <Form defaultValues={{ orgName }} onSubmit={({ orgName }: FormDTO) => onSubmit(orgName)}>\n      {({ register }) => (\n        <FieldSet label=\"Organization profile\" disabled={!canWriteOrg}>\n          <Field label=\"Organization name\">\n            <Input id=\"org-name-input\" type=\"text\" {...register('orgName', { required: true })} />\n          </Field>\n\n          <Button type=\"submit\">Update organization name</Button>\n        </FieldSet>\n      )}\n    </Form>\n  );\n};\n\nexport default OrgProfile;\n","import { ThunkResult } from 'app/types';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { organizationLoaded } from './reducers';\nimport { updateConfigurationSubtitle } from 'app/core/actions';\n\ntype OrganizationDependencies = { getBackendSrv: typeof getBackendSrv };\n\nexport function loadOrganization(\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch) => {\n    const organizationResponse = await dependencies.getBackendSrv().get('/api/org');\n    dispatch(organizationLoaded(organizationResponse));\n\n    return organizationResponse;\n  };\n}\n\nexport function updateOrganization(\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch, getStore) => {\n    const organization = getStore().organization.organization;\n\n    await dependencies.getBackendSrv().put('/api/org', { name: organization.name });\n\n    dispatch(updateConfigurationSubtitle(organization.name));\n    dispatch(loadOrganization(dependencies));\n  };\n}\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { NavModel } from '@grafana/data';\n\nimport Page from 'app/core/components/Page/Page';\nimport OrgProfile from './OrgProfile';\nimport SharedPreferences from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { loadOrganization, updateOrganization } from './state/actions';\nimport { AccessControlAction, Organization, StoreState } from 'app/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { setOrganizationName } from './state/reducers';\nimport { VerticalGroup } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\n\nexport interface Props {\n  navModel: NavModel;\n  organization: Organization;\n  loadOrganization: typeof loadOrganization;\n  setOrganizationName: typeof setOrganizationName;\n  updateOrganization: typeof updateOrganization;\n}\n\nexport class OrgDetailsPage extends PureComponent<Props> {\n  async componentDidMount() {\n    await this.props.loadOrganization();\n  }\n\n  onUpdateOrganization = (orgName: string) => {\n    this.props.setOrganizationName(orgName);\n    this.props.updateOrganization();\n  };\n\n  render() {\n    const { navModel, organization } = this.props;\n    const isLoading = Object.keys(organization).length === 0;\n    const canReadOrg = contextSrv.hasPermission(AccessControlAction.OrgsRead);\n    const canReadPreferences = contextSrv.hasPermission(AccessControlAction.OrgsPreferencesRead);\n    const canWritePreferences = contextSrv.hasPermission(AccessControlAction.OrgsPreferencesWrite);\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          {!isLoading && (\n            <VerticalGroup spacing=\"lg\">\n              {canReadOrg && <OrgProfile onSubmit={this.onUpdateOrganization} orgName={organization.name} />}\n              {canReadPreferences && <SharedPreferences resourceUri=\"org\" disabled={!canWritePreferences} />}\n            </VerticalGroup>\n          )}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'org-settings'),\n    organization: state.organization.organization,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadOrganization,\n  setOrganizationName,\n  updateOrganization,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrgDetailsPage);\n"],"names":["themes","value","label","SharedPreferences","PureComponent","constructor","props","super","async","homeDashboardId","theme","timezone","weekStart","this","state","service","update","window","location","reload","setState","dashboardId","dashboard","folderTitle","title","PreferencesService","resourceUri","dashboards","prefs","load","backendSrv","starred","find","d","id","missing","dashboardIds","length","push","tags","type","uid","uri","url","folderId","folderUid","folderUrl","isStarred","slug","items","render","disabled","styles","getStyles","Form","onSubmit","onSubmitForm","FieldSet","Field","RadioButtonGroup","options","item","onChange","onThemeChanged","Label","htmlFor","className","labelText","Tooltip","content","Icon","name","Select","menuShouldPortal","getOptionValue","i","getOptionLabel","getFullDashName","onHomeDashboardChanged","placeholder","inputId","selectors","TimeZonePicker","includeInternal","onTimeZoneChanged","WeekStartPicker","onWeekStartChanged","Button","variant","stylesFactory","css","orgName","canWriteOrg","contextSrv","AccessControlAction","defaultValues","register","Input","required","loadOrganization","dependencies","getBackendSrv","organizationResponse","get","dispatch","organizationLoaded","OrgDetailsPage","setOrganizationName","updateOrganization","navModel","organization","isLoading","Object","keys","canReadOrg","canReadPreferences","canWritePreferences","Page","VerticalGroup","spacing","onUpdateOrganization","mapDispatchToProps","getStore","put","updateConfigurationSubtitle","connect","getNavModel","navIndex"],"sourceRoot":""}