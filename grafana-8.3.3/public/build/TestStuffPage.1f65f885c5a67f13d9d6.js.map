{"version":3,"file":"TestStuffPage.1f65f885c5a67f13d9d6.js","mappings":"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","sources":["webpack://grafana/./public/app/features/query/components/QueryEditorRows.tsx","webpack://grafana/./public/app/features/sandbox/TestStuffPage.tsx","webpack://grafana/./.yarn/__virtual__/react-use-virtual-ca2705900f/3/opt/drone/yarncache/react-use-npm-17.2.4-c702db5427-3c885c3798.zip/node_modules/react-use/esm/useIsomorphicLayoutEffect.js","webpack://grafana/./.yarn/__virtual__/react-use-virtual-ca2705900f/3/opt/drone/yarncache/react-use-npm-17.2.4-c702db5427-3c885c3798.zip/node_modules/react-use/esm/useObservable.js"],"sourcesContent":["// Libraries\nimport React, { PureComponent } from 'react';\n\n// Types\nimport {\n  CoreApp,\n  DataQuery,\n  DataSourceInstanceSettings,\n  EventBusExtended,\n  HistoryItem,\n  PanelData,\n} from '@grafana/data';\nimport { QueryEditorRow } from './QueryEditorRow';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\ninterface Props {\n  // The query configuration\n  queries: DataQuery[];\n  dsSettings: DataSourceInstanceSettings;\n\n  // Query editing\n  onQueriesChange: (queries: DataQuery[]) => void;\n  onAddQuery: (query: DataQuery) => void;\n  onRunQueries: () => void;\n\n  // Query Response Data\n  data: PanelData;\n\n  // Misc\n  app?: CoreApp;\n  history?: Array<HistoryItem<DataQuery>>;\n  eventBus?: EventBusExtended;\n}\n\nexport class QueryEditorRows extends PureComponent<Props> {\n  onRemoveQuery = (query: DataQuery) => {\n    this.props.onQueriesChange(this.props.queries.filter((item) => item !== query));\n  };\n\n  onChangeQuery(query: DataQuery, index: number) {\n    const { queries, onQueriesChange } = this.props;\n\n    // update query in array\n    onQueriesChange(\n      queries.map((item, itemIndex) => {\n        if (itemIndex === index) {\n          return query;\n        }\n        return item;\n      })\n    );\n  }\n\n  onDataSourceChange(dataSource: DataSourceInstanceSettings, index: number) {\n    const { queries, onQueriesChange } = this.props;\n\n    onQueriesChange(\n      queries.map((item, itemIndex) => {\n        if (itemIndex !== index) {\n          return item;\n        }\n\n        if (item.datasource) {\n          const previous = getDataSourceSrv().getInstanceSettings(item.datasource);\n\n          if (previous?.type === dataSource.type) {\n            return {\n              ...item,\n              datasource: { uid: dataSource.uid },\n            };\n          }\n        }\n\n        return {\n          refId: item.refId,\n          hide: item.hide,\n          datasource: { uid: dataSource.uid },\n        };\n      })\n    );\n  }\n\n  onDragEnd = (result: DropResult) => {\n    const { queries, onQueriesChange } = this.props;\n\n    if (!result || !result.destination) {\n      return;\n    }\n\n    const startIndex = result.source.index;\n    const endIndex = result.destination.index;\n    if (startIndex === endIndex) {\n      return;\n    }\n\n    const update = Array.from(queries);\n    const [removed] = update.splice(startIndex, 1);\n    update.splice(endIndex, 0, removed);\n    onQueriesChange(update);\n  };\n\n  render() {\n    const { dsSettings, data, queries, app, history, eventBus } = this.props;\n\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"transformations-list\" direction=\"vertical\">\n          {(provided) => {\n            return (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                {queries.map((query, index) => {\n                  const dataSourceSettings = getDataSourceSettings(query, dsSettings);\n                  const onChangeDataSourceSettings = dsSettings.meta.mixed\n                    ? (settings: DataSourceInstanceSettings) => this.onDataSourceChange(settings, index)\n                    : undefined;\n\n                  return (\n                    <QueryEditorRow\n                      id={query.refId}\n                      index={index}\n                      key={query.refId}\n                      data={data}\n                      query={query}\n                      dataSource={dataSourceSettings}\n                      onChangeDataSource={onChangeDataSourceSettings}\n                      onChange={(query) => this.onChangeQuery(query, index)}\n                      onRemoveQuery={this.onRemoveQuery}\n                      onAddQuery={this.props.onAddQuery}\n                      onRunQuery={this.props.onRunQueries}\n                      queries={queries}\n                      app={app}\n                      history={history}\n                      eventBus={eventBus}\n                    />\n                  );\n                })}\n                {provided.placeholder}\n              </div>\n            );\n          }}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\nconst getDataSourceSettings = (\n  query: DataQuery,\n  groupSettings: DataSourceInstanceSettings\n): DataSourceInstanceSettings => {\n  if (!query.datasource) {\n    return groupSettings;\n  }\n  const querySettings = getDataSourceSrv().getInstanceSettings(query.datasource);\n  return querySettings || groupSettings;\n};\n","import {\n  ApplyFieldOverrideOptions,\n  DataTransformerConfig,\n  dateMath,\n  FieldColorModeId,\n  NavModelItem,\n  PanelData,\n} from '@grafana/data';\nimport { Table } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport React, { FC, useMemo, useState } from 'react';\nimport { useObservable } from 'react-use';\nimport { QueryGroup } from '../query/components/QueryGroup';\nimport { PanelQueryRunner } from '../query/state/PanelQueryRunner';\nimport { QueryGroupOptions } from 'app/types';\nimport Page from '../../core/components/Page/Page';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { PanelRenderer } from '../panel/components/PanelRenderer';\n\ninterface State {\n  queryRunner: PanelQueryRunner;\n  queryOptions: QueryGroupOptions;\n  data?: PanelData;\n}\n\nexport const TestStuffPage: FC = () => {\n  const [state, setState] = useState<State>(getDefaultState());\n  const { queryOptions, queryRunner } = state;\n\n  const onRunQueries = () => {\n    const timeRange = { from: 'now-1h', to: 'now' };\n\n    queryRunner.run({\n      queries: queryOptions.queries,\n      datasource: queryOptions.dataSource,\n      timezone: 'browser',\n      timeRange: { from: dateMath.parse(timeRange.from)!, to: dateMath.parse(timeRange.to)!, raw: timeRange },\n      maxDataPoints: queryOptions.maxDataPoints ?? 100,\n      minInterval: queryOptions.minInterval,\n    });\n  };\n\n  const onOptionsChange = (queryOptions: QueryGroupOptions) => {\n    setState({ ...state, queryOptions });\n  };\n\n  /**\n   * Subscribe to data\n   */\n  const observable = useMemo(() => queryRunner.getData({ withFieldConfig: true, withTransforms: true }), [queryRunner]);\n  const data = useObservable(observable);\n\n  const node: NavModelItem = {\n    id: 'test-page',\n    text: 'Test page',\n    icon: 'dashboard',\n    subTitle: 'FOR TESTING!',\n    url: 'sandbox/test',\n  };\n\n  return (\n    <Page navModel={{ node: node, main: node }}>\n      <Page.Contents>\n        {data && (\n          <AutoSizer style={{ width: '100%', height: '600px' }}>\n            {({ width }) => {\n              return (\n                <div>\n                  <PanelRenderer\n                    title=\"Hello\"\n                    pluginId=\"timeseries\"\n                    width={width}\n                    height={300}\n                    data={data}\n                    options={{}}\n                    fieldConfig={{ defaults: {}, overrides: [] }}\n                    timeZone=\"browser\"\n                  />\n                  <Table data={data.series[0]} width={width} height={300} />\n                </div>\n              );\n            }}\n          </AutoSizer>\n        )}\n        <div style={{ marginTop: '16px', height: '45%' }}>\n          <QueryGroup\n            options={queryOptions}\n            queryRunner={queryRunner}\n            onRunQueries={onRunQueries}\n            onOptionsChange={onOptionsChange}\n          />\n        </div>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport function getDefaultState(): State {\n  const options: ApplyFieldOverrideOptions = {\n    fieldConfig: {\n      defaults: {\n        color: {\n          mode: FieldColorModeId.PaletteClassic,\n        },\n      },\n      overrides: [],\n    },\n    replaceVariables: (v: string) => v,\n    theme: config.theme2,\n  };\n\n  const dataConfig = {\n    getTransformations: () => [] as DataTransformerConfig[],\n    getFieldOverrideOptions: () => options,\n    getDataSupport: () => ({ annotations: false, alertStates: false }),\n  };\n\n  return {\n    queryRunner: new PanelQueryRunner(dataConfig),\n    queryOptions: {\n      queries: [],\n      dataSource: {\n        name: 'gdev-testdata',\n      },\n      maxDataPoints: 100,\n    },\n  };\n}\n\nexport default TestStuffPage;\n","import { useEffect, useLayoutEffect } from 'react';\nimport { isBrowser } from './misc/util';\nvar useIsomorphicLayoutEffect = isBrowser ? useLayoutEffect : useEffect;\nexport default useIsomorphicLayoutEffect;\n","import { useState } from 'react';\nimport useIsomorphicLayoutEffect from './useIsomorphicLayoutEffect';\nfunction useObservable(observable$, initialValue) {\n    var _a = useState(initialValue), value = _a[0], update = _a[1];\n    useIsomorphicLayoutEffect(function () {\n        var s = observable$.subscribe(update);\n        return function () { return s.unsubscribe(); };\n    }, [observable$]);\n    return value;\n}\nexport default useObservable;\n"],"names":["QueryEditorRows","PureComponent","query","this","props","onQueriesChange","queries","filter","item","result","destination","startIndex","source","index","endIndex","update","Array","from","removed","splice","onChangeQuery","map","itemIndex","onDataSourceChange","dataSource","datasource","previous","getDataSourceSrv","getInstanceSettings","type","uid","refId","hide","render","dsSettings","data","app","history","eventBus","onDragEnd","droppableId","direction","provided","ref","innerRef","droppableProps","dataSourceSettings","getDataSourceSettings","onChangeDataSourceSettings","meta","mixed","settings","undefined","id","onChangeDataSource","onChange","onRemoveQuery","onAddQuery","onRunQuery","onRunQueries","placeholder","groupSettings","TestStuffPage","state","setState","useState","getDefaultState","queryOptions","queryRunner","observable","useMemo","getData","withFieldConfig","withTransforms","useObservable","node","text","icon","subTitle","url","navModel","main","style","width","height","title","pluginId","options","fieldConfig","defaults","overrides","timeZone","Table","series","marginTop","timeRange","to","run","timezone","dateMath","raw","maxDataPoints","minInterval","onOptionsChange","color","mode","FieldColorModeId","replaceVariables","v","theme","config","dataConfig","getTransformations","getFieldOverrideOptions","getDataSupport","annotations","alertStates","PanelQueryRunner","name","useLayoutEffect","useEffect","observable$","initialValue","_a","value","s","subscribe","unsubscribe"],"sourceRoot":""}