{"version":3,"file":"PlaylistPage.1f65f885c5a67f13d9d6.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/PageActionBar/PageActionBar.tsx","webpack://grafana/./public/app/features/playlist/StartModal.tsx","webpack://grafana/./public/app/features/playlist/PlaylistPageList.tsx","webpack://grafana/./public/app/features/playlist/EmptyQueryListBanner.tsx","webpack://grafana/./public/app/features/playlist/PlaylistPage.tsx","webpack://grafana/./public/app/features/playlist/api.ts"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { LinkButton, FilterInput } from '@grafana/ui';\n\nexport interface Props {\n  searchQuery: string;\n  setSearchQuery: (value: string) => void;\n  linkButton?: { href: string; title: string; disabled?: boolean };\n  target?: string;\n  placeholder?: string;\n}\n\nexport default class PageActionBar extends PureComponent<Props> {\n  render() {\n    const { searchQuery, linkButton, setSearchQuery, target, placeholder = 'Search by name or type' } = this.props;\n    const linkProps = { href: linkButton?.href, disabled: linkButton?.disabled };\n\n    if (target) {\n      (linkProps as any).target = target;\n    }\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput value={searchQuery} onChange={setSearchQuery} placeholder={placeholder} />\n        </div>\n        {linkButton && <LinkButton {...linkProps}>{linkButton.title}</LinkButton>}\n      </div>\n    );\n  }\n}\n","import React, { FC, useState } from 'react';\nimport { SelectableValue, urlUtil } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { PlaylistDTO } from './types';\nimport { Button, Checkbox, Field, Modal, RadioButtonGroup, VerticalGroup } from '@grafana/ui';\n\nexport interface StartModalProps {\n  playlist: PlaylistDTO;\n  onDismiss: () => void;\n}\n\nexport const StartModal: FC<StartModalProps> = ({ playlist, onDismiss }) => {\n  const [mode, setMode] = useState<any>(false);\n  const [autoFit, setAutofit] = useState(false);\n\n  const modes: Array<SelectableValue<any>> = [\n    { label: 'Normal', value: false },\n    { label: 'TV', value: 'tv' },\n    { label: 'Kiosk', value: true },\n  ];\n\n  const onStart = () => {\n    const params: any = {};\n    if (mode) {\n      params.kiosk = mode;\n    }\n    if (autoFit) {\n      params.autofitpanels = true;\n    }\n    locationService.push(urlUtil.renderUrl(`/playlists/play/${playlist.id}`, params));\n  };\n\n  return (\n    <Modal isOpen={true} icon=\"play\" title=\"Start playlist\" onDismiss={onDismiss}>\n      <VerticalGroup>\n        <Field label=\"Mode\">\n          <RadioButtonGroup value={mode} options={modes} onChange={setMode} />\n        </Field>\n        <Checkbox\n          label=\"Autofit\"\n          description=\"Panel heights will be adjusted to fit screen size\"\n          name=\"autofix\"\n          value={autoFit}\n          onChange={(e) => setAutofit(e.currentTarget.checked)}\n        />\n      </VerticalGroup>\n      <Modal.ButtonRow>\n        <Button variant=\"primary\" onClick={onStart}>\n          Start {playlist.name}\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n","import React from 'react';\nimport { PlaylistDTO } from './types';\nimport { Button, Card, LinkButton } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\n\ninterface Props {\n  setStartPlaylist: (playlistItem: PlaylistDTO) => void;\n  setPlaylistToDelete: (playlistItem: PlaylistDTO) => void;\n  playlists: PlaylistDTO[] | undefined;\n}\n\nexport const PlaylistPageList = ({ playlists, setStartPlaylist, setPlaylistToDelete }: Props) => {\n  return (\n    <>\n      {playlists!.map((playlist: PlaylistDTO) => (\n        <Card heading={playlist.name} key={playlist.id.toString()}>\n          <Card.Actions>\n            <Button variant=\"secondary\" icon=\"play\" onClick={() => setStartPlaylist(playlist)}>\n              Start playlist\n            </Button>\n            {contextSrv.isEditor && (\n              <>\n                <LinkButton key=\"edit\" variant=\"secondary\" href={`/playlists/edit/${playlist.id}`} icon=\"cog\">\n                  Edit playlist\n                </LinkButton>\n                <Button\n                  disabled={false}\n                  onClick={() => setPlaylistToDelete({ id: playlist.id, name: playlist.name })}\n                  icon=\"trash-alt\"\n                  variant=\"destructive\"\n                >\n                  Delete playlist\n                </Button>\n              </>\n            )}\n          </Card.Actions>\n        </Card>\n      ))}\n    </>\n  );\n};\n","import React from 'react';\nimport { useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\n\nexport const EmptyQueryListBanner = () => {\n  const styles = useStyles2(getStyles);\n  return <div className={styles.noResult}>No playlist found!</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    noResult: css`\n      padding: ${theme.spacing(2)};\n      background: ${theme.colors.secondary.main};\n      font-style: italic;\n      margin-top: ${theme.spacing(2)};\n    `,\n  };\n};\n","import React, { FC, useState } from 'react';\nimport { connect, MapStateToProps } from 'react-redux';\nimport { NavModel } from '@grafana/data';\nimport Page from 'app/core/components/Page/Page';\nimport { StoreState } from 'app/types';\nimport { GrafanaRouteComponentProps } from '../../core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useDebounce } from 'react-use';\nimport { PlaylistDTO } from './types';\nimport { ConfirmModal } from '@grafana/ui';\nimport PageActionBar from 'app/core/components/PageActionBar/PageActionBar';\nimport EmptyListCTA from '../../core/components/EmptyListCTA/EmptyListCTA';\nimport { deletePlaylist, getAllPlaylist } from './api';\nimport { StartModal } from './StartModal';\nimport { PlaylistPageList } from './PlaylistPageList';\nimport { EmptyQueryListBanner } from './EmptyQueryListBanner';\n\ninterface ConnectedProps {\n  navModel: NavModel;\n}\nexport interface PlaylistPageProps extends ConnectedProps, GrafanaRouteComponentProps {}\n\nexport const PlaylistPage: FC<PlaylistPageProps> = ({ navModel }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [debouncedSearchQuery, setDebouncedSearchQuery] = useState(searchQuery);\n  const [hasFetched, setHasFetched] = useState(false);\n  const [startPlaylist, setStartPlaylist] = useState<PlaylistDTO | undefined>();\n  const [playlistToDelete, setPlaylistToDelete] = useState<PlaylistDTO | undefined>();\n  const [forcePlaylistsFetch, setForcePlaylistsFetch] = useState(0);\n\n  const [playlists, setPlaylists] = useState<PlaylistDTO[]>([]);\n\n  useDebounce(\n    async () => {\n      const playlists = await getAllPlaylist(searchQuery);\n      if (!hasFetched) {\n        setHasFetched(true);\n      }\n      setPlaylists(playlists);\n      setDebouncedSearchQuery(searchQuery);\n    },\n    350,\n    [forcePlaylistsFetch, searchQuery]\n  );\n\n  const hasPlaylists = playlists && playlists.length > 0;\n  const onDismissDelete = () => setPlaylistToDelete(undefined);\n  const onDeletePlaylist = () => {\n    if (!playlistToDelete) {\n      return;\n    }\n    deletePlaylist(playlistToDelete.id).finally(() => {\n      setForcePlaylistsFetch(forcePlaylistsFetch + 1);\n      setPlaylistToDelete(undefined);\n    });\n  };\n\n  const emptyListBanner = (\n    <EmptyListCTA\n      title=\"There are no playlists created yet\"\n      buttonIcon=\"plus\"\n      buttonLink=\"playlists/new\"\n      buttonTitle=\"Create Playlist\"\n      proTip=\"You can use playlists to cycle dashboards on TVs without user control\"\n      proTipLink=\"http://docs.grafana.org/reference/playlist/\"\n      proTipLinkTitle=\"Learn more\"\n      proTipTarget=\"_blank\"\n    />\n  );\n\n  const showSearch = playlists.length > 0 || searchQuery.length > 0 || debouncedSearchQuery.length > 0;\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={!hasFetched}>\n        {showSearch && (\n          <PageActionBar\n            searchQuery={searchQuery}\n            linkButton={{ title: 'New playlist', href: '/playlists/new' }}\n            setSearchQuery={setSearchQuery}\n          />\n        )}\n\n        {!hasPlaylists && searchQuery ? (\n          <EmptyQueryListBanner />\n        ) : (\n          <PlaylistPageList\n            playlists={playlists}\n            setStartPlaylist={setStartPlaylist}\n            setPlaylistToDelete={setPlaylistToDelete}\n          />\n        )}\n        {!showSearch && emptyListBanner}\n        {playlistToDelete && (\n          <ConfirmModal\n            title={playlistToDelete.name}\n            confirmText=\"Delete\"\n            body={`Are you sure you want to delete '${playlistToDelete.name}' playlist?`}\n            onConfirm={onDeletePlaylist}\n            isOpen={Boolean(playlistToDelete)}\n            onDismiss={onDismissDelete}\n          />\n        )}\n        {startPlaylist && <StartModal playlist={startPlaylist} onDismiss={() => setStartPlaylist(undefined)} />}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, {}, StoreState> = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'playlists'),\n});\n\nexport default connect(mapStateToProps)(PlaylistPage);\n","import { getBackendSrv } from '@grafana/runtime';\n\nimport { Playlist, PlaylistDTO } from './types';\nimport { dispatch } from '../../store/store';\nimport { notifyApp } from '../../core/actions';\nimport { createErrorNotification, createSuccessNotification } from '../../core/copy/appNotification';\n\nexport async function createPlaylist(playlist: Playlist) {\n  await withErrorHandling(() => getBackendSrv().post('/api/playlists', playlist));\n}\n\nexport async function updatePlaylist(id: number, playlist: Playlist) {\n  await withErrorHandling(() => getBackendSrv().put(`/api/playlists/${id}`, playlist));\n}\n\nexport async function deletePlaylist(id: number) {\n  await withErrorHandling(() => getBackendSrv().delete(`/api/playlists/${id}`), 'Playlist deleted');\n}\n\nexport async function getPlaylist(id: number): Promise<Playlist> {\n  const result: Playlist = await getBackendSrv().get(`/api/playlists/${id}`);\n  return result;\n}\n\nexport async function getAllPlaylist(query: string): Promise<PlaylistDTO[]> {\n  const result: PlaylistDTO[] = await getBackendSrv().get('/api/playlists/', { query });\n  return result;\n}\n\nasync function withErrorHandling(apiCall: () => Promise<void>, message = 'Playlist saved') {\n  try {\n    await apiCall();\n    dispatch(notifyApp(createSuccessNotification(message)));\n  } catch (e) {\n    dispatch(notifyApp(createErrorNotification('Unable to save playlist', e)));\n  }\n}\n"],"names":["PageActionBar","PureComponent","render","searchQuery","linkButton","setSearchQuery","target","placeholder","this","props","linkProps","href","disabled","className","FilterInput","value","onChange","LinkButton","title","StartModal","playlist","onDismiss","mode","setMode","useState","autoFit","setAutofit","Modal","isOpen","icon","VerticalGroup","Field","label","RadioButtonGroup","options","Checkbox","description","name","e","currentTarget","checked","Button","variant","onClick","params","kiosk","autofitpanels","locationService","urlUtil","id","PlaylistPageList","playlists","setStartPlaylist","setPlaylistToDelete","map","Card","heading","contextSrv","toString","EmptyQueryListBanner","styles","useStyles2","getStyles","noResult","theme","css","spacing","colors","secondary","main","PlaylistPage","navModel","debouncedSearchQuery","setDebouncedSearchQuery","hasFetched","setHasFetched","startPlaylist","playlistToDelete","forcePlaylistsFetch","setForcePlaylistsFetch","setPlaylists","useDebounce","async","getAllPlaylist","hasPlaylists","length","emptyListBanner","EmptyListCTA","buttonIcon","buttonLink","buttonTitle","proTip","proTipLink","proTipLinkTitle","proTipTarget","showSearch","Page","isLoading","ConfirmModal","confirmText","body","onConfirm","deletePlaylist","finally","undefined","Boolean","connect","state","getNavModel","navIndex","createPlaylist","withErrorHandling","getBackendSrv","post","updatePlaylist","put","delete","getPlaylist","get","query","apiCall","message","dispatch","notifyApp","createSuccessNotification","createErrorNotification"],"sourceRoot":""}