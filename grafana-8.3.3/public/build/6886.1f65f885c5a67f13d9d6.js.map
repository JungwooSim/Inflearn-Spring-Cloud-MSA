{"version":3,"file":"6886.1f65f885c5a67f13d9d6.js","mappings":"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","sources":["webpack://grafana/./public/app/core/utils/tracing.ts","webpack://grafana/./public/app/plugins/datasource/tempo/graphTransform.ts","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/baggage/utils.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/diag/types.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/context/context.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/trace/context-utils.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/trace/span_kind.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/trace/status.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/platform/browser/globalThis.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/version.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/internal/semver.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/internal/global-utils.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/api/diag.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/api/context.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/api/trace.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/api/propagation.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.0.2-6eb793a7a4-cb3ea3761a.zip/node_modules/@opentelemetry/api/build/esm/index.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-core-virtual-cb64694857/3/opt/drone/yarncache/@opentelemetry-core-npm-0.23.0-b819c94cad-5b17d5cf44.zip/node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-core-virtual-cb64694857/3/opt/drone/yarncache/@opentelemetry-core-npm-0.23.0-b819c94cad-5b17d5cf44.zip/node_modules/@opentelemetry/core/build/esm/baggage/constants.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-core-virtual-cb64694857/3/opt/drone/yarncache/@opentelemetry-core-npm-0.23.0-b819c94cad-5b17d5cf44.zip/node_modules/@opentelemetry/core/build/esm/baggage/utils.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-core-virtual-cb64694857/3/opt/drone/yarncache/@opentelemetry-core-npm-0.23.0-b819c94cad-5b17d5cf44.zip/node_modules/@opentelemetry/core/build/esm/baggage/propagation/HttpBaggagePropagator.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-core-virtual-cb64694857/3/opt/drone/yarncache/@opentelemetry-core-npm-0.23.0-b819c94cad-5b17d5cf44.zip/node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-core-virtual-cb64694857/3/opt/drone/yarncache/@opentelemetry-core-npm-0.23.0-b819c94cad-5b17d5cf44.zip/node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-core-virtual-cb64694857/3/opt/drone/yarncache/@opentelemetry-core-npm-0.23.0-b819c94cad-5b17d5cf44.zip/node_modules/@opentelemetry/core/build/esm/utils/sampling.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-core-virtual-cb64694857/3/opt/drone/yarncache/@opentelemetry-core-npm-0.23.0-b819c94cad-5b17d5cf44.zip/node_modules/@opentelemetry/core/build/esm/utils/environment.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-core-virtual-cb64694857/3/opt/drone/yarncache/@opentelemetry-core-npm-0.23.0-b819c94cad-5b17d5cf44.zip/node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-core-virtual-cb64694857/3/opt/drone/yarncache/@opentelemetry-core-npm-0.23.0-b819c94cad-5b17d5cf44.zip/node_modules/@opentelemetry/core/build/esm/platform/browser/hex-to-base64.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-core-virtual-cb64694857/3/opt/drone/yarncache/@opentelemetry-core-npm-0.23.0-b819c94cad-5b17d5cf44.zip/node_modules/@opentelemetry/core/build/esm/platform/browser/RandomIdGenerator.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-core-virtual-cb64694857/3/opt/drone/yarncache/@opentelemetry-core-npm-0.23.0-b819c94cad-5b17d5cf44.zip/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-semantic-conventions-npm-0.23.0-d4a1d3db94-829e5c39ee.zip/node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-semantic-conventions-npm-0.23.0-d4a1d3db94-829e5c39ee.zip/node_modules/@opentelemetry/semantic-conventions/build/esm/resource/ResourceAttributes.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-core-virtual-cb64694857/3/opt/drone/yarncache/@opentelemetry-core-npm-0.23.0-b819c94cad-5b17d5cf44.zip/node_modules/@opentelemetry/core/build/esm/platform/browser/sdk-info.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-core-virtual-cb64694857/3/opt/drone/yarncache/@opentelemetry-core-npm-0.23.0-b819c94cad-5b17d5cf44.zip/node_modules/@opentelemetry/core/build/esm/version.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-core-virtual-cb64694857/3/opt/drone/yarncache/@opentelemetry-core-npm-0.23.0-b819c94cad-5b17d5cf44.zip/node_modules/@opentelemetry/core/build/esm/common/time.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-core-virtual-cb64694857/3/opt/drone/yarncache/@opentelemetry-core-npm-0.23.0-b819c94cad-5b17d5cf44.zip/node_modules/@opentelemetry/core/build/esm/ExportResult.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-core-virtual-cb64694857/3/opt/drone/yarncache/@opentelemetry-core-npm-0.23.0-b819c94cad-5b17d5cf44.zip/node_modules/@opentelemetry/core/build/esm/propagation/composite.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-core-virtual-cb64694857/3/opt/drone/yarncache/@opentelemetry-core-npm-0.23.0-b819c94cad-5b17d5cf44.zip/node_modules/@opentelemetry/core/build/esm/internal/validators.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-core-virtual-cb64694857/3/opt/drone/yarncache/@opentelemetry-core-npm-0.23.0-b819c94cad-5b17d5cf44.zip/node_modules/@opentelemetry/core/build/esm/trace/TraceState.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-core-virtual-cb64694857/3/opt/drone/yarncache/@opentelemetry-core-npm-0.23.0-b819c94cad-5b17d5cf44.zip/node_modules/@opentelemetry/core/build/esm/trace/HttpTraceContextPropagator.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-core-virtual-cb64694857/3/opt/drone/yarncache/@opentelemetry-core-npm-0.23.0-b819c94cad-5b17d5cf44.zip/node_modules/@opentelemetry/core/build/esm/trace/rpc-metadata.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-core-virtual-cb64694857/3/opt/drone/yarncache/@opentelemetry-core-npm-0.23.0-b819c94cad-5b17d5cf44.zip/node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOffSampler.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-core-virtual-cb64694857/3/opt/drone/yarncache/@opentelemetry-core-npm-0.23.0-b819c94cad-5b17d5cf44.zip/node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOnSampler.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-exporter-collector-virtual-6f06d0be5c/3/opt/drone/yarncache/@opentelemetry-exporter-collector-npm-0.23.0-420114b239-b1392e6fad.zip/node_modules/@opentelemetry/exporter-collector/build/esm/CollectorExporterBase.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-core-virtual-cb64694857/3/opt/drone/yarncache/@opentelemetry-core-npm-0.23.0-b819c94cad-5b17d5cf44.zip/node_modules/@opentelemetry/core/build/esm/trace/sampler/ParentBasedSampler.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-core-virtual-cb64694857/3/opt/drone/yarncache/@opentelemetry-core-npm-0.23.0-b819c94cad-5b17d5cf44.zip/node_modules/@opentelemetry/core/build/esm/trace/sampler/TraceIdRatioBasedSampler.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-exporter-collector-virtual-6f06d0be5c/3/opt/drone/yarncache/@opentelemetry-exporter-collector-npm-0.23.0-420114b239-b1392e6fad.zip/node_modules/@opentelemetry/exporter-collector/build/esm/types.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-exporter-collector-virtual-6f06d0be5c/3/opt/drone/yarncache/@opentelemetry-exporter-collector-npm-0.23.0-420114b239-b1392e6fad.zip/node_modules/@opentelemetry/exporter-collector/build/esm/platform/browser/CollectorExporterBrowserBase.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-exporter-collector-virtual-6f06d0be5c/3/opt/drone/yarncache/@opentelemetry-exporter-collector-npm-0.23.0-420114b239-b1392e6fad.zip/node_modules/@opentelemetry/exporter-collector/build/esm/util.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-exporter-collector-virtual-6f06d0be5c/3/opt/drone/yarncache/@opentelemetry-exporter-collector-npm-0.23.0-420114b239-b1392e6fad.zip/node_modules/@opentelemetry/exporter-collector/build/esm/platform/browser/util.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-exporter-collector-virtual-6f06d0be5c/3/opt/drone/yarncache/@opentelemetry-exporter-collector-npm-0.23.0-420114b239-b1392e6fad.zip/node_modules/@opentelemetry/exporter-collector/build/esm/transform.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-exporter-collector-virtual-6f06d0be5c/3/opt/drone/yarncache/@opentelemetry-exporter-collector-npm-0.23.0-420114b239-b1392e6fad.zip/node_modules/@opentelemetry/exporter-collector/build/esm/platform/browser/CollectorTraceExporter.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-api-metrics-virtual-3660ebd357/3/opt/drone/yarncache/@opentelemetry-api-metrics-npm-0.23.0-2f276e4abf-f122871b88.zip/node_modules/@opentelemetry/api-metrics/build/esm/types/Metric.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-api-metrics-virtual-3660ebd357/3/opt/drone/yarncache/@opentelemetry-api-metrics-npm-0.23.0-2f276e4abf-f122871b88.zip/node_modules/@opentelemetry/api-metrics/build/esm/NoopMeter.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-api-metrics-virtual-3660ebd357/3/opt/drone/yarncache/@opentelemetry-api-metrics-npm-0.23.0-2f276e4abf-f122871b88.zip/node_modules/@opentelemetry/api-metrics/build/esm/NoopMeterProvider.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-api-metrics-virtual-3660ebd357/3/opt/drone/yarncache/@opentelemetry-api-metrics-npm-0.23.0-2f276e4abf-f122871b88.zip/node_modules/@opentelemetry/api-metrics/build/esm/platform/browser/globalThis.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-api-metrics-virtual-3660ebd357/3/opt/drone/yarncache/@opentelemetry-api-metrics-npm-0.23.0-2f276e4abf-f122871b88.zip/node_modules/@opentelemetry/api-metrics/build/esm/api/global-utils.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-metrics-virtual-5ae0344a0f/3/opt/drone/yarncache/@opentelemetry-metrics-npm-0.23.0-27d39a1d3b-1bd6ca99e2.zip/node_modules/@opentelemetry/metrics/build/esm/export/types.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-api-metrics-virtual-3660ebd357/3/opt/drone/yarncache/@opentelemetry-api-metrics-npm-0.23.0-2f276e4abf-f122871b88.zip/node_modules/@opentelemetry/api-metrics/build/esm/api/metrics.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-metrics-virtual-5ae0344a0f/3/opt/drone/yarncache/@opentelemetry-metrics-npm-0.23.0-27d39a1d3b-1bd6ca99e2.zip/node_modules/@opentelemetry/metrics/build/esm/BoundInstrument.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-api-metrics-virtual-3660ebd357/3/opt/drone/yarncache/@opentelemetry-api-metrics-npm-0.23.0-2f276e4abf-f122871b88.zip/node_modules/@opentelemetry/api-metrics/build/esm/index.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-metrics-virtual-5ae0344a0f/3/opt/drone/yarncache/@opentelemetry-metrics-npm-0.23.0-27d39a1d3b-1bd6ca99e2.zip/node_modules/@opentelemetry/metrics/build/esm/Utils.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-metrics-virtual-5ae0344a0f/3/opt/drone/yarncache/@opentelemetry-metrics-npm-0.23.0-27d39a1d3b-1bd6ca99e2.zip/node_modules/@opentelemetry/metrics/build/esm/Metric.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-metrics-virtual-5ae0344a0f/3/opt/drone/yarncache/@opentelemetry-metrics-npm-0.23.0-27d39a1d3b-1bd6ca99e2.zip/node_modules/@opentelemetry/metrics/build/esm/CounterMetric.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-metrics-virtual-5ae0344a0f/3/opt/drone/yarncache/@opentelemetry-metrics-npm-0.23.0-27d39a1d3b-1bd6ca99e2.zip/node_modules/@opentelemetry/metrics/build/esm/ValueRecorderMetric.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-resources-virtual-29bb29969a/3/opt/drone/yarncache/@opentelemetry-resources-npm-0.23.0-516f591665-9c0c0e2ae0.zip/node_modules/@opentelemetry/resources/build/esm/platform/browser/detect-resources.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-resources-virtual-29bb29969a/3/opt/drone/yarncache/@opentelemetry-resources-npm-0.23.0-516f591665-9c0c0e2ae0.zip/node_modules/@opentelemetry/resources/build/esm/Resource.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-resources-virtual-29bb29969a/3/opt/drone/yarncache/@opentelemetry-resources-npm-0.23.0-516f591665-9c0c0e2ae0.zip/node_modules/@opentelemetry/resources/build/esm/platform/browser/default-service-name.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-metrics-virtual-5ae0344a0f/3/opt/drone/yarncache/@opentelemetry-metrics-npm-0.23.0-27d39a1d3b-1bd6ca99e2.zip/node_modules/@opentelemetry/metrics/build/esm/BatchObserverResult.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-metrics-virtual-5ae0344a0f/3/opt/drone/yarncache/@opentelemetry-metrics-npm-0.23.0-27d39a1d3b-1bd6ca99e2.zip/node_modules/@opentelemetry/metrics/build/esm/BatchObserver.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-metrics-virtual-5ae0344a0f/3/opt/drone/yarncache/@opentelemetry-metrics-npm-0.23.0-27d39a1d3b-1bd6ca99e2.zip/node_modules/@opentelemetry/metrics/build/esm/export/Controller.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-metrics-virtual-5ae0344a0f/3/opt/drone/yarncache/@opentelemetry-metrics-npm-0.23.0-27d39a1d3b-1bd6ca99e2.zip/node_modules/@opentelemetry/metrics/build/esm/export/NoopExporter.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-metrics-virtual-5ae0344a0f/3/opt/drone/yarncache/@opentelemetry-metrics-npm-0.23.0-27d39a1d3b-1bd6ca99e2.zip/node_modules/@opentelemetry/metrics/build/esm/export/aggregators/Histogram.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-metrics-virtual-5ae0344a0f/3/opt/drone/yarncache/@opentelemetry-metrics-npm-0.23.0-27d39a1d3b-1bd6ca99e2.zip/node_modules/@opentelemetry/metrics/build/esm/export/aggregators/LastValue.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-metrics-virtual-5ae0344a0f/3/opt/drone/yarncache/@opentelemetry-metrics-npm-0.23.0-27d39a1d3b-1bd6ca99e2.zip/node_modules/@opentelemetry/metrics/build/esm/export/aggregators/Sum.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-metrics-virtual-5ae0344a0f/3/opt/drone/yarncache/@opentelemetry-metrics-npm-0.23.0-27d39a1d3b-1bd6ca99e2.zip/node_modules/@opentelemetry/metrics/build/esm/export/Processor.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-metrics-virtual-5ae0344a0f/3/opt/drone/yarncache/@opentelemetry-metrics-npm-0.23.0-27d39a1d3b-1bd6ca99e2.zip/node_modules/@opentelemetry/metrics/build/esm/ObserverResult.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-metrics-virtual-5ae0344a0f/3/opt/drone/yarncache/@opentelemetry-metrics-npm-0.23.0-27d39a1d3b-1bd6ca99e2.zip/node_modules/@opentelemetry/metrics/build/esm/BaseObserverMetric.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-metrics-virtual-5ae0344a0f/3/opt/drone/yarncache/@opentelemetry-metrics-npm-0.23.0-27d39a1d3b-1bd6ca99e2.zip/node_modules/@opentelemetry/metrics/build/esm/SumObserverMetric.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-metrics-virtual-5ae0344a0f/3/opt/drone/yarncache/@opentelemetry-metrics-npm-0.23.0-27d39a1d3b-1bd6ca99e2.zip/node_modules/@opentelemetry/metrics/build/esm/types.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-metrics-virtual-5ae0344a0f/3/opt/drone/yarncache/@opentelemetry-metrics-npm-0.23.0-27d39a1d3b-1bd6ca99e2.zip/node_modules/@opentelemetry/metrics/build/esm/UpDownCounterMetric.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-metrics-virtual-5ae0344a0f/3/opt/drone/yarncache/@opentelemetry-metrics-npm-0.23.0-27d39a1d3b-1bd6ca99e2.zip/node_modules/@opentelemetry/metrics/build/esm/UpDownSumObserverMetric.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-metrics-virtual-5ae0344a0f/3/opt/drone/yarncache/@opentelemetry-metrics-npm-0.23.0-27d39a1d3b-1bd6ca99e2.zip/node_modules/@opentelemetry/metrics/build/esm/ValueObserverMetric.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-metrics-virtual-5ae0344a0f/3/opt/drone/yarncache/@opentelemetry-metrics-npm-0.23.0-27d39a1d3b-1bd6ca99e2.zip/node_modules/@opentelemetry/metrics/build/esm/Meter.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-metrics-virtual-5ae0344a0f/3/opt/drone/yarncache/@opentelemetry-metrics-npm-0.23.0-27d39a1d3b-1bd6ca99e2.zip/node_modules/@opentelemetry/metrics/build/esm/MeterProvider.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-metrics-virtual-5ae0344a0f/3/opt/drone/yarncache/@opentelemetry-metrics-npm-0.23.0-27d39a1d3b-1bd6ca99e2.zip/node_modules/@opentelemetry/metrics/build/esm/export/ConsoleMetricExporter.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-exporter-collector-virtual-6f06d0be5c/3/opt/drone/yarncache/@opentelemetry-exporter-collector-npm-0.23.0-420114b239-b1392e6fad.zip/node_modules/@opentelemetry/exporter-collector/build/esm/transformMetrics.js","webpack://grafana/./.yarn/__virtual__/@opentelemetry-exporter-collector-virtual-6f06d0be5c/3/opt/drone/yarncache/@opentelemetry-exporter-collector-npm-0.23.0-420114b239-b1392e6fad.zip/node_modules/@opentelemetry/exporter-collector/build/esm/platform/browser/CollectorMetricExporter.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-semantic-conventions-npm-1.0.0-5eb4adf526-1fc7a5cbab.zip/node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-semantic-conventions-npm-1.0.0-5eb4adf526-1fc7a5cbab.zip/node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js","webpack://grafana/./public/app/plugins/datasource/tempo/resultTransformer.ts","webpack://grafana/../../opt/drone/yarncache/lodash.merge-npm-4.6.2-77cb4416bf-ad580b4bdb.zip/node_modules/lodash.merge/index.js"],"sourcesContent":["/**\n * Get non overlapping duration of the ranges as they can overlap or have gaps.\n */\nimport { FieldType, MutableDataFrame, NodeGraphDataFrameFieldNames as Fields } from '@grafana/data';\n\nexport function getNonOverlappingDuration(ranges: Array<[number, number]>): number {\n  ranges.sort((a, b) => a[0] - b[0]);\n  const mergedRanges = ranges.reduce((acc, range) => {\n    if (!acc.length) {\n      return [range];\n    }\n    const tail = acc.slice(-1)[0];\n    const [prevStart, prevEnd] = tail;\n    const [start, end] = range;\n    if (end < prevEnd) {\n      // In this case the range is completely inside the prev range so we can just ignore it.\n      return acc;\n    }\n\n    if (start > prevEnd) {\n      // There is no overlap so we can just add it to stack\n      return [...acc, range];\n    }\n\n    // We know there is overlap and current range ends later than previous so we can just extend the range\n    return [...acc.slice(0, -1), [prevStart, end]] as Array<[number, number]>;\n  }, [] as Array<[number, number]>);\n\n  return mergedRanges.reduce((acc, range) => {\n    return acc + (range[1] - range[0]);\n  }, 0);\n}\n\n/**\n * Returns a map of the spans with children array for easier processing. It will also contain empty spans in case\n * span is missing but other spans are it's children. This is more generic because it needs to allow iterating over\n * both arrays and dataframe views.\n */\nexport function makeSpanMap<T>(\n  getSpan: (index: number) => { span: T; id: string; parentIds: string[] } | undefined\n): { [id: string]: { span: T; children: string[] } } {\n  const spanMap: { [id: string]: { span?: T; children: string[] } } = {};\n\n  let span;\n  for (let index = 0; (span = getSpan(index)), !!span; index++) {\n    if (!spanMap[span.id]) {\n      spanMap[span.id] = {\n        span: span.span,\n        children: [],\n      };\n    } else {\n      spanMap[span.id].span = span.span;\n    }\n\n    for (const parentId of span.parentIds) {\n      if (parentId) {\n        if (!spanMap[parentId]) {\n          spanMap[parentId] = {\n            span: undefined,\n            children: [span.id],\n          };\n        } else {\n          spanMap[parentId].children.push(span.id);\n        }\n      }\n    }\n  }\n  return spanMap as { [id: string]: { span: T; children: string[] } };\n}\n\nexport function getStats(duration: number, traceDuration: number, selfDuration: number) {\n  return {\n    main: `${toFixedNoTrailingZeros(duration)}ms (${toFixedNoTrailingZeros((duration / traceDuration) * 100)}%)`,\n    secondary: `${toFixedNoTrailingZeros(selfDuration)}ms (${toFixedNoTrailingZeros(\n      (selfDuration / duration) * 100\n    )}%)`,\n  };\n}\n\nfunction toFixedNoTrailingZeros(n: number) {\n  return parseFloat(n.toFixed(2));\n}\n\n/**\n * Create default frames used when returning data for node graph.\n */\nexport function makeFrames() {\n  const nodesFrame = new MutableDataFrame({\n    fields: [\n      { name: Fields.id, type: FieldType.string },\n      { name: Fields.title, type: FieldType.string },\n      { name: Fields.subTitle, type: FieldType.string },\n      { name: Fields.mainStat, type: FieldType.string, config: { displayName: 'Total time (% of trace)' } },\n      { name: Fields.secondaryStat, type: FieldType.string, config: { displayName: 'Self time (% of total)' } },\n      {\n        name: Fields.color,\n        type: FieldType.number,\n        config: { color: { mode: 'continuous-GrYlRd' }, displayName: 'Self time / Trace duration' },\n      },\n    ],\n    meta: {\n      preferredVisualisationType: 'nodeGraph',\n    },\n  });\n\n  const edgesFrame = new MutableDataFrame({\n    fields: [\n      { name: Fields.id, type: FieldType.string },\n      { name: Fields.target, type: FieldType.string },\n      { name: Fields.source, type: FieldType.string },\n    ],\n    meta: {\n      preferredVisualisationType: 'nodeGraph',\n    },\n  });\n\n  return [nodesFrame, edgesFrame];\n}\n","import {\n  DataFrame,\n  DataFrameView,\n  DataQueryResponse,\n  FieldColorModeId,\n  FieldDTO,\n  MutableDataFrame,\n  NodeGraphDataFrameFieldNames as Fields,\n  TimeRange,\n} from '@grafana/data';\nimport { getNonOverlappingDuration, getStats, makeFrames, makeSpanMap } from '../../../core/utils/tracing';\n\n/**\n * Row in a trace dataFrame\n */\ninterface Row {\n  traceID: string;\n  spanID: string;\n  parentSpanID: string;\n  operationName: string;\n  serviceName: string;\n  serviceTags: string;\n  startTime: number;\n  duration: number;\n  logs: string;\n  tags: string;\n}\n\ninterface Node {\n  [Fields.id]: string;\n  [Fields.title]: string;\n  [Fields.subTitle]: string;\n  [Fields.mainStat]: string;\n  [Fields.secondaryStat]: string;\n  [Fields.color]: number;\n}\n\ninterface Edge {\n  [Fields.id]: string;\n  [Fields.target]: string;\n  [Fields.source]: string;\n}\n\nexport function createGraphFrames(data: DataFrame): DataFrame[] {\n  const { nodes, edges } = convertTraceToGraph(data);\n  const [nodesFrame, edgesFrame] = makeFrames();\n\n  for (const node of nodes) {\n    nodesFrame.add(node);\n  }\n  for (const edge of edges) {\n    edgesFrame.add(edge);\n  }\n\n  return [nodesFrame, edgesFrame];\n}\n\nfunction convertTraceToGraph(data: DataFrame): { nodes: Node[]; edges: Edge[] } {\n  const nodes: Node[] = [];\n  const edges: Edge[] = [];\n\n  const view = new DataFrameView<Row>(data);\n\n  const traceDuration = findTraceDuration(view);\n  const spanMap = makeSpanMap((index) => {\n    if (index >= data.length) {\n      return undefined;\n    }\n    const span = view.get(index);\n    return {\n      span: { ...span },\n      id: span.spanID,\n      parentIds: span.parentSpanID ? [span.parentSpanID] : [],\n    };\n  });\n\n  for (let i = 0; i < view.length; i++) {\n    const row = view.get(i);\n\n    const ranges: Array<[number, number]> = spanMap[row.spanID].children.map((c) => {\n      const span = spanMap[c].span;\n      return [span.startTime, span.startTime + span.duration];\n    });\n    const childrenDuration = getNonOverlappingDuration(ranges);\n    const selfDuration = row.duration - childrenDuration;\n    const stats = getStats(row.duration, traceDuration, selfDuration);\n\n    nodes.push({\n      [Fields.id]: row.spanID,\n      [Fields.title]: row.serviceName ?? '',\n      [Fields.subTitle]: row.operationName,\n      [Fields.mainStat]: stats.main,\n      [Fields.secondaryStat]: stats.secondary,\n      [Fields.color]: selfDuration / traceDuration,\n    });\n\n    // Sometimes some span can be missing. Don't add edges for those.\n    if (row.parentSpanID && spanMap[row.parentSpanID].span) {\n      edges.push({\n        [Fields.id]: row.parentSpanID + '--' + row.spanID,\n        [Fields.target]: row.spanID,\n        [Fields.source]: row.parentSpanID,\n      });\n    }\n  }\n\n  return { nodes, edges };\n}\n\n/**\n * Get the duration of the whole trace as it isn't a part of the response data.\n * Note: Seems like this should be the same as just longest span, but this is probably safer.\n */\nfunction findTraceDuration(view: DataFrameView<Row>): number {\n  let traceEndTime = 0;\n  let traceStartTime = Infinity;\n\n  for (let i = 0; i < view.length; i++) {\n    const row = view.get(i);\n\n    if (row.startTime < traceStartTime) {\n      traceStartTime = row.startTime;\n    }\n\n    if (row.startTime + row.duration > traceEndTime) {\n      traceEndTime = row.startTime + row.duration;\n    }\n  }\n\n  return traceEndTime - traceStartTime;\n}\n\nexport const secondsMetric = 'traces_service_graph_request_server_seconds_sum';\nexport const totalsMetric = 'traces_service_graph_request_total';\nexport const failedMetric = 'traces_service_graph_request_failed_total';\n\nexport const serviceMapMetrics = [\n  secondsMetric,\n  totalsMetric,\n  failedMetric,\n  // We don't show histogram in node graph at the moment but we could later add that into a node context menu.\n  // 'traces_service_graph_request_seconds_bucket',\n  // 'traces_service_graph_request_seconds_count',\n  // These are used for debugging the tempo collection so probably not useful for service map right now.\n  // 'traces_service_graph_unpaired_spans_total',\n  // 'traces_service_graph_untagged_spans_total',\n];\n\n/**\n * Map response from multiple prometheus metrics into a node graph data frames with nodes and edges.\n * @param responses\n * @param range\n */\nexport function mapPromMetricsToServiceMap(\n  responses: DataQueryResponse[],\n  range: TimeRange\n): { nodes: DataFrame; edges: DataFrame } {\n  const frames = getMetricFrames(responses);\n\n  // First just collect data from the metrics into a map with nodes and edges as keys\n  const nodesMap: Record<string, ServiceMapStatistics> = {};\n  const edgesMap: Record<string, EdgeObject> = {};\n  // At this moment we don't have any error/success or other counts so we just use these 2\n  collectMetricData(frames[totalsMetric], 'total', totalsMetric, nodesMap, edgesMap);\n  collectMetricData(frames[secondsMetric], 'seconds', secondsMetric, nodesMap, edgesMap);\n  collectMetricData(frames[failedMetric], 'failed', failedMetric, nodesMap, edgesMap);\n\n  return convertToDataFrames(nodesMap, edgesMap, range);\n}\n\nfunction createServiceMapDataFrames() {\n  function createDF(name: string, fields: FieldDTO[]) {\n    return new MutableDataFrame({ name, fields, meta: { preferredVisualisationType: 'nodeGraph' } });\n  }\n\n  const nodes = createDF('Nodes', [\n    { name: Fields.id },\n    { name: Fields.title, config: { displayName: 'Service name' } },\n    { name: Fields.mainStat, config: { unit: 'ms/r', displayName: 'Average response time' } },\n    {\n      name: Fields.secondaryStat,\n      config: { unit: 'r/sec', displayName: 'Requests per second' },\n    },\n    {\n      name: Fields.arc + 'success',\n      config: { displayName: 'Success', color: { fixedColor: 'green', mode: FieldColorModeId.Fixed } },\n    },\n    {\n      name: Fields.arc + 'failed',\n      config: { displayName: 'Failed', color: { fixedColor: 'red', mode: FieldColorModeId.Fixed } },\n    },\n  ]);\n  const edges = createDF('Edges', [\n    { name: Fields.id },\n    { name: Fields.source },\n    { name: Fields.target },\n    { name: Fields.mainStat, config: { unit: 'r', displayName: 'Requests' } },\n    { name: Fields.secondaryStat, config: { unit: 'ms/r', displayName: 'Average response time' } },\n  ]);\n\n  return [nodes, edges];\n}\n\n/**\n * Group frames from response based on ref id which is set the same as the metric name so we know which metric is where\n * and also put it into DataFrameView so it's easier to work with.\n * @param responses\n */\nfunction getMetricFrames(responses: DataQueryResponse[]): Record<string, DataFrameView> {\n  return responses[0].data.reduce<Record<string, DataFrameView>>((acc, frame) => {\n    acc[frame.refId] = new DataFrameView(frame);\n    return acc;\n  }, {});\n}\n\ntype ServiceMapStatistics = {\n  total?: number;\n  seconds?: number;\n  failed?: number;\n};\n\ntype EdgeObject = ServiceMapStatistics & {\n  source: string;\n  target: string;\n};\n\n/**\n * Collect data from a metric into a map of nodes and edges. The metric data is modeled as counts of metric per edge\n * which is a pair of client-server nodes. This means we convert each row of the metric 1-1 to edges and than we assign\n * the metric also to server. We count the stats for server only as we show requests/transactions that particular node\n * processed not those which it generated and other stats like average transaction time then stem from that.\n * @param frame\n * @param stat\n * @param metric\n * @param nodesMap\n * @param edgesMap\n */\nfunction collectMetricData(\n  frame: DataFrameView | undefined,\n  stat: keyof ServiceMapStatistics,\n  metric: string,\n  nodesMap: Record<string, ServiceMapStatistics>,\n  edgesMap: Record<string, EdgeObject>\n) {\n  if (!frame) {\n    return;\n  }\n\n  // The name of the value column is in this format\n  // TODO figure out if it can be changed\n  const valueName = `Value #${metric}`;\n\n  for (let i = 0; i < frame.length; i++) {\n    const row = frame.get(i);\n    const edgeId = `${row.client}_${row.server}`;\n\n    if (!edgesMap[edgeId]) {\n      // Create edge as it does not exist yet\n      edgesMap[edgeId] = {\n        target: row.server,\n        source: row.client,\n        [stat]: row[valueName],\n      };\n    } else {\n      // Add stat to edge\n      // We are adding the values if exists but that should not happen in general as there should be single row for\n      // an edge.\n      edgesMap[edgeId][stat] = (edgesMap[edgeId][stat] || 0) + row[valueName];\n    }\n\n    if (!nodesMap[row.server]) {\n      // Create node for server\n      nodesMap[row.server] = {\n        [stat]: row[valueName],\n      };\n    } else {\n      // Add stat to server node. Sum up values if there are multiple edges targeting this server node.\n      nodesMap[row.server][stat] = (nodesMap[row.server][stat] || 0) + row[valueName];\n    }\n\n    if (!nodesMap[row.client]) {\n      // Create the client node but don't add the stat as edge stats are attributed to the server node. This means for\n      // example that the number of requests in a node show how many requests it handled not how many it generated.\n      nodesMap[row.client] = {\n        [stat]: 0,\n      };\n    }\n  }\n}\n\nfunction convertToDataFrames(\n  nodesMap: Record<string, ServiceMapStatistics>,\n  edgesMap: Record<string, EdgeObject>,\n  range: TimeRange\n): { nodes: DataFrame; edges: DataFrame } {\n  const rangeMs = range.to.valueOf() - range.from.valueOf();\n  const [nodes, edges] = createServiceMapDataFrames();\n  for (const nodeId of Object.keys(nodesMap)) {\n    const node = nodesMap[nodeId];\n    nodes.add({\n      [Fields.id]: nodeId,\n      [Fields.title]: nodeId,\n      // NaN will not be shown in the node graph. This happens for a root client node which did not process\n      // any requests itself.\n      [Fields.mainStat]: node.total ? (node.seconds! / node.total) * 1000 : Number.NaN, // Average response time\n      [Fields.secondaryStat]: node.total ? Math.round((node.total / (rangeMs / 1000)) * 100) / 100 : Number.NaN, // Request per second (to 2 decimals)\n      [Fields.arc + 'success']: node.total ? (node.total - (node.failed || 0)) / node.total : 1,\n      [Fields.arc + 'failed']: node.total ? (node.failed || 0) / node.total : 0,\n    });\n  }\n  for (const edgeId of Object.keys(edgesMap)) {\n    const edge = edgesMap[edgeId];\n    edges.add({\n      [Fields.id]: edgeId,\n      [Fields.source]: edge.source,\n      [Fields.target]: edge.target,\n      [Fields.mainStat]: edge.total, // Requests\n      [Fields.secondaryStat]: edge.total ? (edge.seconds! / edge.total) * 1000 : Number.NaN, // Average response time\n    });\n  }\n\n  return { nodes, edges };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar BaggageImpl = /** @class */ (function () {\n    function BaggageImpl(entries) {\n        this._entries = entries ? new Map(entries) : new Map();\n    }\n    BaggageImpl.prototype.getEntry = function (key) {\n        var entry = this._entries.get(key);\n        if (!entry) {\n            return undefined;\n        }\n        return Object.assign({}, entry);\n    };\n    BaggageImpl.prototype.getAllEntries = function () {\n        return Array.from(this._entries.entries()).map(function (_a) {\n            var k = _a[0], v = _a[1];\n            return [k, v];\n        });\n    };\n    BaggageImpl.prototype.setEntry = function (key, entry) {\n        var newBaggage = new BaggageImpl(this._entries);\n        newBaggage._entries.set(key, entry);\n        return newBaggage;\n    };\n    BaggageImpl.prototype.removeEntry = function (key) {\n        var newBaggage = new BaggageImpl(this._entries);\n        newBaggage._entries.delete(key);\n        return newBaggage;\n    };\n    BaggageImpl.prototype.removeEntries = function () {\n        var keys = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            keys[_i] = arguments[_i];\n        }\n        var newBaggage = new BaggageImpl(this._entries);\n        for (var _a = 0, keys_1 = keys; _a < keys_1.length; _a++) {\n            var key = keys_1[_a];\n            newBaggage._entries.delete(key);\n        }\n        return newBaggage;\n    };\n    BaggageImpl.prototype.clear = function () {\n        return new BaggageImpl();\n    };\n    return BaggageImpl;\n}());\nexport { BaggageImpl };\n//# sourceMappingURL=baggage-impl.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Symbol used to make BaggageEntryMetadata an opaque type\n */\nexport var baggageEntryMetadataSymbol = Symbol('BaggageEntryMetadata');\n//# sourceMappingURL=symbol.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '..';\nimport { BaggageImpl } from './internal/baggage-impl';\nimport { baggageEntryMetadataSymbol } from './internal/symbol';\n/**\n * Create a new Baggage with optional entries\n *\n * @param entries An array of baggage entries the new baggage should contain\n */\nexport function createBaggage(entries) {\n    if (entries === void 0) { entries = {}; }\n    return new BaggageImpl(new Map(Object.entries(entries)));\n}\n/**\n * Create a serializable BaggageEntryMetadata object from a string.\n *\n * @param str string metadata. Format is currently not defined by the spec and has no special meaning.\n *\n */\nexport function baggageEntryMetadataFromString(str) {\n    if (typeof str !== 'string') {\n        diag.error(\"Cannot create baggage metadata from unknown type: \" + typeof str);\n        str = '';\n    }\n    return {\n        __TYPE__: baggageEntryMetadataSymbol,\n        toString: function () {\n            return str;\n        },\n    };\n}\n//# sourceMappingURL=utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar consoleMap = [\n    { n: 'error', c: 'error' },\n    { n: 'warn', c: 'warn' },\n    { n: 'info', c: 'info' },\n    { n: 'debug', c: 'debug' },\n    { n: 'verbose', c: 'trace' },\n];\n/**\n * A simple Immutable Console based diagnostic logger which will output any messages to the Console.\n * If you want to limit the amount of logging to a specific level or lower use the\n * {@link createLogLevelDiagLogger}\n */\nvar DiagConsoleLogger = /** @class */ (function () {\n    function DiagConsoleLogger() {\n        function _consoleFunc(funcName) {\n            return function () {\n                var orgArguments = arguments;\n                if (console) {\n                    // Some environments only expose the console when the F12 developer console is open\n                    var theFunc = console[funcName];\n                    if (typeof theFunc !== 'function') {\n                        // Not all environments support all functions\n                        theFunc = console.log;\n                    }\n                    // One last final check\n                    if (typeof theFunc === 'function') {\n                        return theFunc.apply(console, orgArguments);\n                    }\n                }\n            };\n        }\n        for (var i = 0; i < consoleMap.length; i++) {\n            this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);\n        }\n    }\n    return DiagConsoleLogger;\n}());\nexport { DiagConsoleLogger };\n//# sourceMappingURL=consoleLogger.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Defines the available internal logging levels for the diagnostic logger, the numeric values\n * of the levels are defined to match the original values from the initial LogLevel to avoid\n * compatibility/migration issues for any implementation that assume the numeric ordering.\n */\nexport var DiagLogLevel;\n(function (DiagLogLevel) {\n    /** Diagnostic Logging level setting to disable all logging (except and forced logs) */\n    DiagLogLevel[DiagLogLevel[\"NONE\"] = 0] = \"NONE\";\n    /** Identifies an error scenario */\n    DiagLogLevel[DiagLogLevel[\"ERROR\"] = 30] = \"ERROR\";\n    /** Identifies a warning scenario */\n    DiagLogLevel[DiagLogLevel[\"WARN\"] = 50] = \"WARN\";\n    /** General informational log message */\n    DiagLogLevel[DiagLogLevel[\"INFO\"] = 60] = \"INFO\";\n    /** General debug log message */\n    DiagLogLevel[DiagLogLevel[\"DEBUG\"] = 70] = \"DEBUG\";\n    /**\n     * Detailed trace level logging should only be used for development, should only be set\n     * in a development environment.\n     */\n    DiagLogLevel[DiagLogLevel[\"VERBOSE\"] = 80] = \"VERBOSE\";\n    /** Used to set the logging level to include all logging */\n    DiagLogLevel[DiagLogLevel[\"ALL\"] = 9999] = \"ALL\";\n})(DiagLogLevel || (DiagLogLevel = {}));\n//# sourceMappingURL=types.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var defaultTextMapGetter = {\n    get: function (carrier, key) {\n        if (carrier == null) {\n            return undefined;\n        }\n        return carrier[key];\n    },\n    keys: function (carrier) {\n        if (carrier == null) {\n            return [];\n        }\n        return Object.keys(carrier);\n    },\n};\nexport var defaultTextMapSetter = {\n    set: function (carrier, key, value) {\n        if (carrier == null) {\n            return;\n        }\n        carrier[key] = value;\n    },\n};\n//# sourceMappingURL=TextMapPropagator.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Get a key to uniquely identify a context value */\nexport function createContextKey(description) {\n    // The specification states that for the same input, multiple calls should\n    // return different keys. Due to the nature of the JS dependency management\n    // system, this creates problems where multiple versions of some package\n    // could hold different keys for the same property.\n    //\n    // Therefore, we use Symbol.for which returns the same key for the same input.\n    return Symbol.for(description);\n}\nvar BaseContext = /** @class */ (function () {\n    /**\n     * Construct a new context which inherits values from an optional parent context.\n     *\n     * @param parentContext a context from which to inherit values\n     */\n    function BaseContext(parentContext) {\n        // for minification\n        var self = this;\n        self._currentContext = parentContext ? new Map(parentContext) : new Map();\n        self.getValue = function (key) { return self._currentContext.get(key); };\n        self.setValue = function (key, value) {\n            var context = new BaseContext(self._currentContext);\n            context._currentContext.set(key, value);\n            return context;\n        };\n        self.deleteValue = function (key) {\n            var context = new BaseContext(self._currentContext);\n            context._currentContext.delete(key);\n            return context;\n        };\n    }\n    return BaseContext;\n}());\n/** The root context is used as the default parent context when there is no active context */\nexport var ROOT_CONTEXT = new BaseContext();\n//# sourceMappingURL=context.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var TraceFlags;\n(function (TraceFlags) {\n    /** Represents no flag set. */\n    TraceFlags[TraceFlags[\"NONE\"] = 0] = \"NONE\";\n    /** Bit to represent whether trace is sampled in trace flags. */\n    TraceFlags[TraceFlags[\"SAMPLED\"] = 1] = \"SAMPLED\";\n})(TraceFlags || (TraceFlags = {}));\n//# sourceMappingURL=trace_flags.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { TraceFlags } from './trace_flags';\nvar VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;\nvar VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;\nexport var INVALID_SPANID = '0000000000000000';\nexport var INVALID_TRACEID = '00000000000000000000000000000000';\nexport var INVALID_SPAN_CONTEXT = {\n    traceId: INVALID_TRACEID,\n    spanId: INVALID_SPANID,\n    traceFlags: TraceFlags.NONE,\n};\nexport function isValidTraceId(traceId) {\n    return VALID_TRACEID_REGEX.test(traceId) && traceId !== INVALID_TRACEID;\n}\nexport function isValidSpanId(spanId) {\n    return VALID_SPANID_REGEX.test(spanId) && spanId !== INVALID_SPANID;\n}\n/**\n * Returns true if this {@link SpanContext} is valid.\n * @return true if this {@link SpanContext} is valid.\n */\nexport function isSpanContextValid(spanContext) {\n    return (isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId));\n}\n/**\n * Wrap the given {@link SpanContext} in a new non-recording {@link Span}\n *\n * @param spanContext span context to be wrapped\n * @returns a new non-recording {@link Span} with the provided context\n */\nexport function wrapSpanContext(spanContext) {\n    return new NonRecordingSpan(spanContext);\n}\n//# sourceMappingURL=spancontext-utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { INVALID_SPAN_CONTEXT } from './spancontext-utils';\n/**\n * The NonRecordingSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nvar NonRecordingSpan = /** @class */ (function () {\n    function NonRecordingSpan(_spanContext) {\n        if (_spanContext === void 0) { _spanContext = INVALID_SPAN_CONTEXT; }\n        this._spanContext = _spanContext;\n    }\n    // Returns a SpanContext.\n    NonRecordingSpan.prototype.spanContext = function () {\n        return this._spanContext;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setAttribute = function (_key, _value) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setAttributes = function (_attributes) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.addEvent = function (_name, _attributes) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setStatus = function (_status) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.updateName = function (_name) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.end = function (_endTime) { };\n    // isRecording always returns false for NonRecordingSpan.\n    NonRecordingSpan.prototype.isRecording = function () {\n        return false;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.recordException = function (_exception, _time) { };\n    return NonRecordingSpan;\n}());\nexport { NonRecordingSpan };\n//# sourceMappingURL=NonRecordingSpan.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createContextKey } from '../context/context';\nimport { NonRecordingSpan } from './NonRecordingSpan';\n/**\n * span key\n */\nvar SPAN_KEY = createContextKey('OpenTelemetry Context Key SPAN');\n/**\n * Return the span if one exists\n *\n * @param context context to get span from\n */\nexport function getSpan(context) {\n    return context.getValue(SPAN_KEY) || undefined;\n}\n/**\n * Set the span on a context\n *\n * @param context context to use as parent\n * @param span span to set active\n */\nexport function setSpan(context, span) {\n    return context.setValue(SPAN_KEY, span);\n}\n/**\n * Remove current span stored in the context\n *\n * @param context context to delete span from\n */\nexport function deleteSpan(context) {\n    return context.deleteValue(SPAN_KEY);\n}\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context context to set active span on\n * @param spanContext span context to be wrapped\n */\nexport function setSpanContext(context, spanContext) {\n    return setSpan(context, new NonRecordingSpan(spanContext));\n}\n/**\n * Get the span context of the span if it exists.\n *\n * @param context context to get values from\n */\nexport function getSpanContext(context) {\n    var _a;\n    return (_a = getSpan(context)) === null || _a === void 0 ? void 0 : _a.spanContext();\n}\n//# sourceMappingURL=context-utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { context } from '../';\nimport { getSpanContext, setSpan } from '../trace/context-utils';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { isSpanContextValid } from './spancontext-utils';\n/**\n * No-op implementations of {@link Tracer}.\n */\nvar NoopTracer = /** @class */ (function () {\n    function NoopTracer() {\n    }\n    // startSpan starts a noop span.\n    NoopTracer.prototype.startSpan = function (name, options, context) {\n        var root = Boolean(options === null || options === void 0 ? void 0 : options.root);\n        if (root) {\n            return new NonRecordingSpan();\n        }\n        var parentFromContext = context && getSpanContext(context);\n        if (isSpanContext(parentFromContext) &&\n            isSpanContextValid(parentFromContext)) {\n            return new NonRecordingSpan(parentFromContext);\n        }\n        else {\n            return new NonRecordingSpan();\n        }\n    };\n    NoopTracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {\n        var opts;\n        var ctx;\n        var fn;\n        if (arguments.length < 2) {\n            return;\n        }\n        else if (arguments.length === 2) {\n            fn = arg2;\n        }\n        else if (arguments.length === 3) {\n            opts = arg2;\n            fn = arg3;\n        }\n        else {\n            opts = arg2;\n            ctx = arg3;\n            fn = arg4;\n        }\n        var parentContext = ctx !== null && ctx !== void 0 ? ctx : context.active();\n        var span = this.startSpan(name, opts, parentContext);\n        var contextWithSpanSet = setSpan(parentContext, span);\n        return context.with(contextWithSpanSet, fn, undefined, span);\n    };\n    return NoopTracer;\n}());\nexport { NoopTracer };\nfunction isSpanContext(spanContext) {\n    return (typeof spanContext === 'object' &&\n        typeof spanContext['spanId'] === 'string' &&\n        typeof spanContext['traceId'] === 'string' &&\n        typeof spanContext['traceFlags'] === 'number');\n}\n//# sourceMappingURL=NoopTracer.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NoopTracer } from './NoopTracer';\nvar NOOP_TRACER = new NoopTracer();\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\nvar ProxyTracer = /** @class */ (function () {\n    function ProxyTracer(_provider, name, version) {\n        this._provider = _provider;\n        this.name = name;\n        this.version = version;\n    }\n    ProxyTracer.prototype.startSpan = function (name, options, context) {\n        return this._getTracer().startSpan(name, options, context);\n    };\n    ProxyTracer.prototype.startActiveSpan = function (_name, _options, _context, _fn) {\n        var tracer = this._getTracer();\n        return Reflect.apply(tracer.startActiveSpan, tracer, arguments);\n    };\n    /**\n     * Try to get a tracer from the proxy tracer provider.\n     * If the proxy tracer provider has no delegate, return a noop tracer.\n     */\n    ProxyTracer.prototype._getTracer = function () {\n        if (this._delegate) {\n            return this._delegate;\n        }\n        var tracer = this._provider.getDelegateTracer(this.name, this.version);\n        if (!tracer) {\n            return NOOP_TRACER;\n        }\n        this._delegate = tracer;\n        return this._delegate;\n    };\n    return ProxyTracer;\n}());\nexport { ProxyTracer };\n//# sourceMappingURL=ProxyTracer.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nexport var SamplingDecision;\n(function (SamplingDecision) {\n    /**\n     * `Span.isRecording() === false`, span will not be recorded and all events\n     * and attributes will be dropped.\n     */\n    SamplingDecision[SamplingDecision[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n    /**\n     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n     * MUST NOT be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD\"] = 1] = \"RECORD\";\n    /**\n     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n     * MUST be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n})(SamplingDecision || (SamplingDecision = {}));\n//# sourceMappingURL=SamplingResult.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var SpanKind;\n(function (SpanKind) {\n    /** Default value. Indicates that the span is used internally. */\n    SpanKind[SpanKind[\"INTERNAL\"] = 0] = \"INTERNAL\";\n    /**\n     * Indicates that the span covers server-side handling of an RPC or other\n     * remote request.\n     */\n    SpanKind[SpanKind[\"SERVER\"] = 1] = \"SERVER\";\n    /**\n     * Indicates that the span covers the client-side wrapper around an RPC or\n     * other remote request.\n     */\n    SpanKind[SpanKind[\"CLIENT\"] = 2] = \"CLIENT\";\n    /**\n     * Indicates that the span describes producer sending a message to a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"PRODUCER\"] = 3] = \"PRODUCER\";\n    /**\n     * Indicates that the span describes consumer receiving a message from a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"CONSUMER\"] = 4] = \"CONSUMER\";\n})(SpanKind || (SpanKind = {}));\n//# sourceMappingURL=span_kind.js.map","/**\n * An enumeration of status codes.\n */\nexport var SpanStatusCode;\n(function (SpanStatusCode) {\n    /**\n     * The default status.\n     */\n    SpanStatusCode[SpanStatusCode[\"UNSET\"] = 0] = \"UNSET\";\n    /**\n     * The operation has been validated by an Application developer or\n     * Operator to have completed successfully.\n     */\n    SpanStatusCode[SpanStatusCode[\"OK\"] = 1] = \"OK\";\n    /**\n     * The operation contains an error.\n     */\n    SpanStatusCode[SpanStatusCode[\"ERROR\"] = 2] = \"ERROR\";\n})(SpanStatusCode || (SpanStatusCode = {}));\n//# sourceMappingURL=status.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ProxyTracer } from './ProxyTracer';\nimport { NoopTracerProvider } from './NoopTracerProvider';\nvar NOOP_TRACER_PROVIDER = new NoopTracerProvider();\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\nvar ProxyTracerProvider = /** @class */ (function () {\n    function ProxyTracerProvider() {\n    }\n    /**\n     * Get a {@link ProxyTracer}\n     */\n    ProxyTracerProvider.prototype.getTracer = function (name, version) {\n        var _a;\n        return ((_a = this.getDelegateTracer(name, version)) !== null && _a !== void 0 ? _a : new ProxyTracer(this, name, version));\n    };\n    ProxyTracerProvider.prototype.getDelegate = function () {\n        var _a;\n        return (_a = this._delegate) !== null && _a !== void 0 ? _a : NOOP_TRACER_PROVIDER;\n    };\n    /**\n     * Set the delegate tracer provider\n     */\n    ProxyTracerProvider.prototype.setDelegate = function (delegate) {\n        this._delegate = delegate;\n    };\n    ProxyTracerProvider.prototype.getDelegateTracer = function (name, version) {\n        var _a;\n        return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version);\n    };\n    return ProxyTracerProvider;\n}());\nexport { ProxyTracerProvider };\n//# sourceMappingURL=ProxyTracerProvider.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NoopTracer } from './NoopTracer';\n/**\n * An implementation of the {@link TracerProvider} which returns an impotent\n * Tracer for all calls to `getTracer`.\n *\n * All operations are no-op.\n */\nvar NoopTracerProvider = /** @class */ (function () {\n    function NoopTracerProvider() {\n    }\n    NoopTracerProvider.prototype.getTracer = function (_name, _version) {\n        return new NoopTracer();\n    };\n    return NoopTracerProvider;\n}());\nexport { NoopTracerProvider };\n//# sourceMappingURL=NoopTracerProvider.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nimport { ROOT_CONTEXT } from './context';\nvar NoopContextManager = /** @class */ (function () {\n    function NoopContextManager() {\n    }\n    NoopContextManager.prototype.active = function () {\n        return ROOT_CONTEXT;\n    };\n    NoopContextManager.prototype.with = function (_context, fn, thisArg) {\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        return fn.call.apply(fn, __spreadArray([thisArg], args));\n    };\n    NoopContextManager.prototype.bind = function (_context, target) {\n        return target;\n    };\n    NoopContextManager.prototype.enable = function () {\n        return this;\n    };\n    NoopContextManager.prototype.disable = function () {\n        return this;\n    };\n    return NoopContextManager;\n}());\nexport { NoopContextManager };\n//# sourceMappingURL=NoopContextManager.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef\nexport var _globalThis = typeof globalThis === 'object' ? globalThis : window;\n//# sourceMappingURL=globalThis.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// this is autogenerated file, see scripts/version-update.js\nexport var VERSION = '1.0.2';\n//# sourceMappingURL=version.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { VERSION } from '../version';\nvar re = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\n/**\n * Create a function to test an API version to see if it is compatible with the provided ownVersion.\n *\n * The returned function has the following semantics:\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param ownVersion version which should be checked against\n */\nexport function _makeCompatibilityCheck(ownVersion) {\n    var acceptedVersions = new Set([ownVersion]);\n    var rejectedVersions = new Set();\n    var myVersionMatch = ownVersion.match(re);\n    if (!myVersionMatch) {\n        // we cannot guarantee compatibility so we always return noop\n        return function () { return false; };\n    }\n    var ownVersionParsed = {\n        major: +myVersionMatch[1],\n        minor: +myVersionMatch[2],\n        patch: +myVersionMatch[3],\n        prerelease: myVersionMatch[4],\n    };\n    // if ownVersion has a prerelease tag, versions must match exactly\n    if (ownVersionParsed.prerelease != null) {\n        return function isExactmatch(globalVersion) {\n            return globalVersion === ownVersion;\n        };\n    }\n    function _reject(v) {\n        rejectedVersions.add(v);\n        return false;\n    }\n    function _accept(v) {\n        acceptedVersions.add(v);\n        return true;\n    }\n    return function isCompatible(globalVersion) {\n        if (acceptedVersions.has(globalVersion)) {\n            return true;\n        }\n        if (rejectedVersions.has(globalVersion)) {\n            return false;\n        }\n        var globalVersionMatch = globalVersion.match(re);\n        if (!globalVersionMatch) {\n            // cannot parse other version\n            // we cannot guarantee compatibility so we always noop\n            return _reject(globalVersion);\n        }\n        var globalVersionParsed = {\n            major: +globalVersionMatch[1],\n            minor: +globalVersionMatch[2],\n            patch: +globalVersionMatch[3],\n            prerelease: globalVersionMatch[4],\n        };\n        // if globalVersion has a prerelease tag, versions must match exactly\n        if (globalVersionParsed.prerelease != null) {\n            return _reject(globalVersion);\n        }\n        // major versions must match\n        if (ownVersionParsed.major !== globalVersionParsed.major) {\n            return _reject(globalVersion);\n        }\n        if (ownVersionParsed.major === 0) {\n            if (ownVersionParsed.minor === globalVersionParsed.minor &&\n                ownVersionParsed.patch <= globalVersionParsed.patch) {\n                return _accept(globalVersion);\n            }\n            return _reject(globalVersion);\n        }\n        if (ownVersionParsed.minor <= globalVersionParsed.minor) {\n            return _accept(globalVersion);\n        }\n        return _reject(globalVersion);\n    };\n}\n/**\n * Test an API version to see if it is compatible with this API.\n *\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param version version of the API requesting an instance of the global API\n */\nexport var isCompatible = _makeCompatibilityCheck(VERSION);\n//# sourceMappingURL=semver.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _globalThis } from '../platform';\nimport { VERSION } from '../version';\nimport { isCompatible } from './semver';\nvar major = VERSION.split('.')[0];\nvar GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for(\"opentelemetry.js.api.\" + major);\nvar _global = _globalThis;\nexport function registerGlobal(type, instance, diag, allowOverride) {\n    var _a;\n    if (allowOverride === void 0) { allowOverride = false; }\n    var api = (_global[GLOBAL_OPENTELEMETRY_API_KEY] = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) !== null && _a !== void 0 ? _a : {\n        version: VERSION,\n    });\n    if (!allowOverride && api[type]) {\n        // already registered an API of this type\n        var err = new Error(\"@opentelemetry/api: Attempted duplicate registration of API: \" + type);\n        diag.error(err.stack || err.message);\n        return false;\n    }\n    if (api.version !== VERSION) {\n        // All registered APIs must be of the same version exactly\n        var err = new Error('@opentelemetry/api: All API registration versions must match');\n        diag.error(err.stack || err.message);\n        return false;\n    }\n    api[type] = instance;\n    diag.debug(\"@opentelemetry/api: Registered a global for \" + type + \" v\" + VERSION + \".\");\n    return true;\n}\nexport function getGlobal(type) {\n    var _a, _b;\n    var globalVersion = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _a === void 0 ? void 0 : _a.version;\n    if (!globalVersion || !isCompatible(globalVersion)) {\n        return;\n    }\n    return (_b = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _b === void 0 ? void 0 : _b[type];\n}\nexport function unregisterGlobal(type, diag) {\n    diag.debug(\"@opentelemetry/api: Unregistering a global for \" + type + \" v\" + VERSION + \".\");\n    var api = _global[GLOBAL_OPENTELEMETRY_API_KEY];\n    if (api) {\n        delete api[type];\n    }\n}\n//# sourceMappingURL=global-utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobal } from '../internal/global-utils';\n/**\n * Component Logger which is meant to be used as part of any component which\n * will add automatically additional namespace in front of the log message.\n * It will then forward all message to global diag logger\n * @example\n * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });\n * cLogger.debug('test');\n * // @opentelemetry/instrumentation-http test\n */\nvar DiagComponentLogger = /** @class */ (function () {\n    function DiagComponentLogger(props) {\n        this._namespace = props.namespace || 'DiagComponentLogger';\n    }\n    DiagComponentLogger.prototype.debug = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('debug', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.error = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('error', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.info = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('info', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.warn = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('warn', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.verbose = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('verbose', this._namespace, args);\n    };\n    return DiagComponentLogger;\n}());\nexport { DiagComponentLogger };\nfunction logProxy(funcName, namespace, args) {\n    var logger = getGlobal('diag');\n    // shortcut if logger not set\n    if (!logger) {\n        return;\n    }\n    args.unshift(namespace);\n    return logger[funcName].apply(logger, args);\n}\n//# sourceMappingURL=ComponentLogger.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DiagComponentLogger } from '../diag/ComponentLogger';\nimport { createLogLevelDiagLogger } from '../diag/internal/logLevelLogger';\nimport { DiagLogLevel, } from '../diag/types';\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nvar API_NAME = 'diag';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry internal\n * diagnostic API\n */\nvar DiagAPI = /** @class */ (function () {\n    /**\n     * Private internal constructor\n     * @private\n     */\n    function DiagAPI() {\n        function _logProxy(funcName) {\n            return function () {\n                var logger = getGlobal('diag');\n                // shortcut if logger not set\n                if (!logger)\n                    return;\n                return logger[funcName].apply(logger, \n                // work around Function.prototype.apply types\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                arguments);\n            };\n        }\n        // Using self local variable for minification purposes as 'this' cannot be minified\n        var self = this;\n        // DiagAPI specific functions\n        self.setLogger = function (logger, logLevel) {\n            var _a, _b;\n            if (logLevel === void 0) { logLevel = DiagLogLevel.INFO; }\n            if (logger === self) {\n                // There isn't much we can do here.\n                // Logging to the console might break the user application.\n                // Try to log to self. If a logger was previously registered it will receive the log.\n                var err = new Error('Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation');\n                self.error((_a = err.stack) !== null && _a !== void 0 ? _a : err.message);\n                return false;\n            }\n            var oldLogger = getGlobal('diag');\n            var newLogger = createLogLevelDiagLogger(logLevel, logger);\n            // There already is an logger registered. We'll let it know before overwriting it.\n            if (oldLogger) {\n                var stack = (_b = new Error().stack) !== null && _b !== void 0 ? _b : '<failed to generate stacktrace>';\n                oldLogger.warn(\"Current logger will be overwritten from \" + stack);\n                newLogger.warn(\"Current logger will overwrite one already registered from \" + stack);\n            }\n            return registerGlobal('diag', newLogger, self, true);\n        };\n        self.disable = function () {\n            unregisterGlobal(API_NAME, self);\n        };\n        self.createComponentLogger = function (options) {\n            return new DiagComponentLogger(options);\n        };\n        self.verbose = _logProxy('verbose');\n        self.debug = _logProxy('debug');\n        self.info = _logProxy('info');\n        self.warn = _logProxy('warn');\n        self.error = _logProxy('error');\n    }\n    /** Get the singleton instance of the DiagAPI API */\n    DiagAPI.instance = function () {\n        if (!this._instance) {\n            this._instance = new DiagAPI();\n        }\n        return this._instance;\n    };\n    return DiagAPI;\n}());\nexport { DiagAPI };\n//# sourceMappingURL=diag.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DiagLogLevel } from '../types';\nexport function createLogLevelDiagLogger(maxLevel, logger) {\n    if (maxLevel < DiagLogLevel.NONE) {\n        maxLevel = DiagLogLevel.NONE;\n    }\n    else if (maxLevel > DiagLogLevel.ALL) {\n        maxLevel = DiagLogLevel.ALL;\n    }\n    // In case the logger is null or undefined\n    logger = logger || {};\n    function _filterFunc(funcName, theLevel) {\n        var theFunc = logger[funcName];\n        if (typeof theFunc === 'function' && maxLevel >= theLevel) {\n            return theFunc.bind(logger);\n        }\n        return function () { };\n    }\n    return {\n        error: _filterFunc('error', DiagLogLevel.ERROR),\n        warn: _filterFunc('warn', DiagLogLevel.WARN),\n        info: _filterFunc('info', DiagLogLevel.INFO),\n        debug: _filterFunc('debug', DiagLogLevel.DEBUG),\n        verbose: _filterFunc('verbose', DiagLogLevel.VERBOSE),\n    };\n}\n//# sourceMappingURL=logLevelLogger.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nimport { NoopContextManager } from '../context/NoopContextManager';\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'context';\nvar NOOP_CONTEXT_MANAGER = new NoopContextManager();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nvar ContextAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function ContextAPI() {\n    }\n    /** Get the singleton instance of the Context API */\n    ContextAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new ContextAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current context manager.\n     *\n     * @returns true if the context manager was successfully registered, else false\n     */\n    ContextAPI.prototype.setGlobalContextManager = function (contextManager) {\n        return registerGlobal(API_NAME, contextManager, DiagAPI.instance());\n    };\n    /**\n     * Get the currently active context\n     */\n    ContextAPI.prototype.active = function () {\n        return this._getContextManager().active();\n    };\n    /**\n     * Execute a function with an active context\n     *\n     * @param context context to be active during function execution\n     * @param fn function to execute in a context\n     * @param thisArg optional receiver to be used for calling fn\n     * @param args optional arguments forwarded to fn\n     */\n    ContextAPI.prototype.with = function (context, fn, thisArg) {\n        var _a;\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        return (_a = this._getContextManager()).with.apply(_a, __spreadArray([context, fn, thisArg], args));\n    };\n    /**\n     * Bind a context to a target function or event emitter\n     *\n     * @param context context to bind to the event emitter or function. Defaults to the currently active context\n     * @param target function or event emitter to bind\n     */\n    ContextAPI.prototype.bind = function (context, target) {\n        return this._getContextManager().bind(context, target);\n    };\n    ContextAPI.prototype._getContextManager = function () {\n        return getGlobal(API_NAME) || NOOP_CONTEXT_MANAGER;\n    };\n    /** Disable and remove the global context manager */\n    ContextAPI.prototype.disable = function () {\n        this._getContextManager().disable();\n        unregisterGlobal(API_NAME, DiagAPI.instance());\n    };\n    return ContextAPI;\n}());\nexport { ContextAPI };\n//# sourceMappingURL=context.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nimport { ProxyTracerProvider } from '../trace/ProxyTracerProvider';\nimport { isSpanContextValid, wrapSpanContext, } from '../trace/spancontext-utils';\nimport { deleteSpan, getSpan, getSpanContext, setSpan, setSpanContext, } from '../trace/context-utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'trace';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nvar TraceAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function TraceAPI() {\n        this._proxyTracerProvider = new ProxyTracerProvider();\n        this.wrapSpanContext = wrapSpanContext;\n        this.isSpanContextValid = isSpanContextValid;\n        this.deleteSpan = deleteSpan;\n        this.getSpan = getSpan;\n        this.getSpanContext = getSpanContext;\n        this.setSpan = setSpan;\n        this.setSpanContext = setSpanContext;\n    }\n    /** Get the singleton instance of the Trace API */\n    TraceAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new TraceAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current global tracer.\n     *\n     * @returns true if the tracer provider was successfully registered, else false\n     */\n    TraceAPI.prototype.setGlobalTracerProvider = function (provider) {\n        var success = registerGlobal(API_NAME, this._proxyTracerProvider, DiagAPI.instance());\n        if (success) {\n            this._proxyTracerProvider.setDelegate(provider);\n        }\n        return success;\n    };\n    /**\n     * Returns the global tracer provider.\n     */\n    TraceAPI.prototype.getTracerProvider = function () {\n        return getGlobal(API_NAME) || this._proxyTracerProvider;\n    };\n    /**\n     * Returns a tracer from the global tracer provider.\n     */\n    TraceAPI.prototype.getTracer = function (name, version) {\n        return this.getTracerProvider().getTracer(name, version);\n    };\n    /** Remove the global tracer provider */\n    TraceAPI.prototype.disable = function () {\n        unregisterGlobal(API_NAME, DiagAPI.instance());\n        this._proxyTracerProvider = new ProxyTracerProvider();\n    };\n    return TraceAPI;\n}());\nexport { TraceAPI };\n//# sourceMappingURL=trace.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * No-op implementations of {@link TextMapPropagator}.\n */\nvar NoopTextMapPropagator = /** @class */ (function () {\n    function NoopTextMapPropagator() {\n    }\n    /** Noop inject function does nothing */\n    NoopTextMapPropagator.prototype.inject = function (_context, _carrier) { };\n    /** Noop extract function does nothing and returns the input context */\n    NoopTextMapPropagator.prototype.extract = function (context, _carrier) {\n        return context;\n    };\n    NoopTextMapPropagator.prototype.fields = function () {\n        return [];\n    };\n    return NoopTextMapPropagator;\n}());\nexport { NoopTextMapPropagator };\n//# sourceMappingURL=NoopTextMapPropagator.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createContextKey } from '../context/context';\n/**\n * Baggage key\n */\nvar BAGGAGE_KEY = createContextKey('OpenTelemetry Baggage Key');\n/**\n * Retrieve the current baggage from the given context\n *\n * @param {Context} Context that manage all context values\n * @returns {Baggage} Extracted baggage from the context\n */\nexport function getBaggage(context) {\n    return context.getValue(BAGGAGE_KEY) || undefined;\n}\n/**\n * Store a baggage in the given context\n *\n * @param {Context} Context that manage all context values\n * @param {Baggage} baggage that will be set in the actual context\n */\nexport function setBaggage(context, baggage) {\n    return context.setValue(BAGGAGE_KEY, baggage);\n}\n/**\n * Delete the baggage stored in the given context\n *\n * @param {Context} Context that manage all context values\n */\nexport function deleteBaggage(context) {\n    return context.deleteValue(BAGGAGE_KEY);\n}\n//# sourceMappingURL=context-helpers.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nimport { NoopTextMapPropagator } from '../propagation/NoopTextMapPropagator';\nimport { defaultTextMapGetter, defaultTextMapSetter, } from '../propagation/TextMapPropagator';\nimport { getBaggage, setBaggage, deleteBaggage, } from '../baggage/context-helpers';\nimport { createBaggage } from '../baggage/utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'propagation';\nvar NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nvar PropagationAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function PropagationAPI() {\n        this.createBaggage = createBaggage;\n        this.getBaggage = getBaggage;\n        this.setBaggage = setBaggage;\n        this.deleteBaggage = deleteBaggage;\n    }\n    /** Get the singleton instance of the Propagator API */\n    PropagationAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new PropagationAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current propagator.\n     *\n     * @returns true if the propagator was successfully registered, else false\n     */\n    PropagationAPI.prototype.setGlobalPropagator = function (propagator) {\n        return registerGlobal(API_NAME, propagator, DiagAPI.instance());\n    };\n    /**\n     * Inject context into a carrier to be propagated inter-process\n     *\n     * @param context Context carrying tracing data to inject\n     * @param carrier carrier to inject context into\n     * @param setter Function used to set values on the carrier\n     */\n    PropagationAPI.prototype.inject = function (context, carrier, setter) {\n        if (setter === void 0) { setter = defaultTextMapSetter; }\n        return this._getGlobalPropagator().inject(context, carrier, setter);\n    };\n    /**\n     * Extract context from a carrier\n     *\n     * @param context Context which the newly created context will inherit from\n     * @param carrier Carrier to extract context from\n     * @param getter Function used to extract keys from a carrier\n     */\n    PropagationAPI.prototype.extract = function (context, carrier, getter) {\n        if (getter === void 0) { getter = defaultTextMapGetter; }\n        return this._getGlobalPropagator().extract(context, carrier, getter);\n    };\n    /**\n     * Return a list of all fields which may be used by the propagator.\n     */\n    PropagationAPI.prototype.fields = function () {\n        return this._getGlobalPropagator().fields();\n    };\n    /** Remove the global propagator */\n    PropagationAPI.prototype.disable = function () {\n        unregisterGlobal(API_NAME, DiagAPI.instance());\n    };\n    PropagationAPI.prototype._getGlobalPropagator = function () {\n        return getGlobal(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;\n    };\n    return PropagationAPI;\n}());\nexport { PropagationAPI };\n//# sourceMappingURL=propagation.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './baggage/types';\nexport { baggageEntryMetadataFromString } from './baggage/utils';\nexport * from './common/Exception';\nexport * from './common/Time';\nexport * from './diag';\nexport * from './propagation/TextMapPropagator';\nexport * from './trace/attributes';\nexport * from './trace/link';\nexport * from './trace/ProxyTracer';\nexport * from './trace/ProxyTracerProvider';\nexport * from './trace/Sampler';\nexport * from './trace/SamplingResult';\nexport * from './trace/span_context';\nexport * from './trace/span_kind';\nexport * from './trace/span';\nexport * from './trace/SpanOptions';\nexport * from './trace/status';\nexport * from './trace/trace_flags';\nexport * from './trace/trace_state';\nexport * from './trace/tracer_provider';\nexport * from './trace/tracer';\nexport { INVALID_SPANID, INVALID_TRACEID, INVALID_SPAN_CONTEXT, isSpanContextValid, isValidTraceId, isValidSpanId, } from './trace/spancontext-utils';\nexport * from './context/context';\nexport * from './context/types';\nimport { ContextAPI } from './api/context';\n/** Entrypoint for context API */\nexport var context = ContextAPI.getInstance();\nimport { TraceAPI } from './api/trace';\n/** Entrypoint for trace API */\nexport var trace = TraceAPI.getInstance();\nimport { PropagationAPI } from './api/propagation';\n/** Entrypoint for propagation API */\nexport var propagation = PropagationAPI.getInstance();\nimport { DiagAPI } from './api/diag';\n/**\n * Entrypoint for Diag API.\n * Defines Diagnostic handler used for internal diagnostic logging operations.\n * The default provides a Noop DiagLogger implementation which may be changed via the\n * diag.setLogger(logger: DiagLogger) function.\n */\nexport var diag = DiagAPI.instance();\nexport default {\n    trace: trace,\n    context: context,\n    propagation: propagation,\n    diag: diag,\n};\n//# sourceMappingURL=index.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createContextKey } from '@opentelemetry/api';\nvar SUPPRESS_TRACING_KEY = createContextKey('OpenTelemetry SDK Context Key SUPPRESS_TRACING');\nexport function suppressTracing(context) {\n    return context.setValue(SUPPRESS_TRACING_KEY, true);\n}\nexport function unsuppressTracing(context) {\n    return context.deleteValue(SUPPRESS_TRACING_KEY);\n}\nexport function isTracingSuppressed(context) {\n    return context.getValue(SUPPRESS_TRACING_KEY) === true;\n}\n//# sourceMappingURL=suppress-tracing.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var BAGGAGE_KEY_PAIR_SEPARATOR = '=';\nexport var BAGGAGE_PROPERTIES_SEPARATOR = ';';\nexport var BAGGAGE_ITEMS_SEPARATOR = ',';\n// Name of the http header used to propagate the baggage\nexport var BAGGAGE_HEADER = 'baggage';\n// Maximum number of name-value pairs allowed by w3c spec\nexport var BAGGAGE_MAX_NAME_VALUE_PAIRS = 180;\n// Maximum number of bytes per a single name-value pair allowed by w3c spec\nexport var BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = 4096;\n// Maximum total length of all name-value pairs allowed by w3c spec\nexport var BAGGAGE_MAX_TOTAL_LENGTH = 8192;\n//# sourceMappingURL=constants.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { baggageEntryMetadataFromString } from '@opentelemetry/api';\nimport { BAGGAGE_ITEMS_SEPARATOR, BAGGAGE_PROPERTIES_SEPARATOR, BAGGAGE_KEY_PAIR_SEPARATOR, BAGGAGE_MAX_TOTAL_LENGTH, } from './constants';\nexport var serializeKeyPairs = function (keyPairs) {\n    return keyPairs.reduce(function (hValue, current) {\n        var value = \"\" + hValue + (hValue !== '' ? BAGGAGE_ITEMS_SEPARATOR : '') + current;\n        return value.length > BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n    }, '');\n};\nexport var getKeyPairs = function (baggage) {\n    return baggage\n        .getAllEntries()\n        .map(function (_a) {\n        var key = _a[0], value = _a[1];\n        return encodeURIComponent(key) + \"=\" + encodeURIComponent(value.value);\n    });\n};\nexport var parsePairKeyValue = function (entry) {\n    var valueProps = entry.split(BAGGAGE_PROPERTIES_SEPARATOR);\n    if (valueProps.length <= 0)\n        return;\n    var keyPairPart = valueProps.shift();\n    if (!keyPairPart)\n        return;\n    var keyPair = keyPairPart.split(BAGGAGE_KEY_PAIR_SEPARATOR);\n    if (keyPair.length !== 2)\n        return;\n    var key = decodeURIComponent(keyPair[0].trim());\n    var value = decodeURIComponent(keyPair[1].trim());\n    var metadata;\n    if (valueProps.length > 0) {\n        metadata = baggageEntryMetadataFromString(valueProps.join(BAGGAGE_PROPERTIES_SEPARATOR));\n    }\n    return { key: key, value: value, metadata: metadata };\n};\n/**\n * Parse a string serialized in the baggage HTTP Format (without metadata):\n * https://github.com/w3c/baggage/blob/master/baggage/HTTP_HEADER_FORMAT.md\n */\nexport var parseKeyPairsIntoRecord = function (value) {\n    if (typeof value !== 'string' || value.length === 0)\n        return {};\n    return value\n        .split(BAGGAGE_ITEMS_SEPARATOR)\n        .map(function (entry) {\n        return parsePairKeyValue(entry);\n    })\n        .filter(function (keyPair) { return keyPair !== undefined && keyPair.value.length > 0; })\n        .reduce(function (headers, keyPair) {\n        headers[keyPair.key] = keyPair.value;\n        return headers;\n    }, {});\n};\n//# sourceMappingURL=utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { propagation, } from '@opentelemetry/api';\nimport { isTracingSuppressed } from '../../trace/suppress-tracing';\nimport { BAGGAGE_HEADER, BAGGAGE_ITEMS_SEPARATOR, BAGGAGE_MAX_NAME_VALUE_PAIRS, BAGGAGE_MAX_PER_NAME_VALUE_PAIRS } from '../constants';\nimport { getKeyPairs, parsePairKeyValue, serializeKeyPairs } from '../utils';\n/**\n * Propagates {@link Baggage} through Context format propagation.\n *\n * Based on the Baggage specification:\n * https://w3c.github.io/baggage/\n */\nvar HttpBaggagePropagator = /** @class */ (function () {\n    function HttpBaggagePropagator() {\n    }\n    HttpBaggagePropagator.prototype.inject = function (context, carrier, setter) {\n        var baggage = propagation.getBaggage(context);\n        if (!baggage || isTracingSuppressed(context))\n            return;\n        var keyPairs = getKeyPairs(baggage)\n            .filter(function (pair) {\n            return pair.length <= BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n        })\n            .slice(0, BAGGAGE_MAX_NAME_VALUE_PAIRS);\n        var headerValue = serializeKeyPairs(keyPairs);\n        if (headerValue.length > 0) {\n            setter.set(carrier, BAGGAGE_HEADER, headerValue);\n        }\n    };\n    HttpBaggagePropagator.prototype.extract = function (context, carrier, getter) {\n        var headerValue = getter.get(carrier, BAGGAGE_HEADER);\n        if (!headerValue)\n            return context;\n        var baggage = {};\n        if (headerValue.length === 0) {\n            return context;\n        }\n        var pairs = headerValue.split(BAGGAGE_ITEMS_SEPARATOR);\n        pairs.forEach(function (entry) {\n            var keyPair = parsePairKeyValue(entry);\n            if (keyPair) {\n                var baggageEntry = { value: keyPair.value };\n                if (keyPair.metadata) {\n                    baggageEntry.metadata = keyPair.metadata;\n                }\n                baggage[keyPair.key] = baggageEntry;\n            }\n        });\n        if (Object.entries(baggage).length === 0) {\n            return context;\n        }\n        return propagation.setBaggage(context, propagation.createBaggage(baggage));\n    };\n    HttpBaggagePropagator.prototype.fields = function () {\n        return [BAGGAGE_HEADER];\n    };\n    return HttpBaggagePropagator;\n}());\nexport { HttpBaggagePropagator };\n//# sourceMappingURL=HttpBaggagePropagator.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { loggingErrorHandler } from './logging-error-handler';\n/** The global error handler delegate */\nvar delegateHandler = loggingErrorHandler();\n/**\n * Set the global error handler\n * @param {ErrorHandler} handler\n */\nexport function setGlobalErrorHandler(handler) {\n    delegateHandler = handler;\n}\n/**\n * Return the global error handler\n * @param {Exception} ex\n */\nexport var globalErrorHandler = function (ex) {\n    try {\n        delegateHandler(ex);\n    }\n    catch (_a) { } // eslint-disable-line no-empty\n};\n//# sourceMappingURL=global-error-handler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\nexport function loggingErrorHandler() {\n    return function (ex) {\n        diag.error(stringifyException(ex));\n    };\n}\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\nfunction stringifyException(ex) {\n    if (typeof ex === 'string') {\n        return ex;\n    }\n    else {\n        return JSON.stringify(flattenException(ex));\n    }\n}\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\nfunction flattenException(ex) {\n    var result = {};\n    var current = ex;\n    while (current !== null) {\n        Object.getOwnPropertyNames(current).forEach(function (propertyName) {\n            if (result[propertyName])\n                return;\n            var value = current[propertyName];\n            if (value) {\n                result[propertyName] = String(value);\n            }\n        });\n        current = Object.getPrototypeOf(current);\n    }\n    return result;\n}\n//# sourceMappingURL=logging-error-handler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var TracesSamplerValues;\n(function (TracesSamplerValues) {\n    TracesSamplerValues[\"AlwaysOff\"] = \"always_off\";\n    TracesSamplerValues[\"AlwaysOn\"] = \"always_on\";\n    TracesSamplerValues[\"ParentBasedAlwaysOff\"] = \"parentbased_always_off\";\n    TracesSamplerValues[\"ParentBasedAlwaysOn\"] = \"parentbased_always_on\";\n    TracesSamplerValues[\"ParentBasedTraceIdRatio\"] = \"parentbased_traceidratio\";\n    TracesSamplerValues[\"TraceIdRatio\"] = \"traceidratio\";\n})(TracesSamplerValues || (TracesSamplerValues = {}));\n//# sourceMappingURL=sampling.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DiagLogLevel } from '@opentelemetry/api';\nimport { TracesSamplerValues } from './sampling';\nvar DEFAULT_LIST_SEPARATOR = ',';\n/**\n * Environment interface to define all names\n */\nvar ENVIRONMENT_NUMBERS_KEYS = [\n    'OTEL_BSP_EXPORT_TIMEOUT',\n    'OTEL_BSP_MAX_EXPORT_BATCH_SIZE',\n    'OTEL_BSP_MAX_QUEUE_SIZE',\n    'OTEL_BSP_SCHEDULE_DELAY',\n    'OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT',\n    'OTEL_SPAN_EVENT_COUNT_LIMIT',\n    'OTEL_SPAN_LINK_COUNT_LIMIT',\n];\nfunction isEnvVarANumber(key) {\n    return (ENVIRONMENT_NUMBERS_KEYS.indexOf(key) > -1);\n}\nvar ENVIRONMENT_LISTS_KEYS = [\n    'OTEL_NO_PATCH_MODULES',\n    'OTEL_PROPAGATORS',\n];\nfunction isEnvVarAList(key) {\n    return ENVIRONMENT_LISTS_KEYS.indexOf(key) > -1;\n}\n/**\n * Default environment variables\n */\nexport var DEFAULT_ENVIRONMENT = {\n    CONTAINER_NAME: '',\n    ECS_CONTAINER_METADATA_URI_V4: '',\n    ECS_CONTAINER_METADATA_URI: '',\n    HOSTNAME: '',\n    KUBERNETES_SERVICE_HOST: '',\n    NAMESPACE: '',\n    OTEL_BSP_EXPORT_TIMEOUT: 30000,\n    OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,\n    OTEL_BSP_MAX_QUEUE_SIZE: 2048,\n    OTEL_BSP_SCHEDULE_DELAY: 5000,\n    OTEL_EXPORTER_JAEGER_AGENT_HOST: '',\n    OTEL_EXPORTER_JAEGER_ENDPOINT: '',\n    OTEL_EXPORTER_JAEGER_PASSWORD: '',\n    OTEL_EXPORTER_JAEGER_USER: '',\n    OTEL_EXPORTER_OTLP_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_HEADERS: '',\n    OTEL_EXPORTER_OTLP_TRACES_HEADERS: '',\n    OTEL_EXPORTER_OTLP_METRICS_HEADERS: '',\n    OTEL_EXPORTER_ZIPKIN_ENDPOINT: 'http://localhost:9411/api/v2/spans',\n    OTEL_LOG_LEVEL: DiagLogLevel.INFO,\n    OTEL_NO_PATCH_MODULES: [],\n    OTEL_PROPAGATORS: ['tracecontext', 'baggage'],\n    OTEL_RESOURCE_ATTRIBUTES: '',\n    OTEL_SERVICE_NAME: '',\n    OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: 128,\n    OTEL_SPAN_EVENT_COUNT_LIMIT: 128,\n    OTEL_SPAN_LINK_COUNT_LIMIT: 128,\n    OTEL_TRACES_EXPORTER: 'none',\n    OTEL_TRACES_SAMPLER: TracesSamplerValues.ParentBasedAlwaysOn,\n    OTEL_TRACES_SAMPLER_ARG: '',\n};\n/**\n * Parses a variable as number with number validation\n * @param name\n * @param environment\n * @param values\n * @param min\n * @param max\n */\nfunction parseNumber(name, environment, values, min, max) {\n    if (min === void 0) { min = -Infinity; }\n    if (max === void 0) { max = Infinity; }\n    if (typeof values[name] !== 'undefined') {\n        var value = Number(values[name]);\n        if (!isNaN(value)) {\n            if (value < min) {\n                environment[name] = min;\n            }\n            else if (value > max) {\n                environment[name] = max;\n            }\n            else {\n                environment[name] = value;\n            }\n        }\n    }\n}\n/**\n * Parses list-like strings from input into output.\n * @param name\n * @param environment\n * @param values\n * @param separator\n */\nfunction parseStringList(name, output, input, separator) {\n    if (separator === void 0) { separator = DEFAULT_LIST_SEPARATOR; }\n    var givenValue = input[name];\n    if (typeof givenValue === 'string') {\n        output[name] = givenValue.split(separator).map(function (v) { return v.trim(); });\n    }\n}\n// The support string -> DiagLogLevel mappings\nvar logLevelMap = {\n    ALL: DiagLogLevel.ALL,\n    VERBOSE: DiagLogLevel.VERBOSE,\n    DEBUG: DiagLogLevel.DEBUG,\n    INFO: DiagLogLevel.INFO,\n    WARN: DiagLogLevel.WARN,\n    ERROR: DiagLogLevel.ERROR,\n    NONE: DiagLogLevel.NONE,\n};\n/**\n * Environmentally sets log level if valid log level string is provided\n * @param key\n * @param environment\n * @param values\n */\nfunction setLogLevelFromEnv(key, environment, values) {\n    var value = values[key];\n    if (typeof value === 'string') {\n        var theLevel = logLevelMap[value.toUpperCase()];\n        if (theLevel != null) {\n            environment[key] = theLevel;\n        }\n    }\n}\n/**\n * Parses environment values\n * @param values\n */\nexport function parseEnvironment(values) {\n    var environment = {};\n    for (var env in DEFAULT_ENVIRONMENT) {\n        var key = env;\n        switch (key) {\n            case 'OTEL_LOG_LEVEL':\n                setLogLevelFromEnv(key, environment, values);\n                break;\n            default:\n                if (isEnvVarANumber(key)) {\n                    parseNumber(key, environment, values);\n                }\n                else if (isEnvVarAList(key)) {\n                    parseStringList(key, environment, values);\n                }\n                else {\n                    var value = values[key];\n                    if (typeof value !== 'undefined' && value !== null) {\n                        environment[key] = String(value);\n                    }\n                }\n        }\n    }\n    return environment;\n}\n//# sourceMappingURL=environment.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DEFAULT_ENVIRONMENT, parseEnvironment, } from '../../utils/environment';\n/**\n * Gets the environment variables\n */\nexport function getEnv() {\n    var _window = window;\n    var globalEnv = parseEnvironment(_window);\n    return Object.assign({}, DEFAULT_ENVIRONMENT, globalEnv);\n}\n//# sourceMappingURL=environment.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function hexToBase64(hexStr) {\n    var hexStrLen = hexStr.length;\n    var hexAsciiCharsStr = '';\n    for (var i = 0; i < hexStrLen; i += 2) {\n        var hexPair = hexStr.substring(i, i + 2);\n        var hexVal = parseInt(hexPair, 16);\n        hexAsciiCharsStr += String.fromCharCode(hexVal);\n    }\n    return btoa(hexAsciiCharsStr);\n}\n//# sourceMappingURL=hex-to-base64.js.map","var SPAN_ID_BYTES = 8;\nvar TRACE_ID_BYTES = 16;\nvar RandomIdGenerator = /** @class */ (function () {\n    function RandomIdGenerator() {\n        /**\n         * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n         * characters corresponding to 128 bits.\n         */\n        this.generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n        /**\n         * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n         * characters corresponding to 64 bits.\n         */\n        this.generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n    }\n    return RandomIdGenerator;\n}());\nexport { RandomIdGenerator };\nvar SHARED_CHAR_CODES_ARRAY = Array(32);\nfunction getIdGenerator(bytes) {\n    return function generateId() {\n        for (var i = 0; i < bytes * 2; i++) {\n            SHARED_CHAR_CODES_ARRAY[i] = Math.floor(Math.random() * 16) + 48;\n            // valid hex characters in the range 48-57 and 97-102\n            if (SHARED_CHAR_CODES_ARRAY[i] >= 58) {\n                SHARED_CHAR_CODES_ARRAY[i] += 39;\n            }\n        }\n        return String.fromCharCode.apply(null, SHARED_CHAR_CODES_ARRAY.slice(0, bytes * 2));\n    };\n}\n//# sourceMappingURL=RandomIdGenerator.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var otperformance = performance;\n//# sourceMappingURL=performance.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\nexport var SemanticAttributes = {\n    /**\n    * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n    */\n    DB_SYSTEM: 'db.system',\n    /**\n    * The connection string used to connect to the database. It is recommended to remove embedded credentials.\n    */\n    DB_CONNECTION_STRING: 'db.connection_string',\n    /**\n    * Username for accessing the database.\n    */\n    DB_USER: 'db.user',\n    /**\n    * The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.\n    */\n    DB_JDBC_DRIVER_CLASSNAME: 'db.jdbc.driver_classname',\n    /**\n    * If no [tech-specific attribute](#call-level-attributes-for-specific-technologies) is defined, this attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).\n    *\n    * Note: In some SQL databases, the database name to be used is called &#34;schema name&#34;.\n    */\n    DB_NAME: 'db.name',\n    /**\n    * The database statement being executed.\n    *\n    * Note: The value may be sanitized to exclude sensitive information.\n    */\n    DB_STATEMENT: 'db.statement',\n    /**\n    * The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.\n    *\n    * Note: When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.\n    */\n    DB_OPERATION: 'db.operation',\n    /**\n    * The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.\n    *\n    * Note: If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but still recommended if non-standard).\n    */\n    DB_MSSQL_INSTANCE_NAME: 'db.mssql.instance_name',\n    /**\n    * The name of the keyspace being accessed. To be used instead of the generic `db.name` attribute.\n    */\n    DB_CASSANDRA_KEYSPACE: 'db.cassandra.keyspace',\n    /**\n    * The fetch size used for paging, i.e. how many rows will be returned at once.\n    */\n    DB_CASSANDRA_PAGE_SIZE: 'db.cassandra.page_size',\n    /**\n    * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n    */\n    DB_CASSANDRA_CONSISTENCY_LEVEL: 'db.cassandra.consistency_level',\n    /**\n    * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n    *\n    * Note: This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n    */\n    DB_CASSANDRA_TABLE: 'db.cassandra.table',\n    /**\n    * Whether or not the query is idempotent.\n    */\n    DB_CASSANDRA_IDEMPOTENCE: 'db.cassandra.idempotence',\n    /**\n    * The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.\n    */\n    DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT: 'db.cassandra.speculative_execution_count',\n    /**\n    * The ID of the coordinating node for a query.\n    */\n    DB_CASSANDRA_COORDINATOR_ID: 'db.cassandra.coordinator.id',\n    /**\n    * The data center of the coordinating node for a query.\n    */\n    DB_CASSANDRA_COORDINATOR_DC: 'db.cassandra.coordinator.dc',\n    /**\n    * The [HBase namespace](https://hbase.apache.org/book.html#_namespace) being accessed. To be used instead of the generic `db.name` attribute.\n    */\n    DB_HBASE_NAMESPACE: 'db.hbase.namespace',\n    /**\n    * The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.\n    */\n    DB_REDIS_DATABASE_INDEX: 'db.redis.database_index',\n    /**\n    * The collection being accessed within the database stated in `db.name`.\n    */\n    DB_MONGODB_COLLECTION: 'db.mongodb.collection',\n    /**\n    * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n    *\n    * Note: It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n    */\n    DB_SQL_TABLE: 'db.sql.table',\n    /**\n    * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n    */\n    EXCEPTION_TYPE: 'exception.type',\n    /**\n    * The exception message.\n    */\n    EXCEPTION_MESSAGE: 'exception.message',\n    /**\n    * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n    */\n    EXCEPTION_STACKTRACE: 'exception.stacktrace',\n    /**\n    * SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.\n    *\n    * Note: An exception is considered to have escaped (or left) the scope of a span,\n  if that span is ended while the exception is still logically &#34;in flight&#34;.\n  This may be actually &#34;in flight&#34; in some languages (e.g. if the exception\n  is passed to a Context manager&#39;s `__exit__` method in Python) but will\n  usually be caught at the point of recording the exception in most languages.\n  \n  It is usually not possible to determine at the point where an exception is thrown\n  whether it will escape the scope of a span.\n  However, it is trivial to know that an exception\n  will escape, if one checks for an active exception just before ending the span,\n  as done in the [example above](#exception-end-example).\n  \n  It follows that an exception may still escape the scope of the span\n  even if the `exception.escaped` attribute was not set or set to false,\n  since the event might have been recorded at a time where it was not\n  clear whether the exception will escape.\n    */\n    EXCEPTION_ESCAPED: 'exception.escaped',\n    /**\n    * Type of the trigger on which the function is executed.\n    */\n    FAAS_TRIGGER: 'faas.trigger',\n    /**\n    * The execution ID of the current function execution.\n    */\n    FAAS_EXECUTION: 'faas.execution',\n    /**\n    * The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.\n    */\n    FAAS_DOCUMENT_COLLECTION: 'faas.document.collection',\n    /**\n    * Describes the type of the operation that was performed on the data.\n    */\n    FAAS_DOCUMENT_OPERATION: 'faas.document.operation',\n    /**\n    * A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n    */\n    FAAS_DOCUMENT_TIME: 'faas.document.time',\n    /**\n    * The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.\n    */\n    FAAS_DOCUMENT_NAME: 'faas.document.name',\n    /**\n    * A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n    */\n    FAAS_TIME: 'faas.time',\n    /**\n    * A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).\n    */\n    FAAS_CRON: 'faas.cron',\n    /**\n    * A boolean that is true if the serverless function is executed for the first time (aka cold-start).\n    */\n    FAAS_COLDSTART: 'faas.coldstart',\n    /**\n    * The name of the invoked function.\n    *\n    * Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n    */\n    FAAS_INVOKED_NAME: 'faas.invoked_name',\n    /**\n    * The cloud provider of the invoked function.\n    *\n    * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n    */\n    FAAS_INVOKED_PROVIDER: 'faas.invoked_provider',\n    /**\n    * The cloud region of the invoked function.\n    *\n    * Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n    */\n    FAAS_INVOKED_REGION: 'faas.invoked_region',\n    /**\n    * Transport protocol used. See note below.\n    */\n    NET_TRANSPORT: 'net.transport',\n    /**\n    * Remote address of the peer (dotted decimal for IPv4 or [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6).\n    */\n    NET_PEER_IP: 'net.peer.ip',\n    /**\n    * Remote port number.\n    */\n    NET_PEER_PORT: 'net.peer.port',\n    /**\n    * Remote hostname or similar, see note below.\n    */\n    NET_PEER_NAME: 'net.peer.name',\n    /**\n    * Like `net.peer.ip` but for the host IP. Useful in case of a multi-IP host.\n    */\n    NET_HOST_IP: 'net.host.ip',\n    /**\n    * Like `net.peer.port` but for the host port.\n    */\n    NET_HOST_PORT: 'net.host.port',\n    /**\n    * Local hostname or similar, see note below.\n    */\n    NET_HOST_NAME: 'net.host.name',\n    /**\n    * The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.\n    */\n    PEER_SERVICE: 'peer.service',\n    /**\n    * Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system.\n    */\n    ENDUSER_ID: 'enduser.id',\n    /**\n    * Actual/assumed role the client is making the request under extracted from token or application security context.\n    */\n    ENDUSER_ROLE: 'enduser.role',\n    /**\n    * Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).\n    */\n    ENDUSER_SCOPE: 'enduser.scope',\n    /**\n    * Current &#34;managed&#34; thread ID (as opposed to OS thread ID).\n    */\n    THREAD_ID: 'thread.id',\n    /**\n    * Current thread name.\n    */\n    THREAD_NAME: 'thread.name',\n    /**\n    * The method or function name, or equivalent (usually rightmost part of the code unit&#39;s name).\n    */\n    CODE_FUNCTION: 'code.function',\n    /**\n    * The &#34;namespace&#34; within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.\n    */\n    CODE_NAMESPACE: 'code.namespace',\n    /**\n    * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).\n    */\n    CODE_FILEPATH: 'code.filepath',\n    /**\n    * The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.\n    */\n    CODE_LINENO: 'code.lineno',\n    /**\n    * HTTP request method.\n    */\n    HTTP_METHOD: 'http.method',\n    /**\n    * Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.\n    *\n    * Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute&#39;s value should be `https://www.example.com/`.\n    */\n    HTTP_URL: 'http.url',\n    /**\n    * The full request target as passed in a HTTP request line or equivalent.\n    */\n    HTTP_TARGET: 'http.target',\n    /**\n    * The value of the [HTTP host header](https://tools.ietf.org/html/rfc7230#section-5.4). When the header is empty or not present, this attribute should be the same.\n    */\n    HTTP_HOST: 'http.host',\n    /**\n    * The URI scheme identifying the used protocol.\n    */\n    HTTP_SCHEME: 'http.scheme',\n    /**\n    * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n    */\n    HTTP_STATUS_CODE: 'http.status_code',\n    /**\n    * Kind of HTTP protocol used.\n    *\n    * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n    */\n    HTTP_FLAVOR: 'http.flavor',\n    /**\n    * Value of the [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) header sent by the client.\n    */\n    HTTP_USER_AGENT: 'http.user_agent',\n    /**\n    * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n    */\n    HTTP_REQUEST_CONTENT_LENGTH: 'http.request_content_length',\n    /**\n    * The size of the uncompressed request payload body after transport decoding. Not set if transport encoding not used.\n    */\n    HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED: 'http.request_content_length_uncompressed',\n    /**\n    * The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n    */\n    HTTP_RESPONSE_CONTENT_LENGTH: 'http.response_content_length',\n    /**\n    * The size of the uncompressed response payload body after transport decoding. Not set if transport encoding not used.\n    */\n    HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED: 'http.response_content_length_uncompressed',\n    /**\n    * The primary server name of the matched virtual host. This should be obtained via configuration. If no such configuration can be obtained, this attribute MUST NOT be set ( `net.host.name` should be used instead).\n    *\n    * Note: `http.url` is usually not readily available on the server side but would have to be assembled in a cumbersome and sometimes lossy process from other information (see e.g. open-telemetry/opentelemetry-python/pull/148). It is thus preferred to supply the raw data that is available.\n    */\n    HTTP_SERVER_NAME: 'http.server_name',\n    /**\n    * The matched route (path template).\n    */\n    HTTP_ROUTE: 'http.route',\n    /**\n    * The IP address of the original client behind all proxies, if known (e.g. from [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)).\n    *\n    * Note: This is not necessarily the same as `net.peer.ip`, which would identify the network-level peer, which may be a proxy.\n    */\n    HTTP_CLIENT_IP: 'http.client_ip',\n    /**\n    * The keys in the `RequestItems` object field.\n    */\n    AWS_DYNAMODB_TABLE_NAMES: 'aws.dynamodb.table_names',\n    /**\n    * The JSON-serialized value of each item in the `ConsumedCapacity` response field.\n    */\n    AWS_DYNAMODB_CONSUMED_CAPACITY: 'aws.dynamodb.consumed_capacity',\n    /**\n    * The JSON-serialized value of the `ItemCollectionMetrics` response field.\n    */\n    AWS_DYNAMODB_ITEM_COLLECTION_METRICS: 'aws.dynamodb.item_collection_metrics',\n    /**\n    * The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.\n    */\n    AWS_DYNAMODB_PROVISIONED_READ_CAPACITY: 'aws.dynamodb.provisioned_read_capacity',\n    /**\n    * The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.\n    */\n    AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY: 'aws.dynamodb.provisioned_write_capacity',\n    /**\n    * The value of the `ConsistentRead` request parameter.\n    */\n    AWS_DYNAMODB_CONSISTENT_READ: 'aws.dynamodb.consistent_read',\n    /**\n    * The value of the `ProjectionExpression` request parameter.\n    */\n    AWS_DYNAMODB_PROJECTION: 'aws.dynamodb.projection',\n    /**\n    * The value of the `Limit` request parameter.\n    */\n    AWS_DYNAMODB_LIMIT: 'aws.dynamodb.limit',\n    /**\n    * The value of the `AttributesToGet` request parameter.\n    */\n    AWS_DYNAMODB_ATTRIBUTES_TO_GET: 'aws.dynamodb.attributes_to_get',\n    /**\n    * The value of the `IndexName` request parameter.\n    */\n    AWS_DYNAMODB_INDEX_NAME: 'aws.dynamodb.index_name',\n    /**\n    * The value of the `Select` request parameter.\n    */\n    AWS_DYNAMODB_SELECT: 'aws.dynamodb.select',\n    /**\n    * The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field.\n    */\n    AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES: 'aws.dynamodb.global_secondary_indexes',\n    /**\n    * The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.\n    */\n    AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES: 'aws.dynamodb.local_secondary_indexes',\n    /**\n    * The value of the `ExclusiveStartTableName` request parameter.\n    */\n    AWS_DYNAMODB_EXCLUSIVE_START_TABLE: 'aws.dynamodb.exclusive_start_table',\n    /**\n    * The the number of items in the `TableNames` response parameter.\n    */\n    AWS_DYNAMODB_TABLE_COUNT: 'aws.dynamodb.table_count',\n    /**\n    * The value of the `ScanIndexForward` request parameter.\n    */\n    AWS_DYNAMODB_SCAN_FORWARD: 'aws.dynamodb.scan_forward',\n    /**\n    * The value of the `Segment` request parameter.\n    */\n    AWS_DYNAMODB_SEGMENT: 'aws.dynamodb.segment',\n    /**\n    * The value of the `TotalSegments` request parameter.\n    */\n    AWS_DYNAMODB_TOTAL_SEGMENTS: 'aws.dynamodb.total_segments',\n    /**\n    * The value of the `Count` response parameter.\n    */\n    AWS_DYNAMODB_COUNT: 'aws.dynamodb.count',\n    /**\n    * The value of the `ScannedCount` response parameter.\n    */\n    AWS_DYNAMODB_SCANNED_COUNT: 'aws.dynamodb.scanned_count',\n    /**\n    * The JSON-serialized value of each item in the `AttributeDefinitions` request field.\n    */\n    AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS: 'aws.dynamodb.attribute_definitions',\n    /**\n    * The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field.\n    */\n    AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES: 'aws.dynamodb.global_secondary_index_updates',\n    /**\n    * A string identifying the messaging system.\n    */\n    MESSAGING_SYSTEM: 'messaging.system',\n    /**\n    * The message destination name. This might be equal to the span name but is required nevertheless.\n    */\n    MESSAGING_DESTINATION: 'messaging.destination',\n    /**\n    * The kind of message destination.\n    */\n    MESSAGING_DESTINATION_KIND: 'messaging.destination_kind',\n    /**\n    * A boolean that is true if the message destination is temporary.\n    */\n    MESSAGING_TEMP_DESTINATION: 'messaging.temp_destination',\n    /**\n    * The name of the transport protocol.\n    */\n    MESSAGING_PROTOCOL: 'messaging.protocol',\n    /**\n    * The version of the transport protocol.\n    */\n    MESSAGING_PROTOCOL_VERSION: 'messaging.protocol_version',\n    /**\n    * Connection string.\n    */\n    MESSAGING_URL: 'messaging.url',\n    /**\n    * A value used by the messaging system as an identifier for the message, represented as a string.\n    */\n    MESSAGING_MESSAGE_ID: 'messaging.message_id',\n    /**\n    * The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called &#34;Correlation ID&#34;.\n    */\n    MESSAGING_CONVERSATION_ID: 'messaging.conversation_id',\n    /**\n    * The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported.\n    */\n    MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES: 'messaging.message_payload_size_bytes',\n    /**\n    * The compressed size of the message payload in bytes.\n    */\n    MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES: 'messaging.message_payload_compressed_size_bytes',\n    /**\n    * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n    */\n    MESSAGING_OPERATION: 'messaging.operation',\n    /**\n    * RabbitMQ message routing key.\n    */\n    MESSAGING_RABBITMQ_ROUTING_KEY: 'messaging.rabbitmq.routing_key',\n    /**\n    * Message keys in Kafka are used for grouping alike messages to ensure they&#39;re processed on the same partition. They differ from `messaging.message_id` in that they&#39;re not unique. If the key is `null`, the attribute MUST NOT be set.\n    *\n    * Note: If the key type is not string, it&#39;s string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don&#39;t include its value.\n    */\n    MESSAGING_KAFKA_MESSAGE_KEY: 'messaging.kafka.message_key',\n    /**\n    * Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.\n    */\n    MESSAGING_KAFKA_CONSUMER_GROUP: 'messaging.kafka.consumer_group',\n    /**\n    * Client Id for the Consumer or Producer that is handling the message.\n    */\n    MESSAGING_KAFKA_CLIENT_ID: 'messaging.kafka.client_id',\n    /**\n    * Partition the message is sent to.\n    */\n    MESSAGING_KAFKA_PARTITION: 'messaging.kafka.partition',\n    /**\n    * A boolean that is true if the message is a tombstone.\n    */\n    MESSAGING_KAFKA_TOMBSTONE: 'messaging.kafka.tombstone',\n    /**\n    * A string identifying the remoting system.\n    */\n    RPC_SYSTEM: 'rpc.system',\n    /**\n    * The full name of the service being called, including its package name, if applicable.\n    */\n    RPC_SERVICE: 'rpc.service',\n    /**\n    * The name of the method being called, must be equal to the $method part in the span name.\n    */\n    RPC_METHOD: 'rpc.method',\n    /**\n    * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n    */\n    RPC_GRPC_STATUS_CODE: 'rpc.grpc.status_code',\n    /**\n    * Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted.\n    */\n    RPC_JSONRPC_VERSION: 'rpc.jsonrpc.version',\n    /**\n    * `method` property from request. Unlike `rpc.method`, this may not relate to the actual method being called. Useful for client-side traces since client does not know what will be called on the server.\n    */\n    RPC_JSONRPC_METHOD: 'rpc.jsonrpc.method',\n    /**\n    * `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.\n    */\n    RPC_JSONRPC_REQUEST_ID: 'rpc.jsonrpc.request_id',\n    /**\n    * `error.code` property of response if it is an error response.\n    */\n    RPC_JSONRPC_ERROR_CODE: 'rpc.jsonrpc.error_code',\n    /**\n    * `error.message` property of response if it is an error response.\n    */\n    RPC_JSONRPC_ERROR_MESSAGE: 'rpc.jsonrpc.error_message',\n};\n// Enum definitions\nexport var DbSystemValues;\n(function (DbSystemValues) {\n    /** Some other SQL database. Fallback only. See notes. */\n    DbSystemValues[\"OTHER_SQL\"] = \"other_sql\";\n    /** Microsoft SQL Server. */\n    DbSystemValues[\"MSSQL\"] = \"mssql\";\n    /** MySQL. */\n    DbSystemValues[\"MYSQL\"] = \"mysql\";\n    /** Oracle Database. */\n    DbSystemValues[\"ORACLE\"] = \"oracle\";\n    /** IBM Db2. */\n    DbSystemValues[\"DB2\"] = \"db2\";\n    /** PostgreSQL. */\n    DbSystemValues[\"POSTGRESQL\"] = \"postgresql\";\n    /** Amazon Redshift. */\n    DbSystemValues[\"REDSHIFT\"] = \"redshift\";\n    /** Apache Hive. */\n    DbSystemValues[\"HIVE\"] = \"hive\";\n    /** Cloudscape. */\n    DbSystemValues[\"CLOUDSCAPE\"] = \"cloudscape\";\n    /** HyperSQL DataBase. */\n    DbSystemValues[\"HSQLDB\"] = \"hsqldb\";\n    /** Progress Database. */\n    DbSystemValues[\"PROGRESS\"] = \"progress\";\n    /** SAP MaxDB. */\n    DbSystemValues[\"MAXDB\"] = \"maxdb\";\n    /** SAP HANA. */\n    DbSystemValues[\"HANADB\"] = \"hanadb\";\n    /** Ingres. */\n    DbSystemValues[\"INGRES\"] = \"ingres\";\n    /** FirstSQL. */\n    DbSystemValues[\"FIRSTSQL\"] = \"firstsql\";\n    /** EnterpriseDB. */\n    DbSystemValues[\"EDB\"] = \"edb\";\n    /** InterSystems Caché. */\n    DbSystemValues[\"CACHE\"] = \"cache\";\n    /** Adabas (Adaptable Database System). */\n    DbSystemValues[\"ADABAS\"] = \"adabas\";\n    /** Firebird. */\n    DbSystemValues[\"FIREBIRD\"] = \"firebird\";\n    /** Apache Derby. */\n    DbSystemValues[\"DERBY\"] = \"derby\";\n    /** FileMaker. */\n    DbSystemValues[\"FILEMAKER\"] = \"filemaker\";\n    /** Informix. */\n    DbSystemValues[\"INFORMIX\"] = \"informix\";\n    /** InstantDB. */\n    DbSystemValues[\"INSTANTDB\"] = \"instantdb\";\n    /** InterBase. */\n    DbSystemValues[\"INTERBASE\"] = \"interbase\";\n    /** MariaDB. */\n    DbSystemValues[\"MARIADB\"] = \"mariadb\";\n    /** Netezza. */\n    DbSystemValues[\"NETEZZA\"] = \"netezza\";\n    /** Pervasive PSQL. */\n    DbSystemValues[\"PERVASIVE\"] = \"pervasive\";\n    /** PointBase. */\n    DbSystemValues[\"POINTBASE\"] = \"pointbase\";\n    /** SQLite. */\n    DbSystemValues[\"SQLITE\"] = \"sqlite\";\n    /** Sybase. */\n    DbSystemValues[\"SYBASE\"] = \"sybase\";\n    /** Teradata. */\n    DbSystemValues[\"TERADATA\"] = \"teradata\";\n    /** Vertica. */\n    DbSystemValues[\"VERTICA\"] = \"vertica\";\n    /** H2. */\n    DbSystemValues[\"H2\"] = \"h2\";\n    /** ColdFusion IMQ. */\n    DbSystemValues[\"COLDFUSION\"] = \"coldfusion\";\n    /** Apache Cassandra. */\n    DbSystemValues[\"CASSANDRA\"] = \"cassandra\";\n    /** Apache HBase. */\n    DbSystemValues[\"HBASE\"] = \"hbase\";\n    /** MongoDB. */\n    DbSystemValues[\"MONGODB\"] = \"mongodb\";\n    /** Redis. */\n    DbSystemValues[\"REDIS\"] = \"redis\";\n    /** Couchbase. */\n    DbSystemValues[\"COUCHBASE\"] = \"couchbase\";\n    /** CouchDB. */\n    DbSystemValues[\"COUCHDB\"] = \"couchdb\";\n    /** Microsoft Azure Cosmos DB. */\n    DbSystemValues[\"COSMOSDB\"] = \"cosmosdb\";\n    /** Amazon DynamoDB. */\n    DbSystemValues[\"DYNAMODB\"] = \"dynamodb\";\n    /** Neo4j. */\n    DbSystemValues[\"NEO4J\"] = \"neo4j\";\n    /** Apache Geode. */\n    DbSystemValues[\"GEODE\"] = \"geode\";\n    /** Elasticsearch. */\n    DbSystemValues[\"ELASTICSEARCH\"] = \"elasticsearch\";\n    /** Memcached. */\n    DbSystemValues[\"MEMCACHED\"] = \"memcached\";\n    /** CockroachDB. */\n    DbSystemValues[\"COCKROACHDB\"] = \"cockroachdb\";\n})(DbSystemValues || (DbSystemValues = {}));\nexport var DbCassandraConsistencyLevelValues;\n(function (DbCassandraConsistencyLevelValues) {\n    /** all. */\n    DbCassandraConsistencyLevelValues[\"ALL\"] = \"all\";\n    /** each_quorum. */\n    DbCassandraConsistencyLevelValues[\"EACH_QUORUM\"] = \"each_quorum\";\n    /** quorum. */\n    DbCassandraConsistencyLevelValues[\"QUORUM\"] = \"quorum\";\n    /** local_quorum. */\n    DbCassandraConsistencyLevelValues[\"LOCAL_QUORUM\"] = \"local_quorum\";\n    /** one. */\n    DbCassandraConsistencyLevelValues[\"ONE\"] = \"one\";\n    /** two. */\n    DbCassandraConsistencyLevelValues[\"TWO\"] = \"two\";\n    /** three. */\n    DbCassandraConsistencyLevelValues[\"THREE\"] = \"three\";\n    /** local_one. */\n    DbCassandraConsistencyLevelValues[\"LOCAL_ONE\"] = \"local_one\";\n    /** any. */\n    DbCassandraConsistencyLevelValues[\"ANY\"] = \"any\";\n    /** serial. */\n    DbCassandraConsistencyLevelValues[\"SERIAL\"] = \"serial\";\n    /** local_serial. */\n    DbCassandraConsistencyLevelValues[\"LOCAL_SERIAL\"] = \"local_serial\";\n})(DbCassandraConsistencyLevelValues || (DbCassandraConsistencyLevelValues = {}));\nexport var FaasTriggerValues;\n(function (FaasTriggerValues) {\n    /** A response to some data source operation such as a database or filesystem read/write. */\n    FaasTriggerValues[\"DATASOURCE\"] = \"datasource\";\n    /** To provide an answer to an inbound HTTP request. */\n    FaasTriggerValues[\"HTTP\"] = \"http\";\n    /** A function is set to be executed when messages are sent to a messaging system. */\n    FaasTriggerValues[\"PUBSUB\"] = \"pubsub\";\n    /** A function is scheduled to be executed regularly. */\n    FaasTriggerValues[\"TIMER\"] = \"timer\";\n    /** If none of the others apply. */\n    FaasTriggerValues[\"OTHER\"] = \"other\";\n})(FaasTriggerValues || (FaasTriggerValues = {}));\nexport var FaasDocumentOperationValues;\n(function (FaasDocumentOperationValues) {\n    /** When a new object is created. */\n    FaasDocumentOperationValues[\"INSERT\"] = \"insert\";\n    /** When an object is modified. */\n    FaasDocumentOperationValues[\"EDIT\"] = \"edit\";\n    /** When an object is deleted. */\n    FaasDocumentOperationValues[\"DELETE\"] = \"delete\";\n})(FaasDocumentOperationValues || (FaasDocumentOperationValues = {}));\nexport var FaasInvokedProviderValues;\n(function (FaasInvokedProviderValues) {\n    /** Amazon Web Services. */\n    FaasInvokedProviderValues[\"AWS\"] = \"aws\";\n    /** Microsoft Azure. */\n    FaasInvokedProviderValues[\"AZURE\"] = \"azure\";\n    /** Google Cloud Platform. */\n    FaasInvokedProviderValues[\"GCP\"] = \"gcp\";\n})(FaasInvokedProviderValues || (FaasInvokedProviderValues = {}));\nexport var NetTransportValues;\n(function (NetTransportValues) {\n    /** ip_tcp. */\n    NetTransportValues[\"IP_TCP\"] = \"ip_tcp\";\n    /** ip_udp. */\n    NetTransportValues[\"IP_UDP\"] = \"ip_udp\";\n    /** Another IP-based protocol. */\n    NetTransportValues[\"IP\"] = \"ip\";\n    /** Unix Domain socket. See below. */\n    NetTransportValues[\"UNIX\"] = \"unix\";\n    /** Named or anonymous pipe. See note below. */\n    NetTransportValues[\"PIPE\"] = \"pipe\";\n    /** In-process communication. */\n    NetTransportValues[\"INPROC\"] = \"inproc\";\n    /** Something else (non IP-based). */\n    NetTransportValues[\"OTHER\"] = \"other\";\n})(NetTransportValues || (NetTransportValues = {}));\nexport var HttpFlavorValues;\n(function (HttpFlavorValues) {\n    /** HTTP 1.0. */\n    HttpFlavorValues[\"HTTP_1_0\"] = \"1.0\";\n    /** HTTP 1.1. */\n    HttpFlavorValues[\"HTTP_1_1\"] = \"1.1\";\n    /** HTTP 2. */\n    HttpFlavorValues[\"HTTP_2_0\"] = \"2.0\";\n    /** SPDY protocol. */\n    HttpFlavorValues[\"SPDY\"] = \"SPDY\";\n    /** QUIC protocol. */\n    HttpFlavorValues[\"QUIC\"] = \"QUIC\";\n})(HttpFlavorValues || (HttpFlavorValues = {}));\nexport var MessagingDestinationKindValues;\n(function (MessagingDestinationKindValues) {\n    /** A message sent to a queue. */\n    MessagingDestinationKindValues[\"QUEUE\"] = \"queue\";\n    /** A message sent to a topic. */\n    MessagingDestinationKindValues[\"TOPIC\"] = \"topic\";\n})(MessagingDestinationKindValues || (MessagingDestinationKindValues = {}));\nexport var MessagingOperationValues;\n(function (MessagingOperationValues) {\n    /** receive. */\n    MessagingOperationValues[\"RECEIVE\"] = \"receive\";\n    /** process. */\n    MessagingOperationValues[\"PROCESS\"] = \"process\";\n})(MessagingOperationValues || (MessagingOperationValues = {}));\nexport var RpcGrpcStatusCodeValues;\n(function (RpcGrpcStatusCodeValues) {\n    /** OK. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"OK\"] = 0] = \"OK\";\n    /** CANCELLED. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"CANCELLED\"] = 1] = \"CANCELLED\";\n    /** UNKNOWN. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n    /** INVALID_ARGUMENT. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n    /** DEADLINE_EXCEEDED. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n    /** NOT_FOUND. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n    /** ALREADY_EXISTS. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n    /** PERMISSION_DENIED. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n    /** RESOURCE_EXHAUSTED. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n    /** FAILED_PRECONDITION. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n    /** ABORTED. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"ABORTED\"] = 10] = \"ABORTED\";\n    /** OUT_OF_RANGE. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n    /** UNIMPLEMENTED. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n    /** INTERNAL. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"INTERNAL\"] = 13] = \"INTERNAL\";\n    /** UNAVAILABLE. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n    /** DATA_LOSS. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n    /** UNAUTHENTICATED. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n})(RpcGrpcStatusCodeValues || (RpcGrpcStatusCodeValues = {}));\n//# sourceMappingURL=SemanticAttributes.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\nexport var ResourceAttributes = {\n    /**\n    * Name of the cloud provider.\n    */\n    CLOUD_PROVIDER: 'cloud.provider',\n    /**\n    * The cloud account ID the resource is assigned to.\n    */\n    CLOUD_ACCOUNT_ID: 'cloud.account.id',\n    /**\n    * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n    */\n    CLOUD_REGION: 'cloud.region',\n    /**\n    * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n    *\n    * Note: Availability zones are called &#34;zones&#34; on Google Cloud.\n    */\n    CLOUD_AVAILABILITY_ZONE: 'cloud.availability_zone',\n    /**\n    * The cloud platform in use.\n    *\n    * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n    */\n    CLOUD_PLATFORM: 'cloud.platform',\n    /**\n    * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n    */\n    AWS_ECS_CONTAINER_ARN: 'aws.ecs.container.arn',\n    /**\n    * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n    */\n    AWS_ECS_CLUSTER_ARN: 'aws.ecs.cluster.arn',\n    /**\n    * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n    */\n    AWS_ECS_LAUNCHTYPE: 'aws.ecs.launchtype',\n    /**\n    * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n    */\n    AWS_ECS_TASK_ARN: 'aws.ecs.task.arn',\n    /**\n    * The task definition family this task definition is a member of.\n    */\n    AWS_ECS_TASK_FAMILY: 'aws.ecs.task.family',\n    /**\n    * The revision for this task definition.\n    */\n    AWS_ECS_TASK_REVISION: 'aws.ecs.task.revision',\n    /**\n    * The ARN of an EKS cluster.\n    */\n    AWS_EKS_CLUSTER_ARN: 'aws.eks.cluster.arn',\n    /**\n    * The name(s) of the AWS log group(s) an application is writing to.\n    *\n    * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n    */\n    AWS_LOG_GROUP_NAMES: 'aws.log.group.names',\n    /**\n    * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n    *\n    * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n    */\n    AWS_LOG_GROUP_ARNS: 'aws.log.group.arns',\n    /**\n    * The name(s) of the AWS log stream(s) an application is writing to.\n    */\n    AWS_LOG_STREAM_NAMES: 'aws.log.stream.names',\n    /**\n    * The ARN(s) of the AWS log stream(s).\n    *\n    * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n    */\n    AWS_LOG_STREAM_ARNS: 'aws.log.stream.arns',\n    /**\n    * Container name.\n    */\n    CONTAINER_NAME: 'container.name',\n    /**\n    * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n    */\n    CONTAINER_ID: 'container.id',\n    /**\n    * The container runtime managing this container.\n    */\n    CONTAINER_RUNTIME: 'container.runtime',\n    /**\n    * Name of the image the container was built on.\n    */\n    CONTAINER_IMAGE_NAME: 'container.image.name',\n    /**\n    * Container image tag.\n    */\n    CONTAINER_IMAGE_TAG: 'container.image.tag',\n    /**\n    * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n    */\n    DEPLOYMENT_ENVIRONMENT: 'deployment.environment',\n    /**\n    * A unique identifier representing the device.\n    *\n    * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n    */\n    DEVICE_ID: 'device.id',\n    /**\n    * The model identifier for the device.\n    *\n    * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n    */\n    DEVICE_MODEL_IDENTIFIER: 'device.model.identifier',\n    /**\n    * The marketing name for the device model.\n    *\n    * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n    */\n    DEVICE_MODEL_NAME: 'device.model.name',\n    /**\n    * The name of the function being executed.\n    */\n    FAAS_NAME: 'faas.name',\n    /**\n    * The unique ID of the function being executed.\n    *\n    * Note: For example, in AWS Lambda this field corresponds to the [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) value, in GCP to the URI of the resource, and in Azure to the [FunctionDirectory](https://github.com/Azure/azure-functions-host/wiki/Retrieving-information-about-the-currently-running-function) field.\n    */\n    FAAS_ID: 'faas.id',\n    /**\n    * The version string of the function being executed as defined in [Version Attributes](../../resource/semantic_conventions/README.md#version-attributes).\n    */\n    FAAS_VERSION: 'faas.version',\n    /**\n    * The execution environment ID as a string.\n    */\n    FAAS_INSTANCE: 'faas.instance',\n    /**\n    * The amount of memory available to the serverless function in MiB.\n    *\n    * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n    */\n    FAAS_MAX_MEMORY: 'faas.max_memory',\n    /**\n    * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n    */\n    HOST_ID: 'host.id',\n    /**\n    * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n    */\n    HOST_NAME: 'host.name',\n    /**\n    * Type of host. For Cloud, this must be the machine type.\n    */\n    HOST_TYPE: 'host.type',\n    /**\n    * The CPU architecture the host system is running on.\n    */\n    HOST_ARCH: 'host.arch',\n    /**\n    * Name of the VM image or OS install the host was instantiated from.\n    */\n    HOST_IMAGE_NAME: 'host.image.name',\n    /**\n    * VM image ID. For Cloud, this value is from the provider.\n    */\n    HOST_IMAGE_ID: 'host.image.id',\n    /**\n    * The version string of the VM image as defined in [Version Attributes](README.md#version-attributes).\n    */\n    HOST_IMAGE_VERSION: 'host.image.version',\n    /**\n    * The name of the cluster.\n    */\n    K8S_CLUSTER_NAME: 'k8s.cluster.name',\n    /**\n    * The name of the Node.\n    */\n    K8S_NODE_NAME: 'k8s.node.name',\n    /**\n    * The UID of the Node.\n    */\n    K8S_NODE_UID: 'k8s.node.uid',\n    /**\n    * The name of the namespace that the pod is running in.\n    */\n    K8S_NAMESPACE_NAME: 'k8s.namespace.name',\n    /**\n    * The UID of the Pod.\n    */\n    K8S_POD_UID: 'k8s.pod.uid',\n    /**\n    * The name of the Pod.\n    */\n    K8S_POD_NAME: 'k8s.pod.name',\n    /**\n    * The name of the Container in a Pod template.\n    */\n    K8S_CONTAINER_NAME: 'k8s.container.name',\n    /**\n    * The UID of the ReplicaSet.\n    */\n    K8S_REPLICASET_UID: 'k8s.replicaset.uid',\n    /**\n    * The name of the ReplicaSet.\n    */\n    K8S_REPLICASET_NAME: 'k8s.replicaset.name',\n    /**\n    * The UID of the Deployment.\n    */\n    K8S_DEPLOYMENT_UID: 'k8s.deployment.uid',\n    /**\n    * The name of the Deployment.\n    */\n    K8S_DEPLOYMENT_NAME: 'k8s.deployment.name',\n    /**\n    * The UID of the StatefulSet.\n    */\n    K8S_STATEFULSET_UID: 'k8s.statefulset.uid',\n    /**\n    * The name of the StatefulSet.\n    */\n    K8S_STATEFULSET_NAME: 'k8s.statefulset.name',\n    /**\n    * The UID of the DaemonSet.\n    */\n    K8S_DAEMONSET_UID: 'k8s.daemonset.uid',\n    /**\n    * The name of the DaemonSet.\n    */\n    K8S_DAEMONSET_NAME: 'k8s.daemonset.name',\n    /**\n    * The UID of the Job.\n    */\n    K8S_JOB_UID: 'k8s.job.uid',\n    /**\n    * The name of the Job.\n    */\n    K8S_JOB_NAME: 'k8s.job.name',\n    /**\n    * The UID of the CronJob.\n    */\n    K8S_CRONJOB_UID: 'k8s.cronjob.uid',\n    /**\n    * The name of the CronJob.\n    */\n    K8S_CRONJOB_NAME: 'k8s.cronjob.name',\n    /**\n    * The operating system type.\n    */\n    OS_TYPE: 'os.type',\n    /**\n    * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n    */\n    OS_DESCRIPTION: 'os.description',\n    /**\n    * Human readable operating system name.\n    */\n    OS_NAME: 'os.name',\n    /**\n    * The version string of the operating system as defined in [Version Attributes](../../resource/semantic_conventions/README.md#version-attributes).\n    */\n    OS_VERSION: 'os.version',\n    /**\n    * Process identifier (PID).\n    */\n    PROCESS_PID: 'process.pid',\n    /**\n    * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n    */\n    PROCESS_EXECUTABLE_NAME: 'process.executable.name',\n    /**\n    * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n    */\n    PROCESS_EXECUTABLE_PATH: 'process.executable.path',\n    /**\n    * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n    */\n    PROCESS_COMMAND: 'process.command',\n    /**\n    * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n    */\n    PROCESS_COMMAND_LINE: 'process.command_line',\n    /**\n    * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n    */\n    PROCESS_COMMAND_ARGS: 'process.command_args',\n    /**\n    * The username of the user that owns the process.\n    */\n    PROCESS_OWNER: 'process.owner',\n    /**\n    * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n    */\n    PROCESS_RUNTIME_NAME: 'process.runtime.name',\n    /**\n    * The version of the runtime of this process, as returned by the runtime without modification.\n    */\n    PROCESS_RUNTIME_VERSION: 'process.runtime.version',\n    /**\n    * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n    */\n    PROCESS_RUNTIME_DESCRIPTION: 'process.runtime.description',\n    /**\n    * Logical name of the service.\n    *\n    * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n    */\n    SERVICE_NAME: 'service.name',\n    /**\n    * A namespace for `service.name`.\n    *\n    * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n    */\n    SERVICE_NAMESPACE: 'service.namespace',\n    /**\n    * The string ID of the service instance.\n    *\n    * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n    */\n    SERVICE_INSTANCE_ID: 'service.instance.id',\n    /**\n    * The version string of the service API or implementation.\n    */\n    SERVICE_VERSION: 'service.version',\n    /**\n    * The name of the telemetry SDK as defined above.\n    */\n    TELEMETRY_SDK_NAME: 'telemetry.sdk.name',\n    /**\n    * The language of the telemetry SDK.\n    */\n    TELEMETRY_SDK_LANGUAGE: 'telemetry.sdk.language',\n    /**\n    * The version string of the telemetry SDK.\n    */\n    TELEMETRY_SDK_VERSION: 'telemetry.sdk.version',\n    /**\n    * The version string of the auto instrumentation agent, if used.\n    */\n    TELEMETRY_AUTO_VERSION: 'telemetry.auto.version',\n    /**\n    * The name of the web engine.\n    */\n    WEBENGINE_NAME: 'webengine.name',\n    /**\n    * The version of the web engine.\n    */\n    WEBENGINE_VERSION: 'webengine.version',\n    /**\n    * Additional description of the web engine (e.g. detailed version and edition information).\n    */\n    WEBENGINE_DESCRIPTION: 'webengine.description',\n};\n// Enum definitions\nexport var CloudProviderValues;\n(function (CloudProviderValues) {\n    /** Amazon Web Services. */\n    CloudProviderValues[\"AWS\"] = \"aws\";\n    /** Microsoft Azure. */\n    CloudProviderValues[\"AZURE\"] = \"azure\";\n    /** Google Cloud Platform. */\n    CloudProviderValues[\"GCP\"] = \"gcp\";\n})(CloudProviderValues || (CloudProviderValues = {}));\nexport var CloudPlatformValues;\n(function (CloudPlatformValues) {\n    /** AWS Elastic Compute Cloud. */\n    CloudPlatformValues[\"AWS_EC2\"] = \"aws_ec2\";\n    /** AWS Elastic Container Service. */\n    CloudPlatformValues[\"AWS_ECS\"] = \"aws_ecs\";\n    /** AWS Elastic Kubernetes Service. */\n    CloudPlatformValues[\"AWS_EKS\"] = \"aws_eks\";\n    /** AWS Lambda. */\n    CloudPlatformValues[\"AWS_LAMBDA\"] = \"aws_lambda\";\n    /** AWS Elastic Beanstalk. */\n    CloudPlatformValues[\"AWS_ELASTIC_BEANSTALK\"] = \"aws_elastic_beanstalk\";\n    /** Azure Virtual Machines. */\n    CloudPlatformValues[\"AZURE_VM\"] = \"azure_vm\";\n    /** Azure Container Instances. */\n    CloudPlatformValues[\"AZURE_CONTAINER_INSTANCES\"] = \"azure_container_instances\";\n    /** Azure Kubernetes Service. */\n    CloudPlatformValues[\"AZURE_AKS\"] = \"azure_aks\";\n    /** Azure Functions. */\n    CloudPlatformValues[\"AZURE_FUNCTIONS\"] = \"azure_functions\";\n    /** Azure App Service. */\n    CloudPlatformValues[\"AZURE_APP_SERVICE\"] = \"azure_app_service\";\n    /** Google Cloud Compute Engine (GCE). */\n    CloudPlatformValues[\"GCP_COMPUTE_ENGINE\"] = \"gcp_compute_engine\";\n    /** Google Cloud Run. */\n    CloudPlatformValues[\"GCP_CLOUD_RUN\"] = \"gcp_cloud_run\";\n    /** Google Cloud Kubernetes Engine (GKE). */\n    CloudPlatformValues[\"GCP_KUBERNETES_ENGINE\"] = \"gcp_kubernetes_engine\";\n    /** Google Cloud Functions (GCF). */\n    CloudPlatformValues[\"GCP_CLOUD_FUNCTIONS\"] = \"gcp_cloud_functions\";\n    /** Google Cloud App Engine (GAE). */\n    CloudPlatformValues[\"GCP_APP_ENGINE\"] = \"gcp_app_engine\";\n})(CloudPlatformValues || (CloudPlatformValues = {}));\nexport var AwsEcsLaunchtypeValues;\n(function (AwsEcsLaunchtypeValues) {\n    /** ec2. */\n    AwsEcsLaunchtypeValues[\"EC2\"] = \"ec2\";\n    /** fargate. */\n    AwsEcsLaunchtypeValues[\"FARGATE\"] = \"fargate\";\n})(AwsEcsLaunchtypeValues || (AwsEcsLaunchtypeValues = {}));\nexport var HostArchValues;\n(function (HostArchValues) {\n    /** AMD64. */\n    HostArchValues[\"AMD64\"] = \"amd64\";\n    /** ARM32. */\n    HostArchValues[\"ARM32\"] = \"arm32\";\n    /** ARM64. */\n    HostArchValues[\"ARM64\"] = \"arm64\";\n    /** Itanium. */\n    HostArchValues[\"IA64\"] = \"ia64\";\n    /** 32-bit PowerPC. */\n    HostArchValues[\"PPC32\"] = \"ppc32\";\n    /** 64-bit PowerPC. */\n    HostArchValues[\"PPC64\"] = \"ppc64\";\n    /** 32-bit x86. */\n    HostArchValues[\"X86\"] = \"x86\";\n})(HostArchValues || (HostArchValues = {}));\nexport var OsTypeValues;\n(function (OsTypeValues) {\n    /** Microsoft Windows. */\n    OsTypeValues[\"WINDOWS\"] = \"windows\";\n    /** Linux. */\n    OsTypeValues[\"LINUX\"] = \"linux\";\n    /** Apple Darwin. */\n    OsTypeValues[\"DARWIN\"] = \"darwin\";\n    /** FreeBSD. */\n    OsTypeValues[\"FREEBSD\"] = \"freebsd\";\n    /** NetBSD. */\n    OsTypeValues[\"NETBSD\"] = \"netbsd\";\n    /** OpenBSD. */\n    OsTypeValues[\"OPENBSD\"] = \"openbsd\";\n    /** DragonFly BSD. */\n    OsTypeValues[\"DRAGONFLYBSD\"] = \"dragonflybsd\";\n    /** HP-UX (Hewlett Packard Unix). */\n    OsTypeValues[\"HPUX\"] = \"hpux\";\n    /** AIX (Advanced Interactive eXecutive). */\n    OsTypeValues[\"AIX\"] = \"aix\";\n    /** Oracle Solaris. */\n    OsTypeValues[\"SOLARIS\"] = \"solaris\";\n    /** IBM z/OS. */\n    OsTypeValues[\"Z_OS\"] = \"z_os\";\n})(OsTypeValues || (OsTypeValues = {}));\nexport var TelemetrySdkLanguageValues;\n(function (TelemetrySdkLanguageValues) {\n    /** cpp. */\n    TelemetrySdkLanguageValues[\"CPP\"] = \"cpp\";\n    /** dotnet. */\n    TelemetrySdkLanguageValues[\"DOTNET\"] = \"dotnet\";\n    /** erlang. */\n    TelemetrySdkLanguageValues[\"ERLANG\"] = \"erlang\";\n    /** go. */\n    TelemetrySdkLanguageValues[\"GO\"] = \"go\";\n    /** java. */\n    TelemetrySdkLanguageValues[\"JAVA\"] = \"java\";\n    /** nodejs. */\n    TelemetrySdkLanguageValues[\"NODEJS\"] = \"nodejs\";\n    /** php. */\n    TelemetrySdkLanguageValues[\"PHP\"] = \"php\";\n    /** python. */\n    TelemetrySdkLanguageValues[\"PYTHON\"] = \"python\";\n    /** ruby. */\n    TelemetrySdkLanguageValues[\"RUBY\"] = \"ruby\";\n    /** webjs. */\n    TelemetrySdkLanguageValues[\"WEBJS\"] = \"webjs\";\n})(TelemetrySdkLanguageValues || (TelemetrySdkLanguageValues = {}));\n//# sourceMappingURL=ResourceAttributes.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a;\nimport { VERSION } from '../../version';\nimport { TelemetrySdkLanguageValues, ResourceAttributes, } from '@opentelemetry/semantic-conventions';\n/** Constants describing the SDK in use */\nexport var SDK_INFO = (_a = {},\n    _a[ResourceAttributes.TELEMETRY_SDK_NAME] = 'opentelemetry',\n    _a[ResourceAttributes.PROCESS_RUNTIME_NAME] = 'browser',\n    _a[ResourceAttributes.TELEMETRY_SDK_LANGUAGE] = TelemetrySdkLanguageValues.WEBJS,\n    _a[ResourceAttributes.TELEMETRY_SDK_VERSION] = VERSION,\n    _a);\n//# sourceMappingURL=sdk-info.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// this is autogenerated file, see scripts/version-update.js\nexport var VERSION = '0.23.0';\n//# sourceMappingURL=version.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { otperformance as performance } from '../platform';\nvar NANOSECOND_DIGITS = 9;\nvar SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);\n/**\n * Converts a number to HrTime\n * @param epochMillis\n */\nfunction numberToHrtime(epochMillis) {\n    var epochSeconds = epochMillis / 1000;\n    // Decimals only.\n    var seconds = Math.trunc(epochSeconds);\n    // Round sub-nanosecond accuracy to nanosecond.\n    var nanos = Number((epochSeconds - seconds).toFixed(NANOSECOND_DIGITS)) *\n        SECOND_TO_NANOSECONDS;\n    return [seconds, nanos];\n}\nfunction getTimeOrigin() {\n    var timeOrigin = performance.timeOrigin;\n    if (typeof timeOrigin !== 'number') {\n        var perf = performance;\n        timeOrigin = perf.timing && perf.timing.fetchStart;\n    }\n    return timeOrigin;\n}\n/**\n * Returns an hrtime calculated via performance component.\n * @param performanceNow\n */\nexport function hrTime(performanceNow) {\n    var timeOrigin = numberToHrtime(getTimeOrigin());\n    var now = numberToHrtime(typeof performanceNow === 'number' ? performanceNow : performance.now());\n    var seconds = timeOrigin[0] + now[0];\n    var nanos = timeOrigin[1] + now[1];\n    // Nanoseconds\n    if (nanos > SECOND_TO_NANOSECONDS) {\n        nanos -= SECOND_TO_NANOSECONDS;\n        seconds += 1;\n    }\n    return [seconds, nanos];\n}\n/**\n *\n * Converts a TimeInput to an HrTime, defaults to _hrtime().\n * @param time\n */\nexport function timeInputToHrTime(time) {\n    // process.hrtime\n    if (isTimeInputHrTime(time)) {\n        return time;\n    }\n    else if (typeof time === 'number') {\n        // Must be a performance.now() if it's smaller than process start time.\n        if (time < getTimeOrigin()) {\n            return hrTime(time);\n        }\n        else {\n            // epoch milliseconds or performance.timeOrigin\n            return numberToHrtime(time);\n        }\n    }\n    else if (time instanceof Date) {\n        return numberToHrtime(time.getTime());\n    }\n    else {\n        throw TypeError('Invalid input type');\n    }\n}\n/**\n * Returns a duration of two hrTime.\n * @param startTime\n * @param endTime\n */\nexport function hrTimeDuration(startTime, endTime) {\n    var seconds = endTime[0] - startTime[0];\n    var nanos = endTime[1] - startTime[1];\n    // overflow\n    if (nanos < 0) {\n        seconds -= 1;\n        // negate\n        nanos += SECOND_TO_NANOSECONDS;\n    }\n    return [seconds, nanos];\n}\n/**\n * Convert hrTime to timestamp, for example \"2019-05-14T17:00:00.000123456Z\"\n * @param hrTime\n */\nexport function hrTimeToTimeStamp(hrTime) {\n    var precision = NANOSECOND_DIGITS;\n    var tmp = \"\" + '0'.repeat(precision) + hrTime[1] + \"Z\";\n    var nanoString = tmp.substr(tmp.length - precision - 1);\n    var date = new Date(hrTime[0] * 1000).toISOString();\n    return date.replace('000Z', nanoString);\n}\n/**\n * Convert hrTime to nanoseconds.\n * @param hrTime\n */\nexport function hrTimeToNanoseconds(hrTime) {\n    return hrTime[0] * SECOND_TO_NANOSECONDS + hrTime[1];\n}\n/**\n * Convert hrTime to milliseconds.\n * @param hrTime\n */\nexport function hrTimeToMilliseconds(hrTime) {\n    return Math.round(hrTime[0] * 1e3 + hrTime[1] / 1e6);\n}\n/**\n * Convert hrTime to microseconds.\n * @param hrTime\n */\nexport function hrTimeToMicroseconds(hrTime) {\n    return Math.round(hrTime[0] * 1e6 + hrTime[1] / 1e3);\n}\n/**\n * check if time is HrTime\n * @param value\n */\nexport function isTimeInputHrTime(value) {\n    return (Array.isArray(value) &&\n        value.length === 2 &&\n        typeof value[0] === 'number' &&\n        typeof value[1] === 'number');\n}\n/**\n * check if input value is a correct types.TimeInput\n * @param value\n */\nexport function isTimeInput(value) {\n    return (isTimeInputHrTime(value) ||\n        typeof value === 'number' ||\n        value instanceof Date);\n}\n//# sourceMappingURL=time.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var ExportResultCode;\n(function (ExportResultCode) {\n    ExportResultCode[ExportResultCode[\"SUCCESS\"] = 0] = \"SUCCESS\";\n    ExportResultCode[ExportResultCode[\"FAILED\"] = 1] = \"FAILED\";\n})(ExportResultCode || (ExportResultCode = {}));\n//# sourceMappingURL=ExportResult.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag, } from '@opentelemetry/api';\n/** Combines multiple propagators into a single propagator. */\nvar CompositePropagator = /** @class */ (function () {\n    /**\n     * Construct a composite propagator from a list of propagators.\n     *\n     * @param [config] Configuration object for composite propagator\n     */\n    function CompositePropagator(config) {\n        if (config === void 0) { config = {}; }\n        var _a;\n        this._propagators = (_a = config.propagators) !== null && _a !== void 0 ? _a : [];\n        this._fields = Array.from(new Set(this._propagators\n            // older propagators may not have fields function, null check to be sure\n            .map(function (p) { return (typeof p.fields === 'function' ? p.fields() : []); })\n            .reduce(function (x, y) { return x.concat(y); }, [])));\n    }\n    /**\n     * Run each of the configured propagators with the given context and carrier.\n     * Propagators are run in the order they are configured, so if multiple\n     * propagators write the same carrier key, the propagator later in the list\n     * will \"win\".\n     *\n     * @param context Context to inject\n     * @param carrier Carrier into which context will be injected\n     */\n    CompositePropagator.prototype.inject = function (context, carrier, setter) {\n        for (var _i = 0, _a = this._propagators; _i < _a.length; _i++) {\n            var propagator = _a[_i];\n            try {\n                propagator.inject(context, carrier, setter);\n            }\n            catch (err) {\n                diag.warn(\"Failed to inject with \" + propagator.constructor.name + \". Err: \" + err.message);\n            }\n        }\n    };\n    /**\n     * Run each of the configured propagators with the given context and carrier.\n     * Propagators are run in the order they are configured, so if multiple\n     * propagators write the same context key, the propagator later in the list\n     * will \"win\".\n     *\n     * @param context Context to add values to\n     * @param carrier Carrier from which to extract context\n     */\n    CompositePropagator.prototype.extract = function (context, carrier, getter) {\n        return this._propagators.reduce(function (ctx, propagator) {\n            try {\n                return propagator.extract(ctx, carrier, getter);\n            }\n            catch (err) {\n                diag.warn(\"Failed to inject with \" + propagator.constructor.name + \". Err: \" + err.message);\n            }\n            return ctx;\n        }, context);\n    };\n    CompositePropagator.prototype.fields = function () {\n        // return a new array so our fields cannot be modified\n        return this._fields.slice();\n    };\n    return CompositePropagator;\n}());\nexport { CompositePropagator };\n//# sourceMappingURL=composite.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nvar VALID_KEY = \"[a-z]\" + VALID_KEY_CHAR_RANGE + \"{0,255}\";\nvar VALID_VENDOR_KEY = \"[a-z0-9]\" + VALID_KEY_CHAR_RANGE + \"{0,240}@[a-z]\" + VALID_KEY_CHAR_RANGE + \"{0,13}\";\nvar VALID_KEY_REGEX = new RegExp(\"^(?:\" + VALID_KEY + \"|\" + VALID_VENDOR_KEY + \")$\");\nvar VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nvar INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nexport function validateKey(key) {\n    return VALID_KEY_REGEX.test(key);\n}\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nexport function validateValue(value) {\n    return (VALID_VALUE_BASE_REGEX.test(value) &&\n        !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value));\n}\n//# sourceMappingURL=validators.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { validateKey, validateValue } from '../internal/validators';\nvar MAX_TRACE_STATE_ITEMS = 32;\nvar MAX_TRACE_STATE_LEN = 512;\nvar LIST_MEMBERS_SEPARATOR = ',';\nvar LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nvar TraceState = /** @class */ (function () {\n    function TraceState(rawTraceState) {\n        this._internalState = new Map();\n        if (rawTraceState)\n            this._parse(rawTraceState);\n    }\n    TraceState.prototype.set = function (key, value) {\n        // TODO: Benchmark the different approaches(map vs list) and\n        // use the faster one.\n        var traceState = this._clone();\n        if (traceState._internalState.has(key)) {\n            traceState._internalState.delete(key);\n        }\n        traceState._internalState.set(key, value);\n        return traceState;\n    };\n    TraceState.prototype.unset = function (key) {\n        var traceState = this._clone();\n        traceState._internalState.delete(key);\n        return traceState;\n    };\n    TraceState.prototype.get = function (key) {\n        return this._internalState.get(key);\n    };\n    TraceState.prototype.serialize = function () {\n        var _this = this;\n        return this._keys()\n            .reduce(function (agg, key) {\n            agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + _this.get(key));\n            return agg;\n        }, [])\n            .join(LIST_MEMBERS_SEPARATOR);\n    };\n    TraceState.prototype._parse = function (rawTraceState) {\n        if (rawTraceState.length > MAX_TRACE_STATE_LEN)\n            return;\n        this._internalState = rawTraceState\n            .split(LIST_MEMBERS_SEPARATOR)\n            .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n            .reduce(function (agg, part) {\n            var listMember = part.trim(); // Optional Whitespace (OWS) handling\n            var i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n            if (i !== -1) {\n                var key = listMember.slice(0, i);\n                var value = listMember.slice(i + 1, part.length);\n                if (validateKey(key) && validateValue(value)) {\n                    agg.set(key, value);\n                }\n                else {\n                    // TODO: Consider to add warning log\n                }\n            }\n            return agg;\n        }, new Map());\n        // Because of the reverse() requirement, trunc must be done after map is created\n        if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n            this._internalState = new Map(Array.from(this._internalState.entries())\n                .reverse() // Use reverse same as original tracestate parse chain\n                .slice(0, MAX_TRACE_STATE_ITEMS));\n        }\n    };\n    TraceState.prototype._keys = function () {\n        return Array.from(this._internalState.keys()).reverse();\n    };\n    TraceState.prototype._clone = function () {\n        var traceState = new TraceState();\n        traceState._internalState = new Map(this._internalState);\n        return traceState;\n    };\n    return TraceState;\n}());\nexport { TraceState };\n//# sourceMappingURL=TraceState.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isSpanContextValid, trace, TraceFlags, } from '@opentelemetry/api';\nimport { isTracingSuppressed } from './suppress-tracing';\nimport { TraceState } from './TraceState';\nexport var TRACE_PARENT_HEADER = 'traceparent';\nexport var TRACE_STATE_HEADER = 'tracestate';\nvar VERSION = '00';\nvar VERSION_PART = '(?!ff)[\\\\da-f]{2}';\nvar TRACE_ID_PART = '(?![0]{32})[\\\\da-f]{32}';\nvar PARENT_ID_PART = '(?![0]{16})[\\\\da-f]{16}';\nvar FLAGS_PART = '[\\\\da-f]{2}';\nvar TRACE_PARENT_REGEX = new RegExp(\"^\\\\s?(\" + VERSION_PART + \")-(\" + TRACE_ID_PART + \")-(\" + PARENT_ID_PART + \")-(\" + FLAGS_PART + \")(-.*)?\\\\s?$\");\n/**\n * Parses information from the [traceparent] span tag and converts it into {@link SpanContext}\n * @param traceParent - A meta property that comes from server.\n *     It should be dynamically generated server side to have the server's request trace Id,\n *     a parent span Id that was set on the server's request span,\n *     and the trace flags to indicate the server's sampling decision\n *     (01 = sampled, 00 = not sampled).\n *     for example: '{version}-{traceId}-{spanId}-{sampleDecision}'\n *     For more information see {@link https://www.w3.org/TR/trace-context/}\n */\nexport function parseTraceParent(traceParent) {\n    var match = TRACE_PARENT_REGEX.exec(traceParent);\n    if (!match)\n        return null;\n    // According to the specification the implementation should be compatible\n    // with future versions. If there are more parts, we only reject it if it's using version 00\n    // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent\n    if (match[1] === '00' && match[5])\n        return null;\n    return {\n        traceId: match[2],\n        spanId: match[3],\n        traceFlags: parseInt(match[4], 16),\n    };\n}\n/**\n * Propagates {@link SpanContext} through Trace Context format propagation.\n *\n * Based on the Trace Context specification:\n * https://www.w3.org/TR/trace-context/\n */\nvar HttpTraceContextPropagator = /** @class */ (function () {\n    function HttpTraceContextPropagator() {\n    }\n    HttpTraceContextPropagator.prototype.inject = function (context, carrier, setter) {\n        var spanContext = trace.getSpanContext(context);\n        if (!spanContext ||\n            isTracingSuppressed(context) ||\n            !isSpanContextValid(spanContext))\n            return;\n        var traceParent = VERSION + \"-\" + spanContext.traceId + \"-\" + spanContext.spanId + \"-0\" + Number(spanContext.traceFlags || TraceFlags.NONE).toString(16);\n        setter.set(carrier, TRACE_PARENT_HEADER, traceParent);\n        if (spanContext.traceState) {\n            setter.set(carrier, TRACE_STATE_HEADER, spanContext.traceState.serialize());\n        }\n    };\n    HttpTraceContextPropagator.prototype.extract = function (context, carrier, getter) {\n        var traceParentHeader = getter.get(carrier, TRACE_PARENT_HEADER);\n        if (!traceParentHeader)\n            return context;\n        var traceParent = Array.isArray(traceParentHeader)\n            ? traceParentHeader[0]\n            : traceParentHeader;\n        if (typeof traceParent !== 'string')\n            return context;\n        var spanContext = parseTraceParent(traceParent);\n        if (!spanContext)\n            return context;\n        spanContext.isRemote = true;\n        var traceStateHeader = getter.get(carrier, TRACE_STATE_HEADER);\n        if (traceStateHeader) {\n            // If more than one `tracestate` header is found, we merge them into a\n            // single header.\n            var state = Array.isArray(traceStateHeader)\n                ? traceStateHeader.join(',')\n                : traceStateHeader;\n            spanContext.traceState = new TraceState(typeof state === 'string' ? state : undefined);\n        }\n        return trace.setSpanContext(context, spanContext);\n    };\n    HttpTraceContextPropagator.prototype.fields = function () {\n        return [TRACE_PARENT_HEADER, TRACE_STATE_HEADER];\n    };\n    return HttpTraceContextPropagator;\n}());\nexport { HttpTraceContextPropagator };\n//# sourceMappingURL=HttpTraceContextPropagator.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createContextKey } from '@opentelemetry/api';\nvar RPC_METADATA_KEY = createContextKey('OpenTelemetry SDK Context Key RPC_METADATA');\nexport var RPCType;\n(function (RPCType) {\n    RPCType[\"HTTP\"] = \"http\";\n})(RPCType || (RPCType = {}));\nexport function setRPCMetadata(context, meta) {\n    return context.setValue(RPC_METADATA_KEY, meta);\n}\nexport function deleteRPCMetadata(context) {\n    return context.deleteValue(RPC_METADATA_KEY);\n}\nexport function getRPCMetadata(context) {\n    return context.getValue(RPC_METADATA_KEY);\n}\n//# sourceMappingURL=rpc-metadata.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SamplingDecision } from '@opentelemetry/api';\n/** Sampler that samples no traces. */\nvar AlwaysOffSampler = /** @class */ (function () {\n    function AlwaysOffSampler() {\n    }\n    AlwaysOffSampler.prototype.shouldSample = function () {\n        return {\n            decision: SamplingDecision.NOT_RECORD,\n        };\n    };\n    AlwaysOffSampler.prototype.toString = function () {\n        return 'AlwaysOffSampler';\n    };\n    return AlwaysOffSampler;\n}());\nexport { AlwaysOffSampler };\n//# sourceMappingURL=AlwaysOffSampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SamplingDecision } from '@opentelemetry/api';\n/** Sampler that samples all traces. */\nvar AlwaysOnSampler = /** @class */ (function () {\n    function AlwaysOnSampler() {\n    }\n    AlwaysOnSampler.prototype.shouldSample = function () {\n        return {\n            decision: SamplingDecision.RECORD_AND_SAMPLED,\n        };\n    };\n    AlwaysOnSampler.prototype.toString = function () {\n        return 'AlwaysOnSampler';\n    };\n    return AlwaysOnSampler;\n}());\nexport { AlwaysOnSampler };\n//# sourceMappingURL=AlwaysOnSampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { ExportResultCode } from '@opentelemetry/core';\n/**\n * Collector Exporter abstract base class\n */\nvar CollectorExporterBase = /** @class */ (function () {\n    /**\n     * @param config\n     */\n    function CollectorExporterBase(config) {\n        if (config === void 0) { config = {}; }\n        this._isShutdown = false;\n        this._shuttingDownPromise = Promise.resolve();\n        this._sendingPromises = [];\n        this.url = this.getDefaultUrl(config);\n        if (typeof config.hostname === 'string') {\n            this.hostname = config.hostname;\n        }\n        this.attributes = config.attributes;\n        this.shutdown = this.shutdown.bind(this);\n        this._concurrencyLimit =\n            typeof config.concurrencyLimit === 'number'\n                ? config.concurrencyLimit\n                : Infinity;\n        // platform dependent\n        this.onInit(config);\n    }\n    /**\n     * Export items.\n     * @param items\n     * @param resultCallback\n     */\n    CollectorExporterBase.prototype.export = function (items, resultCallback) {\n        if (this._isShutdown) {\n            resultCallback({\n                code: ExportResultCode.FAILED,\n                error: new Error('Exporter has been shutdown'),\n            });\n            return;\n        }\n        if (this._sendingPromises.length >= this._concurrencyLimit) {\n            resultCallback({\n                code: ExportResultCode.FAILED,\n                error: new Error('Concurrent export limit reached'),\n            });\n            return;\n        }\n        this._export(items)\n            .then(function () {\n            resultCallback({ code: ExportResultCode.SUCCESS });\n        })\n            .catch(function (error) {\n            resultCallback({ code: ExportResultCode.FAILED, error: error });\n        });\n    };\n    CollectorExporterBase.prototype._export = function (items) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            try {\n                diag.debug('items to be sent', items);\n                _this.send(items, resolve, reject);\n            }\n            catch (e) {\n                reject(e);\n            }\n        });\n    };\n    /**\n     * Shutdown the exporter.\n     */\n    CollectorExporterBase.prototype.shutdown = function () {\n        var _this = this;\n        if (this._isShutdown) {\n            diag.debug('shutdown already started');\n            return this._shuttingDownPromise;\n        }\n        this._isShutdown = true;\n        diag.debug('shutdown started');\n        this._shuttingDownPromise = new Promise(function (resolve, reject) {\n            Promise.resolve()\n                .then(function () {\n                return _this.onShutdown();\n            })\n                .then(function () {\n                return Promise.all(_this._sendingPromises);\n            })\n                .then(function () {\n                resolve();\n            })\n                .catch(function (e) {\n                reject(e);\n            });\n        });\n        return this._shuttingDownPromise;\n    };\n    return CollectorExporterBase;\n}());\nexport { CollectorExporterBase };\n//# sourceMappingURL=CollectorExporterBase.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isSpanContextValid, TraceFlags, trace, } from '@opentelemetry/api';\nimport { globalErrorHandler } from '../../common/global-error-handler';\nimport { AlwaysOffSampler } from './AlwaysOffSampler';\nimport { AlwaysOnSampler } from './AlwaysOnSampler';\n/**\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nvar ParentBasedSampler = /** @class */ (function () {\n    function ParentBasedSampler(config) {\n        var _a, _b, _c, _d;\n        this._root = config.root;\n        if (!this._root) {\n            globalErrorHandler(new Error('ParentBasedSampler must have a root sampler configured'));\n            this._root = new AlwaysOnSampler();\n        }\n        this._remoteParentSampled =\n            (_a = config.remoteParentSampled) !== null && _a !== void 0 ? _a : new AlwaysOnSampler();\n        this._remoteParentNotSampled =\n            (_b = config.remoteParentNotSampled) !== null && _b !== void 0 ? _b : new AlwaysOffSampler();\n        this._localParentSampled =\n            (_c = config.localParentSampled) !== null && _c !== void 0 ? _c : new AlwaysOnSampler();\n        this._localParentNotSampled =\n            (_d = config.localParentNotSampled) !== null && _d !== void 0 ? _d : new AlwaysOffSampler();\n    }\n    ParentBasedSampler.prototype.shouldSample = function (context, traceId, spanName, spanKind, attributes, links) {\n        var parentContext = trace.getSpanContext(context);\n        if (!parentContext || !isSpanContextValid(parentContext)) {\n            return this._root.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.isRemote) {\n            if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n                return this._remoteParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n            }\n            return this._remoteParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n            return this._localParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        return this._localParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    };\n    ParentBasedSampler.prototype.toString = function () {\n        return \"ParentBased{root=\" + this._root.toString() + \", remoteParentSampled=\" + this._remoteParentSampled.toString() + \", remoteParentNotSampled=\" + this._remoteParentNotSampled.toString() + \", localParentSampled=\" + this._localParentSampled.toString() + \", localParentNotSampled=\" + this._localParentNotSampled.toString() + \"}\";\n    };\n    return ParentBasedSampler;\n}());\nexport { ParentBasedSampler };\n//# sourceMappingURL=ParentBasedSampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SamplingDecision, isValidTraceId, } from '@opentelemetry/api';\n/** Sampler that samples a given fraction of traces based of trace id deterministically. */\nvar TraceIdRatioBasedSampler = /** @class */ (function () {\n    function TraceIdRatioBasedSampler(_ratio) {\n        if (_ratio === void 0) { _ratio = 0; }\n        this._ratio = _ratio;\n        this._ratio = this._normalize(_ratio);\n        this._upperBound = Math.floor(this._ratio * 0xffffffff);\n    }\n    TraceIdRatioBasedSampler.prototype.shouldSample = function (context, traceId) {\n        return {\n            decision: isValidTraceId(traceId) && this._accumulate(traceId) < this._upperBound\n                ? SamplingDecision.RECORD_AND_SAMPLED\n                : SamplingDecision.NOT_RECORD,\n        };\n    };\n    TraceIdRatioBasedSampler.prototype.toString = function () {\n        return \"TraceIdRatioBased{\" + this._ratio + \"}\";\n    };\n    TraceIdRatioBasedSampler.prototype._normalize = function (ratio) {\n        if (typeof ratio !== 'number' || isNaN(ratio))\n            return 0;\n        return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n    };\n    TraceIdRatioBasedSampler.prototype._accumulate = function (traceId) {\n        var accumulation = 0;\n        for (var i = 0; i < traceId.length / 8; i++) {\n            var pos = i * 8;\n            var part = parseInt(traceId.slice(pos, pos + 8), 16);\n            accumulation = (accumulation ^ part) >>> 0;\n        }\n        return accumulation;\n    };\n    return TraceIdRatioBasedSampler;\n}());\nexport { TraceIdRatioBasedSampler };\n//# sourceMappingURL=TraceIdRatioBasedSampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar _a;\nimport { SpanKind } from '@opentelemetry/api';\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nexport var opentelemetryProto;\n(function (opentelemetryProto) {\n    var metrics;\n    (function (metrics) {\n        var v1;\n        (function (v1) {\n            var AggregationTemporality;\n            (function (AggregationTemporality) {\n                // UNSPECIFIED is the default AggregationTemporality, it MUST not be used.\n                AggregationTemporality[AggregationTemporality[\"AGGREGATION_TEMPORALITY_UNSPECIFIED\"] = 0] = \"AGGREGATION_TEMPORALITY_UNSPECIFIED\";\n                // DELTA is an AggregationTemporality for a metric aggregator which reports\n                // changes since last report time. Successive metrics contain aggregation of\n                // values from continuous and non-overlapping intervals.\n                //\n                // The values for a DELTA metric are based only on the time interval\n                // associated with one measurement cycle. There is no dependency on\n                // previous measurements like is the case for CUMULATIVE metrics.\n                //\n                // For example, consider a system measuring the number of requests that\n                // it receives and reports the sum of these requests every second as a\n                // DELTA metric:\n                //\n                //   1. The system starts receiving at time=t_0.\n                //   2. A request is received, the system measures 1 request.\n                //   3. A request is received, the system measures 1 request.\n                //   4. A request is received, the system measures 1 request.\n                //   5. The 1 second collection cycle ends. A metric is exported for the\n                //      number of requests received over the interval of time t_0 to\n                //      t_0+1 with a value of 3.\n                //   6. A request is received, the system measures 1 request.\n                //   7. A request is received, the system measures 1 request.\n                //   8. The 1 second collection cycle ends. A metric is exported for the\n                //      number of requests received over the interval of time t_0+1 to\n                //      t_0+2 with a value of 2.\n                AggregationTemporality[AggregationTemporality[\"AGGREGATION_TEMPORALITY_DELTA\"] = 1] = \"AGGREGATION_TEMPORALITY_DELTA\";\n                // CUMULATIVE is an AggregationTemporality for a metric aggregator which\n                // reports changes since a fixed start time. This means that current values\n                // of a CUMULATIVE metric depend on all previous measurements since the\n                // start time. Because of this, the sender is required to retain this state\n                // in some form. If this state is lost or invalidated, the CUMULATIVE metric\n                // values MUST be reset and a new fixed start time following the last\n                // reported measurement time sent MUST be used.\n                //\n                // For example, consider a system measuring the number of requests that\n                // it receives and reports the sum of these requests every second as a\n                // CUMULATIVE metric:\n                //\n                //   1. The system starts receiving at time=t_0.\n                //   2. A request is received, the system measures 1 request.\n                //   3. A request is received, the system measures 1 request.\n                //   4. A request is received, the system measures 1 request.\n                //   5. The 1 second collection cycle ends. A metric is exported for the\n                //      number of requests received over the interval of time t_0 to\n                //      t_0+1 with a value of 3.\n                //   6. A request is received, the system measures 1 request.\n                //   7. A request is received, the system measures 1 request.\n                //   8. The 1 second collection cycle ends. A metric is exported for the\n                //      number of requests received over the interval of time t_0 to\n                //      t_0+2 with a value of 5.\n                //   9. The system experiences a fault and loses state.\n                //   10. The system recovers and resumes receiving at time=t_1.\n                //   11. A request is received, the system measures 1 request.\n                //   12. The 1 second collection cycle ends. A metric is exported for the\n                //      number of requests received over the interval of time t_1 to\n                //      t_0+1 with a value of 1.\n                //\n                // Note: Even though, when reporting changes since last report time, using\n                // CUMULATIVE is valid, it is not recommended. This may cause problems for\n                // systems that do not use start_time to determine when the aggregation\n                // value was reset (e.g. Prometheus).\n                AggregationTemporality[AggregationTemporality[\"AGGREGATION_TEMPORALITY_CUMULATIVE\"] = 2] = \"AGGREGATION_TEMPORALITY_CUMULATIVE\";\n            })(AggregationTemporality = v1.AggregationTemporality || (v1.AggregationTemporality = {}));\n        })(v1 = metrics.v1 || (metrics.v1 = {}));\n    })(metrics = opentelemetryProto.metrics || (opentelemetryProto.metrics = {}));\n    var trace;\n    (function (trace) {\n        var v1;\n        (function (v1) {\n            var ConstantSampler;\n            (function (ConstantSampler) {\n                var ConstantDecision;\n                (function (ConstantDecision) {\n                    ConstantDecision[ConstantDecision[\"ALWAYS_OFF\"] = 0] = \"ALWAYS_OFF\";\n                    ConstantDecision[ConstantDecision[\"ALWAYS_ON\"] = 1] = \"ALWAYS_ON\";\n                    ConstantDecision[ConstantDecision[\"ALWAYS_PARENT\"] = 2] = \"ALWAYS_PARENT\";\n                })(ConstantDecision = ConstantSampler.ConstantDecision || (ConstantSampler.ConstantDecision = {}));\n            })(ConstantSampler = v1.ConstantSampler || (v1.ConstantSampler = {}));\n            var Span;\n            (function (Span) {\n                var SpanKind;\n                (function (SpanKind) {\n                    SpanKind[SpanKind[\"SPAN_KIND_UNSPECIFIED\"] = 0] = \"SPAN_KIND_UNSPECIFIED\";\n                    SpanKind[SpanKind[\"SPAN_KIND_INTERNAL\"] = 1] = \"SPAN_KIND_INTERNAL\";\n                    SpanKind[SpanKind[\"SPAN_KIND_SERVER\"] = 2] = \"SPAN_KIND_SERVER\";\n                    SpanKind[SpanKind[\"SPAN_KIND_CLIENT\"] = 3] = \"SPAN_KIND_CLIENT\";\n                    SpanKind[SpanKind[\"SPAN_KIND_PRODUCER\"] = 4] = \"SPAN_KIND_PRODUCER\";\n                    SpanKind[SpanKind[\"SPAN_KIND_CONSUMER\"] = 5] = \"SPAN_KIND_CONSUMER\";\n                })(SpanKind = Span.SpanKind || (Span.SpanKind = {}));\n            })(Span = v1.Span || (v1.Span = {}));\n        })(v1 = trace.v1 || (trace.v1 = {}));\n    })(trace = opentelemetryProto.trace || (opentelemetryProto.trace = {}));\n    var common;\n    (function (common) {\n        var v1;\n        (function (v1) {\n            var ValueType;\n            (function (ValueType) {\n                ValueType[ValueType[\"STRING\"] = 0] = \"STRING\";\n                ValueType[ValueType[\"INT\"] = 1] = \"INT\";\n                ValueType[ValueType[\"DOUBLE\"] = 2] = \"DOUBLE\";\n                ValueType[ValueType[\"BOOL\"] = 3] = \"BOOL\";\n            })(ValueType = v1.ValueType || (v1.ValueType = {}));\n        })(v1 = common.v1 || (common.v1 = {}));\n    })(common = opentelemetryProto.common || (opentelemetryProto.common = {}));\n})(opentelemetryProto || (opentelemetryProto = {}));\n/**\n * Interface for handling error\n */\nvar CollectorExporterError = /** @class */ (function (_super) {\n    __extends(CollectorExporterError, _super);\n    function CollectorExporterError(message, code, data) {\n        var _this = _super.call(this, message) || this;\n        _this.name = 'CollectorExporterError';\n        _this.data = data;\n        _this.code = code;\n        return _this;\n    }\n    return CollectorExporterError;\n}(Error));\nexport { CollectorExporterError };\n/**\n * Mapping between api SpanKind and proto SpanKind\n */\nexport var COLLECTOR_SPAN_KIND_MAPPING = (_a = {},\n    _a[SpanKind.INTERNAL] = opentelemetryProto.trace.v1.Span.SpanKind.SPAN_KIND_INTERNAL,\n    _a[SpanKind.SERVER] = opentelemetryProto.trace.v1.Span.SpanKind.SPAN_KIND_SERVER,\n    _a[SpanKind.CLIENT] = opentelemetryProto.trace.v1.Span.SpanKind.SPAN_KIND_CLIENT,\n    _a[SpanKind.PRODUCER] = opentelemetryProto.trace.v1.Span.SpanKind.SPAN_KIND_PRODUCER,\n    _a[SpanKind.CONSUMER] = opentelemetryProto.trace.v1.Span.SpanKind.SPAN_KIND_CONSUMER,\n    _a);\n//# sourceMappingURL=types.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { CollectorExporterBase } from '../../CollectorExporterBase';\nimport { parseHeaders } from '../../util';\nimport { sendWithBeacon, sendWithXhr } from './util';\nimport { diag } from '@opentelemetry/api';\nimport { getEnv, baggageUtils } from '@opentelemetry/core';\n/**\n * Collector Metric Exporter abstract base class\n */\nvar CollectorExporterBrowserBase = /** @class */ (function (_super) {\n    __extends(CollectorExporterBrowserBase, _super);\n    /**\n     * @param config\n     */\n    function CollectorExporterBrowserBase(config) {\n        if (config === void 0) { config = {}; }\n        var _this = _super.call(this, config) || this;\n        _this._useXHR = false;\n        _this._useXHR =\n            !!config.headers || typeof navigator.sendBeacon !== 'function';\n        if (_this._useXHR) {\n            _this._headers = Object.assign({}, parseHeaders(config.headers), baggageUtils.parseKeyPairsIntoRecord(getEnv().OTEL_EXPORTER_OTLP_HEADERS));\n        }\n        else {\n            _this._headers = {};\n        }\n        return _this;\n    }\n    CollectorExporterBrowserBase.prototype.onInit = function () {\n        window.addEventListener('unload', this.shutdown);\n    };\n    CollectorExporterBrowserBase.prototype.onShutdown = function () {\n        window.removeEventListener('unload', this.shutdown);\n    };\n    CollectorExporterBrowserBase.prototype.send = function (items, onSuccess, onError) {\n        var _this = this;\n        if (this._isShutdown) {\n            diag.debug('Shutdown already started. Cannot send objects');\n            return;\n        }\n        var serviceRequest = this.convert(items);\n        var body = JSON.stringify(serviceRequest);\n        var promise = new Promise(function (resolve) {\n            var _onSuccess = function () {\n                onSuccess();\n                _onFinish();\n            };\n            var _onError = function (error) {\n                onError(error);\n                _onFinish();\n            };\n            var _onFinish = function () {\n                resolve();\n                var index = _this._sendingPromises.indexOf(promise);\n                _this._sendingPromises.splice(index, 1);\n            };\n            if (_this._useXHR) {\n                sendWithXhr(body, _this.url, _this._headers, _onSuccess, _onError);\n            }\n            else {\n                sendWithBeacon(body, _this.url, _onSuccess, _onError);\n            }\n        });\n        this._sendingPromises.push(promise);\n    };\n    return CollectorExporterBrowserBase;\n}(CollectorExporterBase));\nexport { CollectorExporterBrowserBase };\n//# sourceMappingURL=CollectorExporterBrowserBase.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\n/**\n * Parses headers from config leaving only those that have defined values\n * @param partialHeaders\n */\nexport function parseHeaders(partialHeaders) {\n    if (partialHeaders === void 0) { partialHeaders = {}; }\n    var headers = {};\n    Object.entries(partialHeaders).forEach(function (_a) {\n        var key = _a[0], value = _a[1];\n        if (typeof value !== 'undefined') {\n            headers[key] = String(value);\n        }\n        else {\n            diag.warn(\"Header \\\"\" + key + \"\\\" has wrong value and will be ignored\");\n        }\n    });\n    return headers;\n}\n//# sourceMappingURL=util.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport * as collectorTypes from '../../types';\n/**\n * Send metrics/spans using browser navigator.sendBeacon\n * @param body\n * @param onSuccess\n * @param onError\n */\nexport function sendWithBeacon(body, url, onSuccess, onError) {\n    if (navigator.sendBeacon(url, body)) {\n        diag.debug('sendBeacon - can send', body);\n        onSuccess();\n    }\n    else {\n        var error = new collectorTypes.CollectorExporterError(\"sendBeacon - cannot send \" + body);\n        onError(error);\n    }\n}\n/**\n * function to send metrics/spans using browser XMLHttpRequest\n *     used when navigator.sendBeacon is not available\n * @param body\n * @param onSuccess\n * @param onError\n */\nexport function sendWithXhr(body, url, headers, onSuccess, onError) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', url);\n    xhr.setRequestHeader('Accept', 'application/json');\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    Object.entries(headers).forEach(function (_a) {\n        var k = _a[0], v = _a[1];\n        xhr.setRequestHeader(k, v);\n    });\n    xhr.send(body);\n    xhr.onreadystatechange = function () {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n            if (xhr.status >= 200 && xhr.status <= 299) {\n                diag.debug('xhr success', body);\n                onSuccess();\n            }\n            else {\n                var error = new collectorTypes.CollectorExporterError(\"Failed to export with XHR (status: \" + xhr.status + \")\", xhr.status);\n                onError(error);\n            }\n        }\n    };\n}\n//# sourceMappingURL=util.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as core from '@opentelemetry/core';\nimport { COLLECTOR_SPAN_KIND_MAPPING, opentelemetryProto, } from './types';\nvar MAX_INTEGER_VALUE = 2147483647;\nvar MIN_INTEGER_VALUE = -2147483648;\n/**\n * Converts attributes to KeyValue array\n * @param attributes\n */\nexport function toCollectorAttributes(attributes) {\n    return Object.keys(attributes).map(function (key) {\n        return toCollectorAttributeKeyValue(key, attributes[key]);\n    });\n}\n/**\n * Converts array of unknown value to ArrayValue\n * @param values\n */\nexport function toCollectorArrayValue(values) {\n    return {\n        values: values.map(function (value) { return toCollectorAnyValue(value); }),\n    };\n}\n/**\n * Converts attributes to KeyValueList\n * @param attributes\n */\nexport function toCollectorKeyValueList(attributes) {\n    return {\n        values: toCollectorAttributes(attributes),\n    };\n}\n/**\n * Converts key and unknown value to KeyValue\n * @param value event value\n */\nexport function toCollectorAttributeKeyValue(key, value) {\n    var anyValue = toCollectorAnyValue(value);\n    return {\n        key: key,\n        value: anyValue,\n    };\n}\n/**\n * Converts unknown value to AnyValue\n * @param value\n */\nexport function toCollectorAnyValue(value) {\n    var anyValue = {};\n    if (typeof value === 'string') {\n        anyValue.stringValue = value;\n    }\n    else if (typeof value === 'boolean') {\n        anyValue.boolValue = value;\n    }\n    else if (typeof value === 'number' &&\n        value <= MAX_INTEGER_VALUE &&\n        value >= MIN_INTEGER_VALUE &&\n        Number.isInteger(value)) {\n        anyValue.intValue = value;\n    }\n    else if (typeof value === 'number') {\n        anyValue.doubleValue = value;\n    }\n    else if (Array.isArray(value)) {\n        anyValue.arrayValue = toCollectorArrayValue(value);\n    }\n    else if (value) {\n        anyValue.kvlistValue = toCollectorKeyValueList(value);\n    }\n    return anyValue;\n}\n/**\n *\n * Converts events\n * @param events array of events\n */\nexport function toCollectorEvents(timedEvents) {\n    return timedEvents.map(function (timedEvent) {\n        var timeUnixNano = core.hrTimeToNanoseconds(timedEvent.time);\n        var name = timedEvent.name;\n        var attributes = toCollectorAttributes(timedEvent.attributes || {});\n        var droppedAttributesCount = 0;\n        var protoEvent = {\n            timeUnixNano: timeUnixNano,\n            name: name,\n            attributes: attributes,\n            droppedAttributesCount: droppedAttributesCount,\n        };\n        return protoEvent;\n    });\n}\n/**\n * Converts links\n * @param span\n * @param useHex - if ids should be kept as hex without converting to base64\n */\nfunction toCollectorLinks(span, useHex) {\n    return span.links.map(function (link) {\n        var protoLink = {\n            traceId: useHex\n                ? link.context.traceId\n                : core.hexToBase64(link.context.traceId),\n            spanId: useHex\n                ? link.context.spanId\n                : core.hexToBase64(link.context.spanId),\n            attributes: toCollectorAttributes(link.attributes || {}),\n            droppedAttributesCount: 0,\n        };\n        return protoLink;\n    });\n}\n/**\n * Converts span\n * @param span\n * @param useHex - if ids should be kept as hex without converting to base64\n */\nexport function toCollectorSpan(span, useHex) {\n    return {\n        traceId: useHex\n            ? span.spanContext().traceId\n            : core.hexToBase64(span.spanContext().traceId),\n        spanId: useHex\n            ? span.spanContext().spanId\n            : core.hexToBase64(span.spanContext().spanId),\n        parentSpanId: span.parentSpanId\n            ? useHex\n                ? span.parentSpanId\n                : core.hexToBase64(span.parentSpanId)\n            : undefined,\n        traceState: toCollectorTraceState(span.spanContext().traceState),\n        name: span.name,\n        kind: toCollectorKind(span.kind),\n        startTimeUnixNano: core.hrTimeToNanoseconds(span.startTime),\n        endTimeUnixNano: core.hrTimeToNanoseconds(span.endTime),\n        attributes: toCollectorAttributes(span.attributes),\n        droppedAttributesCount: 0,\n        events: toCollectorEvents(span.events),\n        droppedEventsCount: 0,\n        status: toCollectorStatus(span.status),\n        links: toCollectorLinks(span, useHex),\n        droppedLinksCount: 0,\n    };\n}\n/**\n * Converts status\n * @param status\n */\nexport function toCollectorStatus(status) {\n    var spanStatus = {\n        code: status.code,\n    };\n    if (typeof status.message !== 'undefined') {\n        spanStatus.message = status.message;\n    }\n    return spanStatus;\n}\n/**\n * Converts resource\n * @param resource\n * @param additionalAttributes\n */\nexport function toCollectorResource(resource, additionalAttributes) {\n    if (additionalAttributes === void 0) { additionalAttributes = {}; }\n    var attr = Object.assign({}, additionalAttributes, resource ? resource.attributes : {});\n    var resourceProto = {\n        attributes: toCollectorAttributes(attr),\n        droppedAttributesCount: 0,\n    };\n    return resourceProto;\n}\n/**\n * Converts span kind\n * @param kind\n */\nexport function toCollectorKind(kind) {\n    var collectorKind = COLLECTOR_SPAN_KIND_MAPPING[kind];\n    return typeof collectorKind === 'number'\n        ? collectorKind\n        : opentelemetryProto.trace.v1.Span.SpanKind.SPAN_KIND_UNSPECIFIED;\n}\n/**\n * Converts traceState\n * @param traceState\n */\nexport function toCollectorTraceState(traceState) {\n    if (!traceState)\n        return undefined;\n    return traceState.serialize();\n}\n/**\n * Prepares trace service request to be sent to collector\n * @param spans spans\n * @param collectorExporterBase\n * @param useHex - if ids should be kept as hex without converting to base64\n */\nexport function toCollectorExportTraceServiceRequest(spans, collectorTraceExporterBase, useHex) {\n    var groupedSpans = groupSpansByResourceAndLibrary(spans);\n    var additionalAttributes = Object.assign({}, collectorTraceExporterBase.attributes);\n    return {\n        resourceSpans: toCollectorResourceSpans(groupedSpans, additionalAttributes, useHex),\n    };\n}\n/**\n * Takes an array of spans and groups them by resource and instrumentation\n * library\n * @param spans spans\n */\nexport function groupSpansByResourceAndLibrary(spans) {\n    return spans.reduce(function (spanMap, span) {\n        //group by resource\n        var resourceSpans = spanMap.get(span.resource);\n        if (!resourceSpans) {\n            resourceSpans = new Map();\n            spanMap.set(span.resource, resourceSpans);\n        }\n        //group by instrumentation library\n        var libSpans = resourceSpans.get(span.instrumentationLibrary);\n        if (!libSpans) {\n            libSpans = new Array();\n            resourceSpans.set(span.instrumentationLibrary, libSpans);\n        }\n        libSpans.push(span);\n        return spanMap;\n    }, new Map());\n}\n/**\n * Convert to InstrumentationLibrarySpans\n * @param instrumentationLibrary\n * @param spans\n * @param useHex - if ids should be kept as hex without converting to base64\n */\nfunction toCollectorInstrumentationLibrarySpans(instrumentationLibrary, spans, useHex) {\n    return {\n        spans: spans.map(function (span) { return toCollectorSpan(span, useHex); }),\n        instrumentationLibrary: instrumentationLibrary,\n    };\n}\n/**\n * Returns a list of resource spans which will be exported to the collector\n * @param groupedSpans\n * @param baseAttributes\n * @param useHex - if ids should be kept as hex without converting to base64\n */\nfunction toCollectorResourceSpans(groupedSpans, baseAttributes, useHex) {\n    return Array.from(groupedSpans, function (_a) {\n        var resource = _a[0], libSpans = _a[1];\n        return {\n            resource: toCollectorResource(resource, baseAttributes),\n            instrumentationLibrarySpans: Array.from(libSpans, function (_a) {\n                var instrumentationLibrary = _a[0], spans = _a[1];\n                return toCollectorInstrumentationLibrarySpans(instrumentationLibrary, spans, useHex);\n            }),\n        };\n    });\n}\n//# sourceMappingURL=transform.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { CollectorExporterBrowserBase } from './CollectorExporterBrowserBase';\nimport { toCollectorExportTraceServiceRequest } from '../../transform';\nimport { getEnv, baggageUtils } from '@opentelemetry/core';\nvar DEFAULT_COLLECTOR_URL = 'http://localhost:55681/v1/traces';\n/**\n * Collector Trace Exporter for Web\n */\nvar CollectorTraceExporter = /** @class */ (function (_super) {\n    __extends(CollectorTraceExporter, _super);\n    function CollectorTraceExporter(config) {\n        if (config === void 0) { config = {}; }\n        var _this = _super.call(this, config) || this;\n        _this._headers = Object.assign(_this._headers, baggageUtils.parseKeyPairsIntoRecord(getEnv().OTEL_EXPORTER_OTLP_TRACES_HEADERS));\n        return _this;\n    }\n    CollectorTraceExporter.prototype.convert = function (spans) {\n        return toCollectorExportTraceServiceRequest(spans, this, true);\n    };\n    CollectorTraceExporter.prototype.getDefaultUrl = function (config) {\n        return typeof config.url === 'string'\n            ? config.url\n            : getEnv().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT.length > 0\n                ? getEnv().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT\n                : getEnv().OTEL_EXPORTER_OTLP_ENDPOINT.length > 0\n                    ? getEnv().OTEL_EXPORTER_OTLP_ENDPOINT\n                    : DEFAULT_COLLECTOR_URL;\n    };\n    return CollectorTraceExporter;\n}(CollectorExporterBrowserBase));\nexport { CollectorTraceExporter };\n//# sourceMappingURL=CollectorTraceExporter.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The Type of value. It describes how the data is reported. */\nexport var ValueType;\n(function (ValueType) {\n    ValueType[ValueType[\"INT\"] = 0] = \"INT\";\n    ValueType[ValueType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n})(ValueType || (ValueType = {}));\n/** The kind of aggregator. */\nexport var AggregationTemporality;\n(function (AggregationTemporality) {\n    AggregationTemporality[AggregationTemporality[\"AGGREGATION_TEMPORALITY_UNSPECIFIED\"] = 0] = \"AGGREGATION_TEMPORALITY_UNSPECIFIED\";\n    AggregationTemporality[AggregationTemporality[\"AGGREGATION_TEMPORALITY_DELTA\"] = 1] = \"AGGREGATION_TEMPORALITY_DELTA\";\n    AggregationTemporality[AggregationTemporality[\"AGGREGATION_TEMPORALITY_CUMULATIVE\"] = 2] = \"AGGREGATION_TEMPORALITY_CUMULATIVE\";\n})(AggregationTemporality || (AggregationTemporality = {}));\n//# sourceMappingURL=Metric.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\nvar NoopMeter = /** @class */ (function () {\n    function NoopMeter() {\n    }\n    /**\n     * Returns constant noop value recorder.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     */\n    NoopMeter.prototype.createValueRecorder = function (_name, _options) {\n        return NOOP_VALUE_RECORDER_METRIC;\n    };\n    /**\n     * Returns a constant noop counter.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     */\n    NoopMeter.prototype.createCounter = function (_name, _options) {\n        return NOOP_COUNTER_METRIC;\n    };\n    /**\n     * Returns a constant noop UpDownCounter.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     */\n    NoopMeter.prototype.createUpDownCounter = function (_name, _options) {\n        return NOOP_COUNTER_METRIC;\n    };\n    /**\n     * Returns constant noop value observer.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     * @param [callback] the value observer callback\n     */\n    NoopMeter.prototype.createValueObserver = function (_name, _options, _callback) {\n        return NOOP_VALUE_OBSERVER_METRIC;\n    };\n    /**\n     * Returns constant noop sum observer.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     * @param [callback] the sum observer callback\n     */\n    NoopMeter.prototype.createSumObserver = function (_name, _options, _callback) {\n        return NOOP_SUM_OBSERVER_METRIC;\n    };\n    /**\n     * Returns constant noop up down sum observer.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     * @param [callback] the up down sum observer callback\n     */\n    NoopMeter.prototype.createUpDownSumObserver = function (_name, _options, _callback) {\n        return NOOP_UP_DOWN_SUM_OBSERVER_METRIC;\n    };\n    /**\n     * Returns constant noop batch observer.\n     * @param name the name of the metric.\n     * @param callback the batch observer callback\n     */\n    NoopMeter.prototype.createBatchObserver = function (_callback) {\n        return NOOP_BATCH_OBSERVER;\n    };\n    return NoopMeter;\n}());\nexport { NoopMeter };\nvar NoopMetric = /** @class */ (function () {\n    function NoopMetric(instrument) {\n        this._instrument = instrument;\n    }\n    /**\n     * Returns a Bound Instrument associated with specified Labels.\n     * It is recommended to keep a reference to the Bound Instrument instead of\n     * always calling this method for every operations.\n     * @param labels key-values pairs that are associated with a specific metric\n     *     that you want to record.\n     */\n    NoopMetric.prototype.bind = function (_labels) {\n        return this._instrument;\n    };\n    /**\n     * Removes the Binding from the metric, if it is present.\n     * @param labels key-values pairs that are associated with a specific metric.\n     */\n    NoopMetric.prototype.unbind = function (_labels) {\n        return;\n    };\n    /**\n     * Clears all timeseries from the Metric.\n     */\n    NoopMetric.prototype.clear = function () {\n        return;\n    };\n    return NoopMetric;\n}());\nexport { NoopMetric };\nvar NoopCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopCounterMetric, _super);\n    function NoopCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopCounterMetric.prototype.add = function (value, labels) {\n        this.bind(labels).add(value);\n    };\n    return NoopCounterMetric;\n}(NoopMetric));\nexport { NoopCounterMetric };\nvar NoopValueRecorderMetric = /** @class */ (function (_super) {\n    __extends(NoopValueRecorderMetric, _super);\n    function NoopValueRecorderMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopValueRecorderMetric.prototype.record = function (value, labels) {\n        this.bind(labels).record(value);\n    };\n    return NoopValueRecorderMetric;\n}(NoopMetric));\nexport { NoopValueRecorderMetric };\nvar NoopBaseObserverMetric = /** @class */ (function (_super) {\n    __extends(NoopBaseObserverMetric, _super);\n    function NoopBaseObserverMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopBaseObserverMetric.prototype.observation = function () {\n        return {\n            observer: this,\n            value: 0,\n        };\n    };\n    return NoopBaseObserverMetric;\n}(NoopMetric));\nexport { NoopBaseObserverMetric };\nvar NoopBatchObserver = /** @class */ (function () {\n    function NoopBatchObserver() {\n    }\n    return NoopBatchObserver;\n}());\nexport { NoopBatchObserver };\nvar NoopBoundCounter = /** @class */ (function () {\n    function NoopBoundCounter() {\n    }\n    NoopBoundCounter.prototype.add = function (_value) {\n        return;\n    };\n    return NoopBoundCounter;\n}());\nexport { NoopBoundCounter };\nvar NoopBoundValueRecorder = /** @class */ (function () {\n    function NoopBoundValueRecorder() {\n    }\n    NoopBoundValueRecorder.prototype.record = function (_value, _baggage, _spanContext) {\n        return;\n    };\n    return NoopBoundValueRecorder;\n}());\nexport { NoopBoundValueRecorder };\nvar NoopBoundBaseObserver = /** @class */ (function () {\n    function NoopBoundBaseObserver() {\n    }\n    NoopBoundBaseObserver.prototype.update = function (_value) { };\n    return NoopBoundBaseObserver;\n}());\nexport { NoopBoundBaseObserver };\nexport var NOOP_METER = new NoopMeter();\nexport var NOOP_BOUND_COUNTER = new NoopBoundCounter();\nexport var NOOP_COUNTER_METRIC = new NoopCounterMetric(NOOP_BOUND_COUNTER);\nexport var NOOP_BOUND_VALUE_RECORDER = new NoopBoundValueRecorder();\nexport var NOOP_VALUE_RECORDER_METRIC = new NoopValueRecorderMetric(NOOP_BOUND_VALUE_RECORDER);\nexport var NOOP_BOUND_BASE_OBSERVER = new NoopBoundBaseObserver();\nexport var NOOP_VALUE_OBSERVER_METRIC = new NoopBaseObserverMetric(NOOP_BOUND_BASE_OBSERVER);\nexport var NOOP_UP_DOWN_SUM_OBSERVER_METRIC = new NoopBaseObserverMetric(NOOP_BOUND_BASE_OBSERVER);\nexport var NOOP_SUM_OBSERVER_METRIC = new NoopBaseObserverMetric(NOOP_BOUND_BASE_OBSERVER);\nexport var NOOP_BATCH_OBSERVER = new NoopBatchObserver();\n//# sourceMappingURL=NoopMeter.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NOOP_METER } from './NoopMeter';\n/**\n * An implementation of the {@link MeterProvider} which returns an impotent Meter\n * for all calls to `getMeter`\n */\nvar NoopMeterProvider = /** @class */ (function () {\n    function NoopMeterProvider() {\n    }\n    NoopMeterProvider.prototype.getMeter = function (_name, _version) {\n        return NOOP_METER;\n    };\n    return NoopMeterProvider;\n}());\nexport { NoopMeterProvider };\nexport var NOOP_METER_PROVIDER = new NoopMeterProvider();\n//# sourceMappingURL=NoopMeterProvider.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef\nexport var _globalThis = typeof globalThis === 'object' ? globalThis : window;\n//# sourceMappingURL=globalThis.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _globalThis } from '../platform';\nexport var GLOBAL_METRICS_API_KEY = Symbol.for('io.opentelemetry.js.api.metrics');\nexport var _global = _globalThis;\n/**\n * Make a function which accepts a version integer and returns the instance of an API if the version\n * is compatible, or a fallback version (usually NOOP) if it is not.\n *\n * @param requiredVersion Backwards compatibility version which is required to return the instance\n * @param instance Instance which should be returned if the required version is compatible\n * @param fallback Fallback instance, usually NOOP, which will be returned if the required version is not compatible\n */\nexport function makeGetter(requiredVersion, instance, fallback) {\n    return function (version) {\n        return version === requiredVersion ? instance : fallback;\n    };\n}\n/**\n * A number which should be incremented each time a backwards incompatible\n * change is made to the API. This number is used when an API package\n * attempts to access the global API to ensure it is getting a compatible\n * version. If the global API is not compatible with the API package\n * attempting to get it, a NOOP API implementation will be returned.\n */\nexport var API_BACKWARDS_COMPATIBILITY_VERSION = 3;\n//# sourceMappingURL=global-utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The kind of metric. */\nexport var MetricKind;\n(function (MetricKind) {\n    MetricKind[MetricKind[\"COUNTER\"] = 0] = \"COUNTER\";\n    MetricKind[MetricKind[\"UP_DOWN_COUNTER\"] = 1] = \"UP_DOWN_COUNTER\";\n    MetricKind[MetricKind[\"VALUE_RECORDER\"] = 2] = \"VALUE_RECORDER\";\n    MetricKind[MetricKind[\"SUM_OBSERVER\"] = 3] = \"SUM_OBSERVER\";\n    MetricKind[MetricKind[\"UP_DOWN_SUM_OBSERVER\"] = 4] = \"UP_DOWN_SUM_OBSERVER\";\n    MetricKind[MetricKind[\"VALUE_OBSERVER\"] = 5] = \"VALUE_OBSERVER\";\n    MetricKind[MetricKind[\"BATCH_OBSERVER\"] = 6] = \"BATCH_OBSERVER\";\n})(MetricKind || (MetricKind = {}));\nexport var MetricKindValues = Object.values(MetricKind);\n/** The kind of aggregator. */\nexport var AggregatorKind;\n(function (AggregatorKind) {\n    AggregatorKind[AggregatorKind[\"SUM\"] = 0] = \"SUM\";\n    AggregatorKind[AggregatorKind[\"LAST_VALUE\"] = 1] = \"LAST_VALUE\";\n    AggregatorKind[AggregatorKind[\"HISTOGRAM\"] = 2] = \"HISTOGRAM\";\n})(AggregatorKind || (AggregatorKind = {}));\n//# sourceMappingURL=types.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NOOP_METER_PROVIDER } from '../NoopMeterProvider';\nimport { API_BACKWARDS_COMPATIBILITY_VERSION, GLOBAL_METRICS_API_KEY, makeGetter, _global, } from './global-utils';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\nvar MetricsAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function MetricsAPI() {\n    }\n    /** Get the singleton instance of the Metrics API */\n    MetricsAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new MetricsAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current global meter. Returns the initialized global meter provider.\n     */\n    MetricsAPI.prototype.setGlobalMeterProvider = function (provider) {\n        if (_global[GLOBAL_METRICS_API_KEY]) {\n            // global meter provider has already been set\n            return this.getMeterProvider();\n        }\n        _global[GLOBAL_METRICS_API_KEY] = makeGetter(API_BACKWARDS_COMPATIBILITY_VERSION, provider, NOOP_METER_PROVIDER);\n        return provider;\n    };\n    /**\n     * Returns the global meter provider.\n     */\n    MetricsAPI.prototype.getMeterProvider = function () {\n        var _a, _b;\n        return ((_b = (_a = _global[GLOBAL_METRICS_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(_global, API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NOOP_METER_PROVIDER);\n    };\n    /**\n     * Returns a meter from the global meter provider.\n     */\n    MetricsAPI.prototype.getMeter = function (name, version) {\n        return this.getMeterProvider().getMeter(name, version);\n    };\n    /** Remove the global meter provider */\n    MetricsAPI.prototype.disable = function () {\n        delete _global[GLOBAL_METRICS_API_KEY];\n    };\n    return MetricsAPI;\n}());\nexport { MetricsAPI };\n//# sourceMappingURL=metrics.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { diag } from '@opentelemetry/api';\nimport * as api from '@opentelemetry/api-metrics';\n/**\n * This class represent the base to BoundInstrument, which is responsible for generating\n * the TimeSeries.\n */\nvar BaseBoundInstrument = /** @class */ (function () {\n    function BaseBoundInstrument(labels, _disabled, _valueType, _aggregator) {\n        this._disabled = _disabled;\n        this._valueType = _valueType;\n        this._aggregator = _aggregator;\n        this._labels = labels;\n    }\n    BaseBoundInstrument.prototype.update = function (value) {\n        if (this._disabled)\n            return;\n        if (typeof value !== 'number') {\n            diag.error(\"Metric cannot accept a non-number value for \" + Object.values(this._labels) + \".\");\n            return;\n        }\n        if (this._valueType === api.ValueType.INT && !Number.isInteger(value)) {\n            diag.warn(\"INT value type cannot accept a floating-point value for \" + Object.values(this._labels) + \", ignoring the fractional digits.\");\n            value = Math.trunc(value);\n        }\n        this._aggregator.update(value);\n    };\n    BaseBoundInstrument.prototype.getLabels = function () {\n        return this._labels;\n    };\n    BaseBoundInstrument.prototype.getAggregator = function () {\n        return this._aggregator;\n    };\n    return BaseBoundInstrument;\n}());\nexport { BaseBoundInstrument };\n/**\n * BoundCounter allows the SDK to observe/record a single metric event. The\n * value of single instrument in the `Counter` associated with specified Labels.\n */\nvar BoundCounter = /** @class */ (function (_super) {\n    __extends(BoundCounter, _super);\n    function BoundCounter(labels, disabled, valueType, aggregator) {\n        return _super.call(this, labels, disabled, valueType, aggregator) || this;\n    }\n    BoundCounter.prototype.add = function (value) {\n        if (value < 0) {\n            diag.error(\"Counter cannot descend for \" + Object.values(this._labels));\n            return;\n        }\n        this.update(value);\n    };\n    return BoundCounter;\n}(BaseBoundInstrument));\nexport { BoundCounter };\n/**\n * BoundUpDownCounter allows the SDK to observe/record a single metric event.\n * The value of single instrument in the `UpDownCounter` associated with\n * specified Labels.\n */\nvar BoundUpDownCounter = /** @class */ (function (_super) {\n    __extends(BoundUpDownCounter, _super);\n    function BoundUpDownCounter(labels, disabled, valueType, aggregator) {\n        return _super.call(this, labels, disabled, valueType, aggregator) || this;\n    }\n    BoundUpDownCounter.prototype.add = function (value) {\n        this.update(value);\n    };\n    return BoundUpDownCounter;\n}(BaseBoundInstrument));\nexport { BoundUpDownCounter };\n/**\n * BoundMeasure is an implementation of the {@link BoundMeasure} interface.\n */\nvar BoundValueRecorder = /** @class */ (function (_super) {\n    __extends(BoundValueRecorder, _super);\n    function BoundValueRecorder(labels, disabled, valueType, aggregator) {\n        return _super.call(this, labels, disabled, valueType, aggregator) || this;\n    }\n    BoundValueRecorder.prototype.record = function (value) {\n        this.update(value);\n    };\n    return BoundValueRecorder;\n}(BaseBoundInstrument));\nexport { BoundValueRecorder };\n/**\n * BoundObserver is an implementation of the {@link BoundObserver} interface.\n */\nvar BoundObserver = /** @class */ (function (_super) {\n    __extends(BoundObserver, _super);\n    function BoundObserver(labels, disabled, valueType, aggregator) {\n        return _super.call(this, labels, disabled, valueType, aggregator) || this;\n    }\n    return BoundObserver;\n}(BaseBoundInstrument));\nexport { BoundObserver };\n//# sourceMappingURL=BoundInstrument.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './NoopMeter';\nexport * from './NoopMeterProvider';\nexport * from './types/BatchObserverResult';\nexport * from './types/BoundInstrument';\nexport * from './types/Meter';\nexport * from './types/MeterProvider';\nexport * from './types/Metric';\nexport * from './types/Observation';\nexport * from './types/ObserverResult';\nimport { MetricsAPI } from './api/metrics';\n/** Entrypoint for metrics API */\nexport var metrics = MetricsAPI.getInstance();\n//# sourceMappingURL=index.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Type guard to remove nulls from arrays\n *\n * @param value value to be checked for null equality\n */\nexport function notNull(value) {\n    return value !== null;\n}\n/**\n * Converting the unordered labels into unique identifier string.\n * @param labels user provided unordered Labels.\n */\nexport function hashLabels(labels) {\n    var keys = Object.keys(labels);\n    if (keys.length === 0)\n        return '';\n    keys = keys.sort();\n    return keys.reduce(function (result, key) {\n        if (result.length > 2) {\n            result += ',';\n        }\n        return (result += key + ':' + labels[key]);\n    }, '|#');\n}\n//# sourceMappingURL=Utils.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as api from '@opentelemetry/api-metrics';\nimport { hashLabels } from './Utils';\n/** This is a SDK implementation of {@link Metric} interface. */\nvar Metric = /** @class */ (function () {\n    function Metric(_name, _options, _kind, resource, instrumentationLibrary) {\n        this._name = _name;\n        this._options = _options;\n        this._kind = _kind;\n        this.resource = resource;\n        this.instrumentationLibrary = instrumentationLibrary;\n        this._instruments = new Map();\n        this._disabled = !!_options.disabled;\n        this._valueType =\n            typeof _options.valueType === 'number'\n                ? _options.valueType\n                : api.ValueType.DOUBLE;\n        this._boundaries = _options.boundaries;\n        this._descriptor = this._getMetricDescriptor();\n        this._aggregationTemporality =\n            _options.aggregationTemporality === undefined\n                ? api.AggregationTemporality.AGGREGATION_TEMPORALITY_CUMULATIVE\n                : _options.aggregationTemporality;\n    }\n    /**\n     * Returns an Instrument associated with specified Labels.\n     * It is recommended to keep a reference to the Instrument instead of always\n     * calling this method for each operation.\n     * @param labels key-values pairs that are associated with a specific metric\n     *     that you want to record.\n     */\n    Metric.prototype.bind = function (labels) {\n        var hash = hashLabels(labels);\n        if (this._instruments.has(hash))\n            return this._instruments.get(hash);\n        var instrument = this._makeInstrument(labels);\n        this._instruments.set(hash, instrument);\n        return instrument;\n    };\n    /**\n     * Removes the Instrument from the metric, if it is present.\n     * @param labels key-values pairs that are associated with a specific metric.\n     */\n    Metric.prototype.unbind = function (labels) {\n        this._instruments.delete(hashLabels(labels));\n    };\n    /**\n     * Clears all Instruments from the Metric.\n     */\n    Metric.prototype.clear = function () {\n        this._instruments.clear();\n    };\n    /**\n     * Returns kind of metric\n     */\n    Metric.prototype.getKind = function () {\n        return this._kind;\n    };\n    Metric.prototype.getAggregationTemporality = function () {\n        return this._aggregationTemporality;\n    };\n    Metric.prototype.getMetricRecord = function () {\n        var _this = this;\n        return new Promise(function (resolve) {\n            resolve(Array.from(_this._instruments.values()).map(function (instrument) { return ({\n                descriptor: _this._descriptor,\n                labels: instrument.getLabels(),\n                aggregator: instrument.getAggregator(),\n                aggregationTemporality: _this.getAggregationTemporality(),\n                resource: _this.resource,\n                instrumentationLibrary: _this.instrumentationLibrary,\n            }); }));\n        });\n    };\n    Metric.prototype._getMetricDescriptor = function () {\n        return __assign({ name: this._name, description: this._options.description || '', unit: this._options.unit || '1', metricKind: this._kind, valueType: this._valueType }, (this._boundaries && { boundaries: this._boundaries }));\n    };\n    return Metric;\n}());\nexport { Metric };\n//# sourceMappingURL=Metric.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { BoundCounter } from './BoundInstrument';\nimport { MetricKind } from './export/types';\nimport { Metric } from './Metric';\n/** This is a SDK implementation of Counter Metric. */\nvar CounterMetric = /** @class */ (function (_super) {\n    __extends(CounterMetric, _super);\n    function CounterMetric(name, options, _processor, resource, instrumentationLibrary) {\n        var _this = _super.call(this, name, options, MetricKind.COUNTER, resource, instrumentationLibrary) || this;\n        _this._processor = _processor;\n        return _this;\n    }\n    CounterMetric.prototype._makeInstrument = function (labels) {\n        return new BoundCounter(labels, this._disabled, this._valueType, this._processor.aggregatorFor(this._descriptor));\n    };\n    /**\n     * Adds the given value to the current value. Values cannot be negative.\n     * @param value the value to add.\n     * @param [labels = {}] key-values pairs that are associated with a specific metric\n     *     that you want to record.\n     */\n    CounterMetric.prototype.add = function (value, labels) {\n        if (labels === void 0) { labels = {}; }\n        this.bind(labels).add(value);\n    };\n    return CounterMetric;\n}(Metric));\nexport { CounterMetric };\n//# sourceMappingURL=CounterMetric.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { BoundValueRecorder } from './BoundInstrument';\nimport { MetricKind } from './export/types';\nimport { Metric } from './Metric';\n/** This is a SDK implementation of Value Recorder Metric. */\nvar ValueRecorderMetric = /** @class */ (function (_super) {\n    __extends(ValueRecorderMetric, _super);\n    function ValueRecorderMetric(name, options, _processor, resource, instrumentationLibrary) {\n        var _this = _super.call(this, name, options, MetricKind.VALUE_RECORDER, resource, instrumentationLibrary) || this;\n        _this._processor = _processor;\n        return _this;\n    }\n    ValueRecorderMetric.prototype._makeInstrument = function (labels) {\n        return new BoundValueRecorder(labels, this._disabled, this._valueType, this._processor.aggregatorFor(this._descriptor));\n    };\n    ValueRecorderMetric.prototype.record = function (value, labels) {\n        if (labels === void 0) { labels = {}; }\n        this.bind(labels).record(value);\n    };\n    return ValueRecorderMetric;\n}(Metric));\nexport { ValueRecorderMetric };\n//# sourceMappingURL=ValueRecorderMetric.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { Resource } from '../../Resource';\n/**\n * Detects resources for the browser platform, which is currently only the\n * telemetry SDK resource. More could be added in the future. This method\n * is async to match the signature of corresponding method for node.\n */\nexport var detectResources = function () { return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n        return [2 /*return*/, Resource.empty()];\n    });\n}); };\n//# sourceMappingURL=detect-resources.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ResourceAttributes as SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { SDK_INFO } from '@opentelemetry/core';\nimport { defaultServiceName } from './platform';\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\nvar Resource = /** @class */ (function () {\n    function Resource(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    attributes) {\n        this.attributes = attributes;\n    }\n    /**\n     * Returns an empty Resource\n     */\n    Resource.empty = function () {\n        return Resource.EMPTY;\n    };\n    /**\n     * Returns a Resource that indentifies the SDK in use.\n     */\n    Resource.default = function () {\n        var _a;\n        return new Resource((_a = {},\n            _a[SemanticResourceAttributes.SERVICE_NAME] = defaultServiceName(),\n            _a[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE],\n            _a[SemanticResourceAttributes.TELEMETRY_SDK_NAME] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_NAME],\n            _a[SemanticResourceAttributes.TELEMETRY_SDK_VERSION] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_VERSION],\n            _a));\n    };\n    /**\n     * Returns a new, merged {@link Resource} by merging the current Resource\n     * with the other Resource. In case of a collision, other Resource takes\n     * precedence.\n     *\n     * @param other the Resource that will be merged with this.\n     * @returns the newly merged Resource.\n     */\n    Resource.prototype.merge = function (other) {\n        if (!other || !Object.keys(other.attributes).length)\n            return this;\n        // SpanAttributes from resource overwrite attributes from other resource.\n        var mergedAttributes = Object.assign({}, this.attributes, other.attributes);\n        return new Resource(mergedAttributes);\n    };\n    Resource.EMPTY = new Resource({});\n    return Resource;\n}());\nexport { Resource };\n//# sourceMappingURL=Resource.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function defaultServiceName() {\n    return 'unknown_service';\n}\n//# sourceMappingURL=default-service-name.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Implementation of api BatchObserverResult\n */\nvar BatchObserverResult = /** @class */ (function () {\n    function BatchObserverResult() {\n        /**\n         * Cancels the further updates.\n         * This is used to prevent updating the value of result that took too\n         * long to update. For example to avoid update after timeout.\n         * See {@link BatchObserver.collect}\n         */\n        this.cancelled = false;\n    }\n    /**\n     * used to save a callback that will be called after the observations are\n     *     updated\n     * @param [callback]\n     */\n    BatchObserverResult.prototype.onObserveCalled = function (callback) {\n        this._callback = callback;\n    };\n    BatchObserverResult.prototype.observe = function (labels, observations) {\n        var _this = this;\n        if (this.cancelled || !this._callback) {\n            return;\n        }\n        observations.forEach(function (observation) {\n            observation.observer.bind(labels).update(observation.value);\n        });\n        if (!this._immediate) {\n            this._immediate = setImmediate(function () {\n                if (typeof _this._callback === 'function') {\n                    _this._callback();\n                    // prevent user from updating the values later if for any reason\n                    // the observerBatchResult will be referenced and then try to use\n                    _this._callback = undefined;\n                }\n            });\n        }\n    };\n    return BatchObserverResult;\n}());\nexport { BatchObserverResult };\n//# sourceMappingURL=BatchObserverResult.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { BatchObserverResult } from './BatchObserverResult';\nvar NOOP_CALLBACK = function () { };\nvar MAX_TIMEOUT_UPDATE_MS = 500;\n/** This is a SDK implementation of Batch Observer. */\nvar BatchObserver = /** @class */ (function () {\n    function BatchObserver(options, callback) {\n        var _a;\n        this._maxTimeoutUpdateMS =\n            (_a = options.maxTimeoutUpdateMS) !== null && _a !== void 0 ? _a : MAX_TIMEOUT_UPDATE_MS;\n        this._callback = callback || NOOP_CALLBACK;\n    }\n    BatchObserver.prototype.collect = function () {\n        var _this = this;\n        diag.debug('getMetricRecord - start');\n        return new Promise(function (resolve) {\n            var observerResult = new BatchObserverResult();\n            // cancels after MAX_TIMEOUT_MS - no more waiting for results\n            var timer = setTimeout(function () {\n                observerResult.cancelled = true;\n                // remove callback to prevent user from updating the values later if\n                // for any reason the observerBatchResult will be referenced\n                observerResult.onObserveCalled();\n                resolve();\n                diag.debug('getMetricRecord - timeout');\n            }, _this._maxTimeoutUpdateMS);\n            // sets callback for each \"observe\" method\n            observerResult.onObserveCalled(function () {\n                clearTimeout(timer);\n                resolve();\n                diag.debug('getMetricRecord - end');\n            });\n            // calls the BatchObserverResult callback\n            _this._callback(observerResult);\n        });\n    };\n    return BatchObserver;\n}());\nexport { BatchObserver };\n//# sourceMappingURL=BatchObserver.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { ExportResultCode, unrefTimer, globalErrorHandler, } from '@opentelemetry/core';\nvar DEFAULT_EXPORT_INTERVAL = 60000;\nvar Controller = /** @class */ (function () {\n    function Controller() {\n    }\n    return Controller;\n}());\nexport { Controller };\n/** Controller organizes a periodic push of metric data. */\nvar PushController = /** @class */ (function (_super) {\n    __extends(PushController, _super);\n    function PushController(_meter, _exporter, interval) {\n        if (interval === void 0) { interval = DEFAULT_EXPORT_INTERVAL; }\n        var _this = _super.call(this) || this;\n        _this._meter = _meter;\n        _this._exporter = _exporter;\n        _this._timer = setInterval(function () {\n            _this._collect().catch(function (err) {\n                globalErrorHandler(err);\n            });\n        }, interval);\n        unrefTimer(_this._timer);\n        return _this;\n    }\n    PushController.prototype.shutdown = function () {\n        clearInterval(this._timer);\n        return this._collect();\n    };\n    PushController.prototype._collect = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._meter.collect()];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, new Promise(function (resolve) {\n                                _this._exporter.export(_this._meter.getProcessor().checkPointSet(), function (result) {\n                                    var _a;\n                                    if (result.code !== ExportResultCode.SUCCESS) {\n                                        globalErrorHandler((_a = result.error) !== null && _a !== void 0 ? _a : new Error('PushController: export failed in _collect'));\n                                    }\n                                    resolve();\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    return PushController;\n}(Controller));\nexport { PushController };\n//# sourceMappingURL=Controller.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar NoopExporter = /** @class */ (function () {\n    function NoopExporter() {\n    }\n    // By default does nothing\n    NoopExporter.prototype.export = function (_metrics, _resultCallback) { };\n    // By default does nothing\n    NoopExporter.prototype.shutdown = function () {\n        return Promise.resolve();\n    };\n    return NoopExporter;\n}());\nexport { NoopExporter };\n//# sourceMappingURL=NoopExporter.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AggregatorKind, } from '../types';\nimport { hrTime } from '@opentelemetry/core';\n/**\n * Basic aggregator which observes events and counts them in pre-defined buckets\n * and provides the total sum and count of all observations.\n */\nvar HistogramAggregator = /** @class */ (function () {\n    function HistogramAggregator(boundaries) {\n        this.kind = AggregatorKind.HISTOGRAM;\n        if (boundaries === undefined || boundaries.length === 0) {\n            throw new Error('HistogramAggregator should be created with boundaries.');\n        }\n        // we need to an ordered set to be able to correctly compute count for each\n        // boundary since we'll iterate on each in order.\n        this._boundaries = boundaries.sort(function (a, b) { return a - b; });\n        this._current = this._newEmptyCheckpoint();\n        this._lastUpdateTime = hrTime();\n    }\n    HistogramAggregator.prototype.update = function (value) {\n        this._lastUpdateTime = hrTime();\n        this._current.count += 1;\n        this._current.sum += value;\n        for (var i = 0; i < this._boundaries.length; i++) {\n            if (value < this._boundaries[i]) {\n                this._current.buckets.counts[i] += 1;\n                return;\n            }\n        }\n        // value is above all observed boundaries\n        this._current.buckets.counts[this._boundaries.length] += 1;\n    };\n    HistogramAggregator.prototype.toPoint = function () {\n        return {\n            value: this._current,\n            timestamp: this._lastUpdateTime,\n        };\n    };\n    HistogramAggregator.prototype._newEmptyCheckpoint = function () {\n        return {\n            buckets: {\n                boundaries: this._boundaries,\n                counts: this._boundaries.map(function () { return 0; }).concat([0]),\n            },\n            sum: 0,\n            count: 0,\n        };\n    };\n    return HistogramAggregator;\n}());\nexport { HistogramAggregator };\n//# sourceMappingURL=Histogram.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AggregatorKind, } from '../types';\nimport { hrTime } from '@opentelemetry/core';\n/** Basic aggregator for LastValue which keeps the last recorded value. */\nvar LastValueAggregator = /** @class */ (function () {\n    function LastValueAggregator() {\n        this._current = 0;\n        this._lastUpdateTime = [0, 0];\n        this.kind = AggregatorKind.LAST_VALUE;\n    }\n    LastValueAggregator.prototype.update = function (value) {\n        this._current = value;\n        this._lastUpdateTime = hrTime();\n    };\n    LastValueAggregator.prototype.toPoint = function () {\n        return {\n            value: this._current,\n            timestamp: this._lastUpdateTime,\n        };\n    };\n    return LastValueAggregator;\n}());\nexport { LastValueAggregator };\n//# sourceMappingURL=LastValue.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AggregatorKind } from '../types';\nimport { hrTime } from '@opentelemetry/core';\n/** Basic aggregator which calculates a Sum from individual measurements. */\nvar SumAggregator = /** @class */ (function () {\n    function SumAggregator() {\n        this.kind = AggregatorKind.SUM;\n        this._current = 0;\n        this._lastUpdateTime = [0, 0];\n    }\n    SumAggregator.prototype.update = function (value) {\n        this._current += value;\n        this._lastUpdateTime = hrTime();\n    };\n    SumAggregator.prototype.toPoint = function () {\n        return {\n            value: this._current,\n            timestamp: this._lastUpdateTime,\n        };\n    };\n    return SumAggregator;\n}());\nexport { SumAggregator };\n//# sourceMappingURL=Sum.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport * as aggregators from './aggregators';\nimport { MetricKind, } from './types';\n/**\n * Base class for all processor types.\n *\n * The processor is responsible for storing the aggregators and aggregated\n * values received from updates from metrics in the meter. The stored values\n * will be sent to an exporter for exporting.\n */\nvar Processor = /** @class */ (function () {\n    function Processor() {\n        this._batchMap = new Map();\n    }\n    Processor.prototype.checkPointSet = function () {\n        return Array.from(this._batchMap.values());\n    };\n    return Processor;\n}());\nexport { Processor };\n/**\n * Processor which retains all dimensions/labels. It accepts all records and\n * passes them for exporting.\n */\nvar UngroupedProcessor = /** @class */ (function (_super) {\n    __extends(UngroupedProcessor, _super);\n    function UngroupedProcessor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    UngroupedProcessor.prototype.aggregatorFor = function (metricDescriptor) {\n        switch (metricDescriptor.metricKind) {\n            case MetricKind.COUNTER:\n            case MetricKind.UP_DOWN_COUNTER:\n                return new aggregators.SumAggregator();\n            case MetricKind.SUM_OBSERVER:\n            case MetricKind.UP_DOWN_SUM_OBSERVER:\n            case MetricKind.VALUE_OBSERVER:\n                return new aggregators.LastValueAggregator();\n            case MetricKind.VALUE_RECORDER:\n                return new aggregators.HistogramAggregator(metricDescriptor.boundaries || [Infinity]);\n            default:\n                return new aggregators.LastValueAggregator();\n        }\n    };\n    UngroupedProcessor.prototype.process = function (record) {\n        var labels = Object.keys(record.labels)\n            .map(function (k) { return k + \"=\" + record.labels[k]; })\n            .join(',');\n        this._batchMap.set(record.descriptor.name + labels, record);\n    };\n    return UngroupedProcessor;\n}(Processor));\nexport { UngroupedProcessor };\n//# sourceMappingURL=Processor.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Implementation of {@link TypeObserverResult}\n */\nvar ObserverResult = /** @class */ (function () {\n    function ObserverResult() {\n        this.values = new Map();\n    }\n    ObserverResult.prototype.observe = function (value, labels) {\n        this.values.set(labels, value);\n    };\n    return ObserverResult;\n}());\nexport { ObserverResult };\n//# sourceMappingURL=ObserverResult.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { BoundObserver } from './BoundInstrument';\nimport { Metric } from './Metric';\nimport { ObserverResult } from './ObserverResult';\nvar NOOP_CALLBACK = function () { };\n/**\n * This is a SDK implementation of Base Observer Metric.\n * All observers should extend this class\n */\nvar BaseObserverMetric = /** @class */ (function (_super) {\n    __extends(BaseObserverMetric, _super);\n    function BaseObserverMetric(name, options, _processor, resource, metricKind, instrumentationLibrary, callback) {\n        var _this = _super.call(this, name, options, metricKind, resource, instrumentationLibrary) || this;\n        _this._processor = _processor;\n        _this._callback = callback || NOOP_CALLBACK;\n        return _this;\n    }\n    BaseObserverMetric.prototype._makeInstrument = function (labels) {\n        return new BoundObserver(labels, this._disabled, this._valueType, this._processor.aggregatorFor(this._descriptor));\n    };\n    BaseObserverMetric.prototype.getMetricRecord = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var observerResult;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        observerResult = new ObserverResult();\n                        return [4 /*yield*/, this._callback(observerResult)];\n                    case 1:\n                        _a.sent();\n                        this._processResults(observerResult);\n                        return [2 /*return*/, _super.prototype.getMetricRecord.call(this)];\n                }\n            });\n        });\n    };\n    BaseObserverMetric.prototype._processResults = function (observerResult) {\n        var _this = this;\n        observerResult.values.forEach(function (value, labels) {\n            var instrument = _this.bind(labels);\n            instrument.update(value);\n        });\n    };\n    BaseObserverMetric.prototype.observation = function (value) {\n        return {\n            value: value,\n            observer: this,\n        };\n    };\n    return BaseObserverMetric;\n}(Metric));\nexport { BaseObserverMetric };\n//# sourceMappingURL=BaseObserverMetric.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { BaseObserverMetric } from './BaseObserverMetric';\nimport { MetricKind } from './export/types';\n/** This is a SDK implementation of SumObserver Metric. */\nvar SumObserverMetric = /** @class */ (function (_super) {\n    __extends(SumObserverMetric, _super);\n    function SumObserverMetric(name, options, processor, resource, instrumentationLibrary, callback) {\n        return _super.call(this, name, options, processor, resource, MetricKind.SUM_OBSERVER, instrumentationLibrary, callback) || this;\n    }\n    SumObserverMetric.prototype._processResults = function (observerResult) {\n        var _this = this;\n        observerResult.values.forEach(function (value, labels) {\n            var instrument = _this.bind(labels);\n            // SumObserver is monotonic which means it should only accept values\n            // greater or equal then previous value\n            var previous = instrument.getAggregator().toPoint();\n            var previousValue = -Infinity;\n            if (previous.timestamp[0] !== 0 || previous.timestamp[1] !== 0) {\n                previousValue = previous.value;\n            }\n            if (value >= previousValue) {\n                instrument.update(value);\n            }\n        });\n    };\n    return SumObserverMetric;\n}(BaseObserverMetric));\nexport { SumObserverMetric };\n//# sourceMappingURL=SumObserverMetric.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as api from '@opentelemetry/api-metrics';\n/** Default Meter configuration. */\nexport var DEFAULT_CONFIG = {};\n/** The default metric creation options value. */\nexport var DEFAULT_METRIC_OPTIONS = {\n    disabled: false,\n    description: '',\n    unit: '1',\n    valueType: api.ValueType.DOUBLE,\n};\n//# sourceMappingURL=types.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { BoundUpDownCounter } from './BoundInstrument';\nimport { MetricKind } from './export/types';\nimport { Metric } from './Metric';\n/** This is a SDK implementation of UpDownCounter Metric. */\nvar UpDownCounterMetric = /** @class */ (function (_super) {\n    __extends(UpDownCounterMetric, _super);\n    function UpDownCounterMetric(name, options, _processor, resource, instrumentationLibrary) {\n        var _this = _super.call(this, name, options, MetricKind.UP_DOWN_COUNTER, resource, instrumentationLibrary) || this;\n        _this._processor = _processor;\n        return _this;\n    }\n    UpDownCounterMetric.prototype._makeInstrument = function (labels) {\n        return new BoundUpDownCounter(labels, this._disabled, this._valueType, this._processor.aggregatorFor(this._descriptor));\n    };\n    /**\n     * Adds the given value to the current value. Values cannot be negative.\n     * @param value the value to add.\n     * @param [labels = {}] key-values pairs that are associated with a specific\n     *     metric that you want to record.\n     */\n    UpDownCounterMetric.prototype.add = function (value, labels) {\n        if (labels === void 0) { labels = {}; }\n        this.bind(labels).add(value);\n    };\n    return UpDownCounterMetric;\n}(Metric));\nexport { UpDownCounterMetric };\n//# sourceMappingURL=UpDownCounterMetric.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { BaseObserverMetric } from './BaseObserverMetric';\nimport { MetricKind } from './export/types';\n/** This is a SDK implementation of UpDownSumObserver Metric. */\nvar UpDownSumObserverMetric = /** @class */ (function (_super) {\n    __extends(UpDownSumObserverMetric, _super);\n    function UpDownSumObserverMetric(name, options, processor, resource, instrumentationLibrary, callback) {\n        return _super.call(this, name, options, processor, resource, MetricKind.UP_DOWN_SUM_OBSERVER, instrumentationLibrary, callback) || this;\n    }\n    return UpDownSumObserverMetric;\n}(BaseObserverMetric));\nexport { UpDownSumObserverMetric };\n//# sourceMappingURL=UpDownSumObserverMetric.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { BaseObserverMetric } from './BaseObserverMetric';\nimport { MetricKind } from './export/types';\n/** This is a SDK implementation of Value Observer Metric. */\nvar ValueObserverMetric = /** @class */ (function (_super) {\n    __extends(ValueObserverMetric, _super);\n    function ValueObserverMetric(name, options, processor, resource, instrumentationLibrary, callback) {\n        return _super.call(this, name, options, processor, resource, MetricKind.VALUE_OBSERVER, instrumentationLibrary, callback) || this;\n    }\n    return ValueObserverMetric;\n}(BaseObserverMetric));\nexport { ValueObserverMetric };\n//# sourceMappingURL=ValueObserverMetric.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { diag } from '@opentelemetry/api';\nimport * as api from '@opentelemetry/api-metrics';\nimport { Resource } from '@opentelemetry/resources';\nimport { BatchObserver } from './BatchObserver';\nimport { CounterMetric } from './CounterMetric';\nimport { PushController } from './export/Controller';\nimport { NoopExporter } from './export/NoopExporter';\nimport { UngroupedProcessor } from './export/Processor';\nimport { SumObserverMetric } from './SumObserverMetric';\nimport { DEFAULT_CONFIG, DEFAULT_METRIC_OPTIONS } from './types';\nimport { UpDownCounterMetric } from './UpDownCounterMetric';\nimport { UpDownSumObserverMetric } from './UpDownSumObserverMetric';\nimport { ValueObserverMetric } from './ValueObserverMetric';\nimport { ValueRecorderMetric } from './ValueRecorderMetric';\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nvar merge = require('lodash.merge');\n/**\n * Meter is an implementation of the {@link Meter} interface.\n */\nvar Meter = /** @class */ (function () {\n    /**\n     * Constructs a new Meter instance.\n     */\n    function Meter(instrumentationLibrary, config) {\n        if (config === void 0) { config = {}; }\n        var _a;\n        this._batchObservers = [];\n        this._metrics = new Map();\n        this._isShutdown = false;\n        this._shuttingDownPromise = Promise.resolve();\n        var mergedConfig = merge({}, DEFAULT_CONFIG, config);\n        this._processor = (_a = mergedConfig.processor) !== null && _a !== void 0 ? _a : new UngroupedProcessor();\n        this._resource =\n            mergedConfig.resource || Resource.empty();\n        this._instrumentationLibrary = instrumentationLibrary;\n        // start the push controller\n        var exporter = mergedConfig.exporter || new NoopExporter();\n        var interval = mergedConfig.interval;\n        this._controller = new PushController(this, exporter, interval);\n    }\n    /**\n     * Creates and returns a new {@link ValueRecorder}.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     */\n    Meter.prototype.createValueRecorder = function (name, options) {\n        if (!this._isValidName(name)) {\n            diag.warn(\"Invalid metric name \" + name + \". Defaulting to noop metric implementation.\");\n            return api.NOOP_VALUE_RECORDER_METRIC;\n        }\n        var opt = __assign(__assign({}, DEFAULT_METRIC_OPTIONS), options);\n        var valueRecorder = new ValueRecorderMetric(name, opt, this._processor, this._resource, this._instrumentationLibrary);\n        this._registerMetric(name, valueRecorder);\n        return valueRecorder;\n    };\n    /**\n     * Creates a new counter metric. Generally, this kind of metric when the\n     * value is a quantity, the sum is of primary interest, and the event count\n     * and value distribution are not of primary interest.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     */\n    Meter.prototype.createCounter = function (name, options) {\n        if (!this._isValidName(name)) {\n            diag.warn(\"Invalid metric name \" + name + \". Defaulting to noop metric implementation.\");\n            return api.NOOP_COUNTER_METRIC;\n        }\n        var opt = __assign(__assign({}, DEFAULT_METRIC_OPTIONS), options);\n        var counter = new CounterMetric(name, opt, this._processor, this._resource, this._instrumentationLibrary);\n        this._registerMetric(name, counter);\n        return counter;\n    };\n    /**\n     * Creates a new `UpDownCounter` metric. UpDownCounter is a synchronous\n     * instrument and very similar to Counter except that Add(increment)\n     * supports negative increments. It is generally useful for capturing changes\n     * in an amount of resources used, or any quantity that rises and falls\n     * during a request.\n     *\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     */\n    Meter.prototype.createUpDownCounter = function (name, options) {\n        if (!this._isValidName(name)) {\n            diag.warn(\"Invalid metric name \" + name + \". Defaulting to noop metric implementation.\");\n            return api.NOOP_COUNTER_METRIC;\n        }\n        var opt = __assign(__assign({}, DEFAULT_METRIC_OPTIONS), options);\n        var upDownCounter = new UpDownCounterMetric(name, opt, this._processor, this._resource, this._instrumentationLibrary);\n        this._registerMetric(name, upDownCounter);\n        return upDownCounter;\n    };\n    /**\n     * Creates a new `ValueObserver` metric.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     * @param [callback] the value observer callback\n     */\n    Meter.prototype.createValueObserver = function (name, options, callback) {\n        if (options === void 0) { options = {}; }\n        if (!this._isValidName(name)) {\n            diag.warn(\"Invalid metric name \" + name + \". Defaulting to noop metric implementation.\");\n            return api.NOOP_VALUE_OBSERVER_METRIC;\n        }\n        var opt = __assign(__assign({}, DEFAULT_METRIC_OPTIONS), options);\n        var valueObserver = new ValueObserverMetric(name, opt, this._processor, this._resource, this._instrumentationLibrary, callback);\n        this._registerMetric(name, valueObserver);\n        return valueObserver;\n    };\n    Meter.prototype.createSumObserver = function (name, options, callback) {\n        if (options === void 0) { options = {}; }\n        if (!this._isValidName(name)) {\n            diag.warn(\"Invalid metric name \" + name + \". Defaulting to noop metric implementation.\");\n            return api.NOOP_SUM_OBSERVER_METRIC;\n        }\n        var opt = __assign(__assign({}, DEFAULT_METRIC_OPTIONS), options);\n        var sumObserver = new SumObserverMetric(name, opt, this._processor, this._resource, this._instrumentationLibrary, callback);\n        this._registerMetric(name, sumObserver);\n        return sumObserver;\n    };\n    /**\n     * Creates a new `UpDownSumObserver` metric.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     * @param [callback] the value observer callback\n     */\n    Meter.prototype.createUpDownSumObserver = function (name, options, callback) {\n        if (options === void 0) { options = {}; }\n        if (!this._isValidName(name)) {\n            diag.warn(\"Invalid metric name \" + name + \". Defaulting to noop metric implementation.\");\n            return api.NOOP_UP_DOWN_SUM_OBSERVER_METRIC;\n        }\n        var opt = __assign(__assign({}, DEFAULT_METRIC_OPTIONS), options);\n        var upDownSumObserver = new UpDownSumObserverMetric(name, opt, this._processor, this._resource, this._instrumentationLibrary, callback);\n        this._registerMetric(name, upDownSumObserver);\n        return upDownSumObserver;\n    };\n    /**\n     * Creates a new batch observer.\n     * @param callback the batch observer callback\n     * @param [options] the batch options.\n     */\n    Meter.prototype.createBatchObserver = function (callback, options) {\n        if (options === void 0) { options = {}; }\n        var opt = __assign({}, options);\n        var batchObserver = new BatchObserver(opt, callback);\n        this._batchObservers.push(batchObserver);\n        return batchObserver;\n    };\n    /**\n     * Collects all the metrics created with this `Meter` for export.\n     *\n     * Utilizes the processor to create checkpoints of the current values in\n     * each aggregator belonging to the metrics that were created with this\n     * meter instance.\n     */\n    Meter.prototype.collect = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var observations, metricsRecords;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        observations = this._batchObservers.map(function (observer) {\n                            return observer.collect();\n                        });\n                        return [4 /*yield*/, Promise.all(observations)];\n                    case 1:\n                        _a.sent();\n                        metricsRecords = Array.from(this._metrics.values()).map(function (metric) {\n                            return metric.getMetricRecord();\n                        });\n                        return [4 /*yield*/, Promise.all(metricsRecords).then(function (records) {\n                                records.forEach(function (metrics) {\n                                    metrics.forEach(function (metric) { return _this._processor.process(metric); });\n                                });\n                            })];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Meter.prototype.getProcessor = function () {\n        return this._processor;\n    };\n    Meter.prototype.shutdown = function () {\n        var _this = this;\n        if (this._isShutdown) {\n            return this._shuttingDownPromise;\n        }\n        this._isShutdown = true;\n        this._shuttingDownPromise = new Promise(function (resolve, reject) {\n            Promise.resolve()\n                .then(function () {\n                return _this._controller.shutdown();\n            })\n                .then(resolve)\n                .catch(function (e) {\n                reject(e);\n            });\n        });\n        return this._shuttingDownPromise;\n    };\n    /**\n     * Registers metric to register.\n     * @param name The name of the metric.\n     * @param metric The metric to register.\n     */\n    Meter.prototype._registerMetric = function (name, metric) {\n        if (this._metrics.has(name)) {\n            diag.error(\"A metric with the name \" + name + \" has already been registered.\");\n            return;\n        }\n        this._metrics.set(name, metric);\n    };\n    /**\n     * Ensure a metric name conforms to the following rules:\n     *\n     * 1. They are non-empty strings\n     *\n     * 2. The first character must be non-numeric, non-space, non-punctuation\n     *\n     * 3. Subsequent characters must be belong to the alphanumeric characters,\n     *    '_', '.', and '-'.\n     *\n     * Names are case insensitive\n     *\n     * @param name Name of metric to be created\n     */\n    Meter.prototype._isValidName = function (name) {\n        return Boolean(name.match(/^[a-z][a-z0-9_.-]*$/i));\n    };\n    return Meter;\n}());\nexport { Meter };\n//# sourceMappingURL=Meter.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Resource } from '@opentelemetry/resources';\nimport { Meter } from '.';\nimport { DEFAULT_CONFIG } from './types';\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nvar merge = require('lodash.merge');\n/**\n * This class represents a meter provider which platform libraries can extend\n */\nvar MeterProvider = /** @class */ (function () {\n    function MeterProvider(config) {\n        if (config === void 0) { config = {}; }\n        this._meters = new Map();\n        this._shuttingDownPromise = Promise.resolve();\n        this._isShutdown = false;\n        var mergedConfig = merge({}, DEFAULT_CONFIG, config);\n        this.resource = mergedConfig.resource || Resource.empty();\n        this.resource = Resource.default().merge(this.resource);\n        this._config = Object.assign({}, mergedConfig, {\n            resource: this.resource,\n        });\n    }\n    /**\n     * Returns a Meter, creating one if one with the given name and version is not already created\n     *\n     * @returns Meter A Meter with the given name and version\n     */\n    MeterProvider.prototype.getMeter = function (name, version, config) {\n        var key = name + \"@\" + (version || '');\n        if (!this._meters.has(key)) {\n            this._meters.set(key, new Meter({ name: name, version: version }, config || this._config));\n        }\n        return this._meters.get(key);\n    };\n    MeterProvider.prototype.shutdown = function () {\n        var _this = this;\n        if (this._isShutdown) {\n            return this._shuttingDownPromise;\n        }\n        this._isShutdown = true;\n        this._shuttingDownPromise = new Promise(function (resolve, reject) {\n            Promise.resolve()\n                .then(function () {\n                return Promise.all(Array.from(_this._meters, function (_a) {\n                    var _ = _a[0], meter = _a[1];\n                    return meter.shutdown();\n                }));\n            })\n                .then(function () {\n                if (_this._config.exporter) {\n                    return _this._config.exporter.shutdown();\n                }\n                return;\n            })\n                .then(resolve)\n                .catch(function (e) {\n                reject(e);\n            });\n        });\n        return this._shuttingDownPromise;\n    };\n    return MeterProvider;\n}());\nexport { MeterProvider };\n//# sourceMappingURL=MeterProvider.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ExportResultCode } from '@opentelemetry/core';\n/**\n * This is implementation of {@link MetricExporter} that prints metrics data to\n * the console. This class can be used for diagnostic purposes.\n */\n/* eslint-disable no-console */\nvar ConsoleMetricExporter = /** @class */ (function () {\n    function ConsoleMetricExporter() {\n    }\n    ConsoleMetricExporter.prototype.export = function (metrics, resultCallback) {\n        for (var _i = 0, metrics_1 = metrics; _i < metrics_1.length; _i++) {\n            var metric = metrics_1[_i];\n            console.log(metric.descriptor);\n            console.log(metric.labels);\n            var point = metric.aggregator.toPoint();\n            if (typeof point.value === 'number') {\n                console.log('value: ' + point.value);\n            }\n            else if (typeof point.value.buckets === 'object') {\n                var histogram = point.value;\n                console.log(\"count: \" + histogram.count + \", sum: \" + histogram.sum + \", buckets: \" + histogram.buckets);\n            }\n            else {\n                console.log(point.value);\n            }\n        }\n        return resultCallback({ code: ExportResultCode.SUCCESS });\n    };\n    ConsoleMetricExporter.prototype.shutdown = function () {\n        // By default does nothing\n        return Promise.resolve();\n    };\n    return ConsoleMetricExporter;\n}());\nexport { ConsoleMetricExporter };\n//# sourceMappingURL=ConsoleMetricExporter.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ValueType } from '@opentelemetry/api-metrics';\nimport * as core from '@opentelemetry/core';\nimport { AggregatorKind, MetricKind, } from '@opentelemetry/metrics';\nimport { toCollectorResource } from './transform';\nimport { opentelemetryProto } from './types';\n/**\n * Converts labels\n * @param labels\n */\nexport function toCollectorLabels(labels) {\n    return Object.entries(labels).map(function (_a) {\n        var key = _a[0], value = _a[1];\n        return { key: key, value: String(value) };\n    });\n}\n/**\n * Given a MetricDescriptor, return its temporality in a compatible format with the collector\n * @param descriptor\n */\nexport function toAggregationTemporality(metric) {\n    if (metric.descriptor.metricKind === MetricKind.VALUE_OBSERVER) {\n        return opentelemetryProto.metrics.v1.AggregationTemporality\n            .AGGREGATION_TEMPORALITY_UNSPECIFIED;\n    }\n    return metric.aggregationTemporality;\n}\n/**\n * Returns an DataPoint which can have integers or doublle values\n * @param metric\n * @param startTime\n */\nexport function toDataPoint(metric, startTime) {\n    return {\n        labels: toCollectorLabels(metric.labels),\n        value: metric.aggregator.toPoint().value,\n        startTimeUnixNano: startTime,\n        timeUnixNano: core.hrTimeToNanoseconds(metric.aggregator.toPoint().timestamp),\n    };\n}\n/**\n * Returns a HistogramPoint to the collector\n * @param metric\n * @param startTime\n */\nexport function toHistogramPoint(metric, startTime) {\n    var _a = metric.aggregator.toPoint(), value = _a.value, timestamp = _a.timestamp;\n    return {\n        labels: toCollectorLabels(metric.labels),\n        sum: value.sum,\n        count: value.count,\n        startTimeUnixNano: startTime,\n        timeUnixNano: core.hrTimeToNanoseconds(timestamp),\n        bucketCounts: value.buckets.counts,\n        explicitBounds: value.buckets.boundaries,\n    };\n}\n/**\n * Converts a metric to be compatible with the collector\n * @param metric\n * @param startTime start time in nanoseconds\n */\nexport function toCollectorMetric(metric, startTime) {\n    var metricCollector = {\n        name: metric.descriptor.name,\n        description: metric.descriptor.description,\n        unit: metric.descriptor.unit,\n    };\n    if (metric.aggregator.kind === AggregatorKind.SUM ||\n        metric.descriptor.metricKind === MetricKind.SUM_OBSERVER ||\n        metric.descriptor.metricKind === MetricKind.UP_DOWN_SUM_OBSERVER) {\n        var result = {\n            dataPoints: [toDataPoint(metric, startTime)],\n            isMonotonic: metric.descriptor.metricKind === MetricKind.COUNTER ||\n                metric.descriptor.metricKind === MetricKind.SUM_OBSERVER,\n            aggregationTemporality: toAggregationTemporality(metric),\n        };\n        if (metric.descriptor.valueType === ValueType.INT) {\n            metricCollector.intSum = result;\n        }\n        else {\n            metricCollector.doubleSum = result;\n        }\n    }\n    else if (metric.aggregator.kind === AggregatorKind.LAST_VALUE) {\n        var result = {\n            dataPoints: [toDataPoint(metric, startTime)],\n        };\n        if (metric.descriptor.valueType === ValueType.INT) {\n            metricCollector.intGauge = result;\n        }\n        else {\n            metricCollector.doubleGauge = result;\n        }\n    }\n    else if (metric.aggregator.kind === AggregatorKind.HISTOGRAM) {\n        var result = {\n            dataPoints: [toHistogramPoint(metric, startTime)],\n            aggregationTemporality: toAggregationTemporality(metric),\n        };\n        if (metric.descriptor.valueType === ValueType.INT) {\n            metricCollector.intHistogram = result;\n        }\n        else {\n            metricCollector.doubleHistogram = result;\n        }\n    }\n    return metricCollector;\n}\n/**\n * Prepares metric service request to be sent to collector\n * @param metrics metrics\n * @param startTime start time of the metric in nanoseconds\n * @param collectorMetricExporterBase\n */\nexport function toCollectorExportMetricServiceRequest(metrics, startTime, collectorExporterBase) {\n    var groupedMetrics = groupMetricsByResourceAndLibrary(metrics);\n    var additionalAttributes = Object.assign({}, collectorExporterBase.attributes);\n    return {\n        resourceMetrics: toCollectorResourceMetrics(groupedMetrics, additionalAttributes, startTime),\n    };\n}\n/**\n * Takes an array of metrics and groups them by resource and instrumentation\n * library\n * @param metrics metrics\n */\nexport function groupMetricsByResourceAndLibrary(metrics) {\n    return metrics.reduce(function (metricMap, metric) {\n        //group by resource\n        var resourceMetrics = metricMap.get(metric.resource);\n        if (!resourceMetrics) {\n            resourceMetrics = new Map();\n            metricMap.set(metric.resource, resourceMetrics);\n        }\n        //group by instrumentation library\n        var libMetrics = resourceMetrics.get(metric.instrumentationLibrary);\n        if (!libMetrics) {\n            libMetrics = new Array();\n            resourceMetrics.set(metric.instrumentationLibrary, libMetrics);\n        }\n        libMetrics.push(metric);\n        return metricMap;\n    }, new Map());\n}\n/**\n * Convert to InstrumentationLibraryMetrics\n * @param instrumentationLibrary\n * @param metrics\n * @param startTime\n */\nfunction toCollectorInstrumentationLibraryMetrics(instrumentationLibrary, metrics, startTime) {\n    return {\n        metrics: metrics.map(function (metric) { return toCollectorMetric(metric, startTime); }),\n        instrumentationLibrary: instrumentationLibrary,\n    };\n}\n/**\n * Returns a list of resource metrics which will be exported to the collector\n * @param groupedSpans\n * @param baseAttributes\n */\nfunction toCollectorResourceMetrics(groupedMetrics, baseAttributes, startTime) {\n    return Array.from(groupedMetrics, function (_a) {\n        var resource = _a[0], libMetrics = _a[1];\n        return {\n            resource: toCollectorResource(resource, baseAttributes),\n            instrumentationLibraryMetrics: Array.from(libMetrics, function (_a) {\n                var instrumentationLibrary = _a[0], metrics = _a[1];\n                return toCollectorInstrumentationLibraryMetrics(instrumentationLibrary, metrics, startTime);\n            }),\n        };\n    });\n}\n//# sourceMappingURL=transformMetrics.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { CollectorExporterBrowserBase } from './CollectorExporterBrowserBase';\nimport { toCollectorExportMetricServiceRequest } from '../../transformMetrics';\nimport { getEnv, baggageUtils } from '@opentelemetry/core';\nvar DEFAULT_COLLECTOR_URL = 'http://localhost:55681/v1/metrics';\n/**\n * Collector Metric Exporter for Web\n */\nvar CollectorMetricExporter = /** @class */ (function (_super) {\n    __extends(CollectorMetricExporter, _super);\n    function CollectorMetricExporter(config) {\n        if (config === void 0) { config = {}; }\n        var _this = _super.call(this, config) || this;\n        // Converts time to nanoseconds\n        _this._startTime = new Date().getTime() * 1000000;\n        _this._headers = Object.assign(_this._headers, baggageUtils.parseKeyPairsIntoRecord(getEnv().OTEL_EXPORTER_OTLP_METRICS_HEADERS));\n        return _this;\n    }\n    CollectorMetricExporter.prototype.convert = function (metrics) {\n        return toCollectorExportMetricServiceRequest(metrics, this._startTime, this);\n    };\n    CollectorMetricExporter.prototype.getDefaultUrl = function (config) {\n        return typeof config.url === 'string'\n            ? config.url\n            : getEnv().OTEL_EXPORTER_OTLP_METRICS_ENDPOINT.length > 0\n                ? getEnv().OTEL_EXPORTER_OTLP_METRICS_ENDPOINT\n                : getEnv().OTEL_EXPORTER_OTLP_ENDPOINT.length > 0\n                    ? getEnv().OTEL_EXPORTER_OTLP_ENDPOINT\n                    : DEFAULT_COLLECTOR_URL;\n    };\n    return CollectorMetricExporter;\n}(CollectorExporterBrowserBase));\nexport { CollectorMetricExporter };\n//# sourceMappingURL=CollectorMetricExporter.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\nexport var SemanticAttributes = {\n    /**\n    * The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).\n    *\n    * Note: This may be different from `faas.id` if an alias is involved.\n    */\n    AWS_LAMBDA_INVOKED_ARN: 'aws.lambda.invoked_arn',\n    /**\n    * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n    */\n    DB_SYSTEM: 'db.system',\n    /**\n    * The connection string used to connect to the database. It is recommended to remove embedded credentials.\n    */\n    DB_CONNECTION_STRING: 'db.connection_string',\n    /**\n    * Username for accessing the database.\n    */\n    DB_USER: 'db.user',\n    /**\n    * The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.\n    */\n    DB_JDBC_DRIVER_CLASSNAME: 'db.jdbc.driver_classname',\n    /**\n    * If no [tech-specific attribute](#call-level-attributes-for-specific-technologies) is defined, this attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).\n    *\n    * Note: In some SQL databases, the database name to be used is called &#34;schema name&#34;.\n    */\n    DB_NAME: 'db.name',\n    /**\n    * The database statement being executed.\n    *\n    * Note: The value may be sanitized to exclude sensitive information.\n    */\n    DB_STATEMENT: 'db.statement',\n    /**\n    * The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.\n    *\n    * Note: When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.\n    */\n    DB_OPERATION: 'db.operation',\n    /**\n    * The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.\n    *\n    * Note: If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but still recommended if non-standard).\n    */\n    DB_MSSQL_INSTANCE_NAME: 'db.mssql.instance_name',\n    /**\n    * The name of the keyspace being accessed. To be used instead of the generic `db.name` attribute.\n    */\n    DB_CASSANDRA_KEYSPACE: 'db.cassandra.keyspace',\n    /**\n    * The fetch size used for paging, i.e. how many rows will be returned at once.\n    */\n    DB_CASSANDRA_PAGE_SIZE: 'db.cassandra.page_size',\n    /**\n    * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n    */\n    DB_CASSANDRA_CONSISTENCY_LEVEL: 'db.cassandra.consistency_level',\n    /**\n    * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n    *\n    * Note: This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n    */\n    DB_CASSANDRA_TABLE: 'db.cassandra.table',\n    /**\n    * Whether or not the query is idempotent.\n    */\n    DB_CASSANDRA_IDEMPOTENCE: 'db.cassandra.idempotence',\n    /**\n    * The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.\n    */\n    DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT: 'db.cassandra.speculative_execution_count',\n    /**\n    * The ID of the coordinating node for a query.\n    */\n    DB_CASSANDRA_COORDINATOR_ID: 'db.cassandra.coordinator.id',\n    /**\n    * The data center of the coordinating node for a query.\n    */\n    DB_CASSANDRA_COORDINATOR_DC: 'db.cassandra.coordinator.dc',\n    /**\n    * The [HBase namespace](https://hbase.apache.org/book.html#_namespace) being accessed. To be used instead of the generic `db.name` attribute.\n    */\n    DB_HBASE_NAMESPACE: 'db.hbase.namespace',\n    /**\n    * The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.\n    */\n    DB_REDIS_DATABASE_INDEX: 'db.redis.database_index',\n    /**\n    * The collection being accessed within the database stated in `db.name`.\n    */\n    DB_MONGODB_COLLECTION: 'db.mongodb.collection',\n    /**\n    * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n    *\n    * Note: It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n    */\n    DB_SQL_TABLE: 'db.sql.table',\n    /**\n    * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n    */\n    EXCEPTION_TYPE: 'exception.type',\n    /**\n    * The exception message.\n    */\n    EXCEPTION_MESSAGE: 'exception.message',\n    /**\n    * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n    */\n    EXCEPTION_STACKTRACE: 'exception.stacktrace',\n    /**\n    * SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.\n    *\n    * Note: An exception is considered to have escaped (or left) the scope of a span,\n  if that span is ended while the exception is still logically &#34;in flight&#34;.\n  This may be actually &#34;in flight&#34; in some languages (e.g. if the exception\n  is passed to a Context manager&#39;s `__exit__` method in Python) but will\n  usually be caught at the point of recording the exception in most languages.\n  \n  It is usually not possible to determine at the point where an exception is thrown\n  whether it will escape the scope of a span.\n  However, it is trivial to know that an exception\n  will escape, if one checks for an active exception just before ending the span,\n  as done in the [example above](#exception-end-example).\n  \n  It follows that an exception may still escape the scope of the span\n  even if the `exception.escaped` attribute was not set or set to false,\n  since the event might have been recorded at a time where it was not\n  clear whether the exception will escape.\n    */\n    EXCEPTION_ESCAPED: 'exception.escaped',\n    /**\n    * Type of the trigger on which the function is executed.\n    */\n    FAAS_TRIGGER: 'faas.trigger',\n    /**\n    * The execution ID of the current function execution.\n    */\n    FAAS_EXECUTION: 'faas.execution',\n    /**\n    * The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.\n    */\n    FAAS_DOCUMENT_COLLECTION: 'faas.document.collection',\n    /**\n    * Describes the type of the operation that was performed on the data.\n    */\n    FAAS_DOCUMENT_OPERATION: 'faas.document.operation',\n    /**\n    * A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n    */\n    FAAS_DOCUMENT_TIME: 'faas.document.time',\n    /**\n    * The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.\n    */\n    FAAS_DOCUMENT_NAME: 'faas.document.name',\n    /**\n    * A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n    */\n    FAAS_TIME: 'faas.time',\n    /**\n    * A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).\n    */\n    FAAS_CRON: 'faas.cron',\n    /**\n    * A boolean that is true if the serverless function is executed for the first time (aka cold-start).\n    */\n    FAAS_COLDSTART: 'faas.coldstart',\n    /**\n    * The name of the invoked function.\n    *\n    * Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n    */\n    FAAS_INVOKED_NAME: 'faas.invoked_name',\n    /**\n    * The cloud provider of the invoked function.\n    *\n    * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n    */\n    FAAS_INVOKED_PROVIDER: 'faas.invoked_provider',\n    /**\n    * The cloud region of the invoked function.\n    *\n    * Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n    */\n    FAAS_INVOKED_REGION: 'faas.invoked_region',\n    /**\n    * Transport protocol used. See note below.\n    */\n    NET_TRANSPORT: 'net.transport',\n    /**\n    * Remote address of the peer (dotted decimal for IPv4 or [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6).\n    */\n    NET_PEER_IP: 'net.peer.ip',\n    /**\n    * Remote port number.\n    */\n    NET_PEER_PORT: 'net.peer.port',\n    /**\n    * Remote hostname or similar, see note below.\n    */\n    NET_PEER_NAME: 'net.peer.name',\n    /**\n    * Like `net.peer.ip` but for the host IP. Useful in case of a multi-IP host.\n    */\n    NET_HOST_IP: 'net.host.ip',\n    /**\n    * Like `net.peer.port` but for the host port.\n    */\n    NET_HOST_PORT: 'net.host.port',\n    /**\n    * Local hostname or similar, see note below.\n    */\n    NET_HOST_NAME: 'net.host.name',\n    /**\n    * The internet connection type currently being used by the host.\n    */\n    NET_HOST_CONNECTION_TYPE: 'net.host.connection.type',\n    /**\n    * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n    */\n    NET_HOST_CONNECTION_SUBTYPE: 'net.host.connection.subtype',\n    /**\n    * The name of the mobile carrier.\n    */\n    NET_HOST_CARRIER_NAME: 'net.host.carrier.name',\n    /**\n    * The mobile carrier country code.\n    */\n    NET_HOST_CARRIER_MCC: 'net.host.carrier.mcc',\n    /**\n    * The mobile carrier network code.\n    */\n    NET_HOST_CARRIER_MNC: 'net.host.carrier.mnc',\n    /**\n    * The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.\n    */\n    NET_HOST_CARRIER_ICC: 'net.host.carrier.icc',\n    /**\n    * The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.\n    */\n    PEER_SERVICE: 'peer.service',\n    /**\n    * Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system.\n    */\n    ENDUSER_ID: 'enduser.id',\n    /**\n    * Actual/assumed role the client is making the request under extracted from token or application security context.\n    */\n    ENDUSER_ROLE: 'enduser.role',\n    /**\n    * Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).\n    */\n    ENDUSER_SCOPE: 'enduser.scope',\n    /**\n    * Current &#34;managed&#34; thread ID (as opposed to OS thread ID).\n    */\n    THREAD_ID: 'thread.id',\n    /**\n    * Current thread name.\n    */\n    THREAD_NAME: 'thread.name',\n    /**\n    * The method or function name, or equivalent (usually rightmost part of the code unit&#39;s name).\n    */\n    CODE_FUNCTION: 'code.function',\n    /**\n    * The &#34;namespace&#34; within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.\n    */\n    CODE_NAMESPACE: 'code.namespace',\n    /**\n    * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).\n    */\n    CODE_FILEPATH: 'code.filepath',\n    /**\n    * The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.\n    */\n    CODE_LINENO: 'code.lineno',\n    /**\n    * HTTP request method.\n    */\n    HTTP_METHOD: 'http.method',\n    /**\n    * Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.\n    *\n    * Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute&#39;s value should be `https://www.example.com/`.\n    */\n    HTTP_URL: 'http.url',\n    /**\n    * The full request target as passed in a HTTP request line or equivalent.\n    */\n    HTTP_TARGET: 'http.target',\n    /**\n    * The value of the [HTTP host header](https://tools.ietf.org/html/rfc7230#section-5.4). When the header is empty or not present, this attribute should be the same.\n    */\n    HTTP_HOST: 'http.host',\n    /**\n    * The URI scheme identifying the used protocol.\n    */\n    HTTP_SCHEME: 'http.scheme',\n    /**\n    * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n    */\n    HTTP_STATUS_CODE: 'http.status_code',\n    /**\n    * Kind of HTTP protocol used.\n    *\n    * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n    */\n    HTTP_FLAVOR: 'http.flavor',\n    /**\n    * Value of the [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) header sent by the client.\n    */\n    HTTP_USER_AGENT: 'http.user_agent',\n    /**\n    * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n    */\n    HTTP_REQUEST_CONTENT_LENGTH: 'http.request_content_length',\n    /**\n    * The size of the uncompressed request payload body after transport decoding. Not set if transport encoding not used.\n    */\n    HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED: 'http.request_content_length_uncompressed',\n    /**\n    * The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n    */\n    HTTP_RESPONSE_CONTENT_LENGTH: 'http.response_content_length',\n    /**\n    * The size of the uncompressed response payload body after transport decoding. Not set if transport encoding not used.\n    */\n    HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED: 'http.response_content_length_uncompressed',\n    /**\n    * The primary server name of the matched virtual host. This should be obtained via configuration. If no such configuration can be obtained, this attribute MUST NOT be set ( `net.host.name` should be used instead).\n    *\n    * Note: `http.url` is usually not readily available on the server side but would have to be assembled in a cumbersome and sometimes lossy process from other information (see e.g. open-telemetry/opentelemetry-python/pull/148). It is thus preferred to supply the raw data that is available.\n    */\n    HTTP_SERVER_NAME: 'http.server_name',\n    /**\n    * The matched route (path template).\n    */\n    HTTP_ROUTE: 'http.route',\n    /**\n    * The IP address of the original client behind all proxies, if known (e.g. from [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)).\n    *\n    * Note: This is not necessarily the same as `net.peer.ip`, which would identify the network-level peer, which may be a proxy.\n    */\n    HTTP_CLIENT_IP: 'http.client_ip',\n    /**\n    * The keys in the `RequestItems` object field.\n    */\n    AWS_DYNAMODB_TABLE_NAMES: 'aws.dynamodb.table_names',\n    /**\n    * The JSON-serialized value of each item in the `ConsumedCapacity` response field.\n    */\n    AWS_DYNAMODB_CONSUMED_CAPACITY: 'aws.dynamodb.consumed_capacity',\n    /**\n    * The JSON-serialized value of the `ItemCollectionMetrics` response field.\n    */\n    AWS_DYNAMODB_ITEM_COLLECTION_METRICS: 'aws.dynamodb.item_collection_metrics',\n    /**\n    * The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.\n    */\n    AWS_DYNAMODB_PROVISIONED_READ_CAPACITY: 'aws.dynamodb.provisioned_read_capacity',\n    /**\n    * The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.\n    */\n    AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY: 'aws.dynamodb.provisioned_write_capacity',\n    /**\n    * The value of the `ConsistentRead` request parameter.\n    */\n    AWS_DYNAMODB_CONSISTENT_READ: 'aws.dynamodb.consistent_read',\n    /**\n    * The value of the `ProjectionExpression` request parameter.\n    */\n    AWS_DYNAMODB_PROJECTION: 'aws.dynamodb.projection',\n    /**\n    * The value of the `Limit` request parameter.\n    */\n    AWS_DYNAMODB_LIMIT: 'aws.dynamodb.limit',\n    /**\n    * The value of the `AttributesToGet` request parameter.\n    */\n    AWS_DYNAMODB_ATTRIBUTES_TO_GET: 'aws.dynamodb.attributes_to_get',\n    /**\n    * The value of the `IndexName` request parameter.\n    */\n    AWS_DYNAMODB_INDEX_NAME: 'aws.dynamodb.index_name',\n    /**\n    * The value of the `Select` request parameter.\n    */\n    AWS_DYNAMODB_SELECT: 'aws.dynamodb.select',\n    /**\n    * The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field.\n    */\n    AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES: 'aws.dynamodb.global_secondary_indexes',\n    /**\n    * The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.\n    */\n    AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES: 'aws.dynamodb.local_secondary_indexes',\n    /**\n    * The value of the `ExclusiveStartTableName` request parameter.\n    */\n    AWS_DYNAMODB_EXCLUSIVE_START_TABLE: 'aws.dynamodb.exclusive_start_table',\n    /**\n    * The the number of items in the `TableNames` response parameter.\n    */\n    AWS_DYNAMODB_TABLE_COUNT: 'aws.dynamodb.table_count',\n    /**\n    * The value of the `ScanIndexForward` request parameter.\n    */\n    AWS_DYNAMODB_SCAN_FORWARD: 'aws.dynamodb.scan_forward',\n    /**\n    * The value of the `Segment` request parameter.\n    */\n    AWS_DYNAMODB_SEGMENT: 'aws.dynamodb.segment',\n    /**\n    * The value of the `TotalSegments` request parameter.\n    */\n    AWS_DYNAMODB_TOTAL_SEGMENTS: 'aws.dynamodb.total_segments',\n    /**\n    * The value of the `Count` response parameter.\n    */\n    AWS_DYNAMODB_COUNT: 'aws.dynamodb.count',\n    /**\n    * The value of the `ScannedCount` response parameter.\n    */\n    AWS_DYNAMODB_SCANNED_COUNT: 'aws.dynamodb.scanned_count',\n    /**\n    * The JSON-serialized value of each item in the `AttributeDefinitions` request field.\n    */\n    AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS: 'aws.dynamodb.attribute_definitions',\n    /**\n    * The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field.\n    */\n    AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES: 'aws.dynamodb.global_secondary_index_updates',\n    /**\n    * A string identifying the messaging system.\n    */\n    MESSAGING_SYSTEM: 'messaging.system',\n    /**\n    * The message destination name. This might be equal to the span name but is required nevertheless.\n    */\n    MESSAGING_DESTINATION: 'messaging.destination',\n    /**\n    * The kind of message destination.\n    */\n    MESSAGING_DESTINATION_KIND: 'messaging.destination_kind',\n    /**\n    * A boolean that is true if the message destination is temporary.\n    */\n    MESSAGING_TEMP_DESTINATION: 'messaging.temp_destination',\n    /**\n    * The name of the transport protocol.\n    */\n    MESSAGING_PROTOCOL: 'messaging.protocol',\n    /**\n    * The version of the transport protocol.\n    */\n    MESSAGING_PROTOCOL_VERSION: 'messaging.protocol_version',\n    /**\n    * Connection string.\n    */\n    MESSAGING_URL: 'messaging.url',\n    /**\n    * A value used by the messaging system as an identifier for the message, represented as a string.\n    */\n    MESSAGING_MESSAGE_ID: 'messaging.message_id',\n    /**\n    * The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called &#34;Correlation ID&#34;.\n    */\n    MESSAGING_CONVERSATION_ID: 'messaging.conversation_id',\n    /**\n    * The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported.\n    */\n    MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES: 'messaging.message_payload_size_bytes',\n    /**\n    * The compressed size of the message payload in bytes.\n    */\n    MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES: 'messaging.message_payload_compressed_size_bytes',\n    /**\n    * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n    */\n    MESSAGING_OPERATION: 'messaging.operation',\n    /**\n    * RabbitMQ message routing key.\n    */\n    MESSAGING_RABBITMQ_ROUTING_KEY: 'messaging.rabbitmq.routing_key',\n    /**\n    * Message keys in Kafka are used for grouping alike messages to ensure they&#39;re processed on the same partition. They differ from `messaging.message_id` in that they&#39;re not unique. If the key is `null`, the attribute MUST NOT be set.\n    *\n    * Note: If the key type is not string, it&#39;s string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don&#39;t include its value.\n    */\n    MESSAGING_KAFKA_MESSAGE_KEY: 'messaging.kafka.message_key',\n    /**\n    * Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.\n    */\n    MESSAGING_KAFKA_CONSUMER_GROUP: 'messaging.kafka.consumer_group',\n    /**\n    * Client Id for the Consumer or Producer that is handling the message.\n    */\n    MESSAGING_KAFKA_CLIENT_ID: 'messaging.kafka.client_id',\n    /**\n    * Partition the message is sent to.\n    */\n    MESSAGING_KAFKA_PARTITION: 'messaging.kafka.partition',\n    /**\n    * A boolean that is true if the message is a tombstone.\n    */\n    MESSAGING_KAFKA_TOMBSTONE: 'messaging.kafka.tombstone',\n    /**\n    * A string identifying the remoting system.\n    */\n    RPC_SYSTEM: 'rpc.system',\n    /**\n    * The full (logical) name of the service being called, including its package name, if applicable.\n    *\n    * Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n    */\n    RPC_SERVICE: 'rpc.service',\n    /**\n    * The name of the (logical) method being called, must be equal to the $method part in the span name.\n    *\n    * Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n    */\n    RPC_METHOD: 'rpc.method',\n    /**\n    * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n    */\n    RPC_GRPC_STATUS_CODE: 'rpc.grpc.status_code',\n    /**\n    * Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted.\n    */\n    RPC_JSONRPC_VERSION: 'rpc.jsonrpc.version',\n    /**\n    * `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.\n    */\n    RPC_JSONRPC_REQUEST_ID: 'rpc.jsonrpc.request_id',\n    /**\n    * `error.code` property of response if it is an error response.\n    */\n    RPC_JSONRPC_ERROR_CODE: 'rpc.jsonrpc.error_code',\n    /**\n    * `error.message` property of response if it is an error response.\n    */\n    RPC_JSONRPC_ERROR_MESSAGE: 'rpc.jsonrpc.error_message',\n};\n// Enum definitions\nexport var DbSystemValues;\n(function (DbSystemValues) {\n    /** Some other SQL database. Fallback only. See notes. */\n    DbSystemValues[\"OTHER_SQL\"] = \"other_sql\";\n    /** Microsoft SQL Server. */\n    DbSystemValues[\"MSSQL\"] = \"mssql\";\n    /** MySQL. */\n    DbSystemValues[\"MYSQL\"] = \"mysql\";\n    /** Oracle Database. */\n    DbSystemValues[\"ORACLE\"] = \"oracle\";\n    /** IBM Db2. */\n    DbSystemValues[\"DB2\"] = \"db2\";\n    /** PostgreSQL. */\n    DbSystemValues[\"POSTGRESQL\"] = \"postgresql\";\n    /** Amazon Redshift. */\n    DbSystemValues[\"REDSHIFT\"] = \"redshift\";\n    /** Apache Hive. */\n    DbSystemValues[\"HIVE\"] = \"hive\";\n    /** Cloudscape. */\n    DbSystemValues[\"CLOUDSCAPE\"] = \"cloudscape\";\n    /** HyperSQL DataBase. */\n    DbSystemValues[\"HSQLDB\"] = \"hsqldb\";\n    /** Progress Database. */\n    DbSystemValues[\"PROGRESS\"] = \"progress\";\n    /** SAP MaxDB. */\n    DbSystemValues[\"MAXDB\"] = \"maxdb\";\n    /** SAP HANA. */\n    DbSystemValues[\"HANADB\"] = \"hanadb\";\n    /** Ingres. */\n    DbSystemValues[\"INGRES\"] = \"ingres\";\n    /** FirstSQL. */\n    DbSystemValues[\"FIRSTSQL\"] = \"firstsql\";\n    /** EnterpriseDB. */\n    DbSystemValues[\"EDB\"] = \"edb\";\n    /** InterSystems Caché. */\n    DbSystemValues[\"CACHE\"] = \"cache\";\n    /** Adabas (Adaptable Database System). */\n    DbSystemValues[\"ADABAS\"] = \"adabas\";\n    /** Firebird. */\n    DbSystemValues[\"FIREBIRD\"] = \"firebird\";\n    /** Apache Derby. */\n    DbSystemValues[\"DERBY\"] = \"derby\";\n    /** FileMaker. */\n    DbSystemValues[\"FILEMAKER\"] = \"filemaker\";\n    /** Informix. */\n    DbSystemValues[\"INFORMIX\"] = \"informix\";\n    /** InstantDB. */\n    DbSystemValues[\"INSTANTDB\"] = \"instantdb\";\n    /** InterBase. */\n    DbSystemValues[\"INTERBASE\"] = \"interbase\";\n    /** MariaDB. */\n    DbSystemValues[\"MARIADB\"] = \"mariadb\";\n    /** Netezza. */\n    DbSystemValues[\"NETEZZA\"] = \"netezza\";\n    /** Pervasive PSQL. */\n    DbSystemValues[\"PERVASIVE\"] = \"pervasive\";\n    /** PointBase. */\n    DbSystemValues[\"POINTBASE\"] = \"pointbase\";\n    /** SQLite. */\n    DbSystemValues[\"SQLITE\"] = \"sqlite\";\n    /** Sybase. */\n    DbSystemValues[\"SYBASE\"] = \"sybase\";\n    /** Teradata. */\n    DbSystemValues[\"TERADATA\"] = \"teradata\";\n    /** Vertica. */\n    DbSystemValues[\"VERTICA\"] = \"vertica\";\n    /** H2. */\n    DbSystemValues[\"H2\"] = \"h2\";\n    /** ColdFusion IMQ. */\n    DbSystemValues[\"COLDFUSION\"] = \"coldfusion\";\n    /** Apache Cassandra. */\n    DbSystemValues[\"CASSANDRA\"] = \"cassandra\";\n    /** Apache HBase. */\n    DbSystemValues[\"HBASE\"] = \"hbase\";\n    /** MongoDB. */\n    DbSystemValues[\"MONGODB\"] = \"mongodb\";\n    /** Redis. */\n    DbSystemValues[\"REDIS\"] = \"redis\";\n    /** Couchbase. */\n    DbSystemValues[\"COUCHBASE\"] = \"couchbase\";\n    /** CouchDB. */\n    DbSystemValues[\"COUCHDB\"] = \"couchdb\";\n    /** Microsoft Azure Cosmos DB. */\n    DbSystemValues[\"COSMOSDB\"] = \"cosmosdb\";\n    /** Amazon DynamoDB. */\n    DbSystemValues[\"DYNAMODB\"] = \"dynamodb\";\n    /** Neo4j. */\n    DbSystemValues[\"NEO4J\"] = \"neo4j\";\n    /** Apache Geode. */\n    DbSystemValues[\"GEODE\"] = \"geode\";\n    /** Elasticsearch. */\n    DbSystemValues[\"ELASTICSEARCH\"] = \"elasticsearch\";\n    /** Memcached. */\n    DbSystemValues[\"MEMCACHED\"] = \"memcached\";\n    /** CockroachDB. */\n    DbSystemValues[\"COCKROACHDB\"] = \"cockroachdb\";\n})(DbSystemValues || (DbSystemValues = {}));\nexport var DbCassandraConsistencyLevelValues;\n(function (DbCassandraConsistencyLevelValues) {\n    /** all. */\n    DbCassandraConsistencyLevelValues[\"ALL\"] = \"all\";\n    /** each_quorum. */\n    DbCassandraConsistencyLevelValues[\"EACH_QUORUM\"] = \"each_quorum\";\n    /** quorum. */\n    DbCassandraConsistencyLevelValues[\"QUORUM\"] = \"quorum\";\n    /** local_quorum. */\n    DbCassandraConsistencyLevelValues[\"LOCAL_QUORUM\"] = \"local_quorum\";\n    /** one. */\n    DbCassandraConsistencyLevelValues[\"ONE\"] = \"one\";\n    /** two. */\n    DbCassandraConsistencyLevelValues[\"TWO\"] = \"two\";\n    /** three. */\n    DbCassandraConsistencyLevelValues[\"THREE\"] = \"three\";\n    /** local_one. */\n    DbCassandraConsistencyLevelValues[\"LOCAL_ONE\"] = \"local_one\";\n    /** any. */\n    DbCassandraConsistencyLevelValues[\"ANY\"] = \"any\";\n    /** serial. */\n    DbCassandraConsistencyLevelValues[\"SERIAL\"] = \"serial\";\n    /** local_serial. */\n    DbCassandraConsistencyLevelValues[\"LOCAL_SERIAL\"] = \"local_serial\";\n})(DbCassandraConsistencyLevelValues || (DbCassandraConsistencyLevelValues = {}));\nexport var FaasTriggerValues;\n(function (FaasTriggerValues) {\n    /** A response to some data source operation such as a database or filesystem read/write. */\n    FaasTriggerValues[\"DATASOURCE\"] = \"datasource\";\n    /** To provide an answer to an inbound HTTP request. */\n    FaasTriggerValues[\"HTTP\"] = \"http\";\n    /** A function is set to be executed when messages are sent to a messaging system. */\n    FaasTriggerValues[\"PUBSUB\"] = \"pubsub\";\n    /** A function is scheduled to be executed regularly. */\n    FaasTriggerValues[\"TIMER\"] = \"timer\";\n    /** If none of the others apply. */\n    FaasTriggerValues[\"OTHER\"] = \"other\";\n})(FaasTriggerValues || (FaasTriggerValues = {}));\nexport var FaasDocumentOperationValues;\n(function (FaasDocumentOperationValues) {\n    /** When a new object is created. */\n    FaasDocumentOperationValues[\"INSERT\"] = \"insert\";\n    /** When an object is modified. */\n    FaasDocumentOperationValues[\"EDIT\"] = \"edit\";\n    /** When an object is deleted. */\n    FaasDocumentOperationValues[\"DELETE\"] = \"delete\";\n})(FaasDocumentOperationValues || (FaasDocumentOperationValues = {}));\nexport var FaasInvokedProviderValues;\n(function (FaasInvokedProviderValues) {\n    /** Alibaba Cloud. */\n    FaasInvokedProviderValues[\"ALIBABA_CLOUD\"] = \"alibaba_cloud\";\n    /** Amazon Web Services. */\n    FaasInvokedProviderValues[\"AWS\"] = \"aws\";\n    /** Microsoft Azure. */\n    FaasInvokedProviderValues[\"AZURE\"] = \"azure\";\n    /** Google Cloud Platform. */\n    FaasInvokedProviderValues[\"GCP\"] = \"gcp\";\n})(FaasInvokedProviderValues || (FaasInvokedProviderValues = {}));\nexport var NetTransportValues;\n(function (NetTransportValues) {\n    /** ip_tcp. */\n    NetTransportValues[\"IP_TCP\"] = \"ip_tcp\";\n    /** ip_udp. */\n    NetTransportValues[\"IP_UDP\"] = \"ip_udp\";\n    /** Another IP-based protocol. */\n    NetTransportValues[\"IP\"] = \"ip\";\n    /** Unix Domain socket. See below. */\n    NetTransportValues[\"UNIX\"] = \"unix\";\n    /** Named or anonymous pipe. See note below. */\n    NetTransportValues[\"PIPE\"] = \"pipe\";\n    /** In-process communication. */\n    NetTransportValues[\"INPROC\"] = \"inproc\";\n    /** Something else (non IP-based). */\n    NetTransportValues[\"OTHER\"] = \"other\";\n})(NetTransportValues || (NetTransportValues = {}));\nexport var NetHostConnectionTypeValues;\n(function (NetHostConnectionTypeValues) {\n    /** wifi. */\n    NetHostConnectionTypeValues[\"WIFI\"] = \"wifi\";\n    /** wired. */\n    NetHostConnectionTypeValues[\"WIRED\"] = \"wired\";\n    /** cell. */\n    NetHostConnectionTypeValues[\"CELL\"] = \"cell\";\n    /** unavailable. */\n    NetHostConnectionTypeValues[\"UNAVAILABLE\"] = \"unavailable\";\n    /** unknown. */\n    NetHostConnectionTypeValues[\"UNKNOWN\"] = \"unknown\";\n})(NetHostConnectionTypeValues || (NetHostConnectionTypeValues = {}));\nexport var NetHostConnectionSubtypeValues;\n(function (NetHostConnectionSubtypeValues) {\n    /** GPRS. */\n    NetHostConnectionSubtypeValues[\"GPRS\"] = \"gprs\";\n    /** EDGE. */\n    NetHostConnectionSubtypeValues[\"EDGE\"] = \"edge\";\n    /** UMTS. */\n    NetHostConnectionSubtypeValues[\"UMTS\"] = \"umts\";\n    /** CDMA. */\n    NetHostConnectionSubtypeValues[\"CDMA\"] = \"cdma\";\n    /** EVDO Rel. 0. */\n    NetHostConnectionSubtypeValues[\"EVDO_0\"] = \"evdo_0\";\n    /** EVDO Rev. A. */\n    NetHostConnectionSubtypeValues[\"EVDO_A\"] = \"evdo_a\";\n    /** CDMA2000 1XRTT. */\n    NetHostConnectionSubtypeValues[\"CDMA2000_1XRTT\"] = \"cdma2000_1xrtt\";\n    /** HSDPA. */\n    NetHostConnectionSubtypeValues[\"HSDPA\"] = \"hsdpa\";\n    /** HSUPA. */\n    NetHostConnectionSubtypeValues[\"HSUPA\"] = \"hsupa\";\n    /** HSPA. */\n    NetHostConnectionSubtypeValues[\"HSPA\"] = \"hspa\";\n    /** IDEN. */\n    NetHostConnectionSubtypeValues[\"IDEN\"] = \"iden\";\n    /** EVDO Rev. B. */\n    NetHostConnectionSubtypeValues[\"EVDO_B\"] = \"evdo_b\";\n    /** LTE. */\n    NetHostConnectionSubtypeValues[\"LTE\"] = \"lte\";\n    /** EHRPD. */\n    NetHostConnectionSubtypeValues[\"EHRPD\"] = \"ehrpd\";\n    /** HSPAP. */\n    NetHostConnectionSubtypeValues[\"HSPAP\"] = \"hspap\";\n    /** GSM. */\n    NetHostConnectionSubtypeValues[\"GSM\"] = \"gsm\";\n    /** TD-SCDMA. */\n    NetHostConnectionSubtypeValues[\"TD_SCDMA\"] = \"td_scdma\";\n    /** IWLAN. */\n    NetHostConnectionSubtypeValues[\"IWLAN\"] = \"iwlan\";\n    /** 5G NR (New Radio). */\n    NetHostConnectionSubtypeValues[\"NR\"] = \"nr\";\n    /** 5G NRNSA (New Radio Non-Standalone). */\n    NetHostConnectionSubtypeValues[\"NRNSA\"] = \"nrnsa\";\n    /** LTE CA. */\n    NetHostConnectionSubtypeValues[\"LTE_CA\"] = \"lte_ca\";\n})(NetHostConnectionSubtypeValues || (NetHostConnectionSubtypeValues = {}));\nexport var HttpFlavorValues;\n(function (HttpFlavorValues) {\n    /** HTTP 1.0. */\n    HttpFlavorValues[\"HTTP_1_0\"] = \"1.0\";\n    /** HTTP 1.1. */\n    HttpFlavorValues[\"HTTP_1_1\"] = \"1.1\";\n    /** HTTP 2. */\n    HttpFlavorValues[\"HTTP_2_0\"] = \"2.0\";\n    /** SPDY protocol. */\n    HttpFlavorValues[\"SPDY\"] = \"SPDY\";\n    /** QUIC protocol. */\n    HttpFlavorValues[\"QUIC\"] = \"QUIC\";\n})(HttpFlavorValues || (HttpFlavorValues = {}));\nexport var MessagingDestinationKindValues;\n(function (MessagingDestinationKindValues) {\n    /** A message sent to a queue. */\n    MessagingDestinationKindValues[\"QUEUE\"] = \"queue\";\n    /** A message sent to a topic. */\n    MessagingDestinationKindValues[\"TOPIC\"] = \"topic\";\n})(MessagingDestinationKindValues || (MessagingDestinationKindValues = {}));\nexport var MessagingOperationValues;\n(function (MessagingOperationValues) {\n    /** receive. */\n    MessagingOperationValues[\"RECEIVE\"] = \"receive\";\n    /** process. */\n    MessagingOperationValues[\"PROCESS\"] = \"process\";\n})(MessagingOperationValues || (MessagingOperationValues = {}));\nexport var RpcGrpcStatusCodeValues;\n(function (RpcGrpcStatusCodeValues) {\n    /** OK. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"OK\"] = 0] = \"OK\";\n    /** CANCELLED. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"CANCELLED\"] = 1] = \"CANCELLED\";\n    /** UNKNOWN. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n    /** INVALID_ARGUMENT. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n    /** DEADLINE_EXCEEDED. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n    /** NOT_FOUND. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n    /** ALREADY_EXISTS. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n    /** PERMISSION_DENIED. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n    /** RESOURCE_EXHAUSTED. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n    /** FAILED_PRECONDITION. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n    /** ABORTED. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"ABORTED\"] = 10] = \"ABORTED\";\n    /** OUT_OF_RANGE. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n    /** UNIMPLEMENTED. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n    /** INTERNAL. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"INTERNAL\"] = 13] = \"INTERNAL\";\n    /** UNAVAILABLE. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n    /** DATA_LOSS. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n    /** UNAUTHENTICATED. */\n    RpcGrpcStatusCodeValues[RpcGrpcStatusCodeValues[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n})(RpcGrpcStatusCodeValues || (RpcGrpcStatusCodeValues = {}));\n//# sourceMappingURL=SemanticAttributes.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\nexport var SemanticResourceAttributes = {\n    /**\n    * Name of the cloud provider.\n    */\n    CLOUD_PROVIDER: 'cloud.provider',\n    /**\n    * The cloud account ID the resource is assigned to.\n    */\n    CLOUD_ACCOUNT_ID: 'cloud.account.id',\n    /**\n    * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n    */\n    CLOUD_REGION: 'cloud.region',\n    /**\n    * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n    *\n    * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.\n    */\n    CLOUD_AVAILABILITY_ZONE: 'cloud.availability_zone',\n    /**\n    * The cloud platform in use.\n    *\n    * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n    */\n    CLOUD_PLATFORM: 'cloud.platform',\n    /**\n    * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n    */\n    AWS_ECS_CONTAINER_ARN: 'aws.ecs.container.arn',\n    /**\n    * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n    */\n    AWS_ECS_CLUSTER_ARN: 'aws.ecs.cluster.arn',\n    /**\n    * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n    */\n    AWS_ECS_LAUNCHTYPE: 'aws.ecs.launchtype',\n    /**\n    * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n    */\n    AWS_ECS_TASK_ARN: 'aws.ecs.task.arn',\n    /**\n    * The task definition family this task definition is a member of.\n    */\n    AWS_ECS_TASK_FAMILY: 'aws.ecs.task.family',\n    /**\n    * The revision for this task definition.\n    */\n    AWS_ECS_TASK_REVISION: 'aws.ecs.task.revision',\n    /**\n    * The ARN of an EKS cluster.\n    */\n    AWS_EKS_CLUSTER_ARN: 'aws.eks.cluster.arn',\n    /**\n    * The name(s) of the AWS log group(s) an application is writing to.\n    *\n    * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n    */\n    AWS_LOG_GROUP_NAMES: 'aws.log.group.names',\n    /**\n    * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n    *\n    * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n    */\n    AWS_LOG_GROUP_ARNS: 'aws.log.group.arns',\n    /**\n    * The name(s) of the AWS log stream(s) an application is writing to.\n    */\n    AWS_LOG_STREAM_NAMES: 'aws.log.stream.names',\n    /**\n    * The ARN(s) of the AWS log stream(s).\n    *\n    * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n    */\n    AWS_LOG_STREAM_ARNS: 'aws.log.stream.arns',\n    /**\n    * Container name.\n    */\n    CONTAINER_NAME: 'container.name',\n    /**\n    * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n    */\n    CONTAINER_ID: 'container.id',\n    /**\n    * The container runtime managing this container.\n    */\n    CONTAINER_RUNTIME: 'container.runtime',\n    /**\n    * Name of the image the container was built on.\n    */\n    CONTAINER_IMAGE_NAME: 'container.image.name',\n    /**\n    * Container image tag.\n    */\n    CONTAINER_IMAGE_TAG: 'container.image.tag',\n    /**\n    * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n    */\n    DEPLOYMENT_ENVIRONMENT: 'deployment.environment',\n    /**\n    * A unique identifier representing the device.\n    *\n    * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n    */\n    DEVICE_ID: 'device.id',\n    /**\n    * The model identifier for the device.\n    *\n    * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n    */\n    DEVICE_MODEL_IDENTIFIER: 'device.model.identifier',\n    /**\n    * The marketing name for the device model.\n    *\n    * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n    */\n    DEVICE_MODEL_NAME: 'device.model.name',\n    /**\n    * The name of the single function that this runtime instance executes.\n    *\n    * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).\n    */\n    FAAS_NAME: 'faas.name',\n    /**\n    * The unique ID of the single function that this runtime instance executes.\n    *\n    * Note: Depending on the cloud provider, use:\n  \n  * **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\n  Take care not to use the &#34;invoked ARN&#34; directly but replace any\n  [alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple\n  different aliases.\n  * **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n  * **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).\n  \n  On some providers, it may not be possible to determine the full ID at startup,\n  which is why this field cannot be made required. For example, on AWS the account ID\n  part of the ARN is not available without calling another AWS API\n  which may be deemed too slow for a short-running lambda function.\n  As an alternative, consider setting `faas.id` as a span attribute instead.\n    */\n    FAAS_ID: 'faas.id',\n    /**\n    * The immutable version of the function being executed.\n    *\n    * Note: Depending on the cloud provider and platform, use:\n  \n  * **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n    (an integer represented as a decimal string).\n  * **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n    (i.e., the function name plus the revision suffix).\n  * **Google Cloud Functions:** The value of the\n    [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n  * **Azure Functions:** Not applicable. Do not set this attribute.\n    */\n    FAAS_VERSION: 'faas.version',\n    /**\n    * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n    *\n    * Note: * **AWS Lambda:** Use the (full) log stream name.\n    */\n    FAAS_INSTANCE: 'faas.instance',\n    /**\n    * The amount of memory available to the serverless function in MiB.\n    *\n    * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n    */\n    FAAS_MAX_MEMORY: 'faas.max_memory',\n    /**\n    * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n    */\n    HOST_ID: 'host.id',\n    /**\n    * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n    */\n    HOST_NAME: 'host.name',\n    /**\n    * Type of host. For Cloud, this must be the machine type.\n    */\n    HOST_TYPE: 'host.type',\n    /**\n    * The CPU architecture the host system is running on.\n    */\n    HOST_ARCH: 'host.arch',\n    /**\n    * Name of the VM image or OS install the host was instantiated from.\n    */\n    HOST_IMAGE_NAME: 'host.image.name',\n    /**\n    * VM image ID. For Cloud, this value is from the provider.\n    */\n    HOST_IMAGE_ID: 'host.image.id',\n    /**\n    * The version string of the VM image as defined in [Version Attributes](README.md#version-attributes).\n    */\n    HOST_IMAGE_VERSION: 'host.image.version',\n    /**\n    * The name of the cluster.\n    */\n    K8S_CLUSTER_NAME: 'k8s.cluster.name',\n    /**\n    * The name of the Node.\n    */\n    K8S_NODE_NAME: 'k8s.node.name',\n    /**\n    * The UID of the Node.\n    */\n    K8S_NODE_UID: 'k8s.node.uid',\n    /**\n    * The name of the namespace that the pod is running in.\n    */\n    K8S_NAMESPACE_NAME: 'k8s.namespace.name',\n    /**\n    * The UID of the Pod.\n    */\n    K8S_POD_UID: 'k8s.pod.uid',\n    /**\n    * The name of the Pod.\n    */\n    K8S_POD_NAME: 'k8s.pod.name',\n    /**\n    * The name of the Container in a Pod template.\n    */\n    K8S_CONTAINER_NAME: 'k8s.container.name',\n    /**\n    * The UID of the ReplicaSet.\n    */\n    K8S_REPLICASET_UID: 'k8s.replicaset.uid',\n    /**\n    * The name of the ReplicaSet.\n    */\n    K8S_REPLICASET_NAME: 'k8s.replicaset.name',\n    /**\n    * The UID of the Deployment.\n    */\n    K8S_DEPLOYMENT_UID: 'k8s.deployment.uid',\n    /**\n    * The name of the Deployment.\n    */\n    K8S_DEPLOYMENT_NAME: 'k8s.deployment.name',\n    /**\n    * The UID of the StatefulSet.\n    */\n    K8S_STATEFULSET_UID: 'k8s.statefulset.uid',\n    /**\n    * The name of the StatefulSet.\n    */\n    K8S_STATEFULSET_NAME: 'k8s.statefulset.name',\n    /**\n    * The UID of the DaemonSet.\n    */\n    K8S_DAEMONSET_UID: 'k8s.daemonset.uid',\n    /**\n    * The name of the DaemonSet.\n    */\n    K8S_DAEMONSET_NAME: 'k8s.daemonset.name',\n    /**\n    * The UID of the Job.\n    */\n    K8S_JOB_UID: 'k8s.job.uid',\n    /**\n    * The name of the Job.\n    */\n    K8S_JOB_NAME: 'k8s.job.name',\n    /**\n    * The UID of the CronJob.\n    */\n    K8S_CRONJOB_UID: 'k8s.cronjob.uid',\n    /**\n    * The name of the CronJob.\n    */\n    K8S_CRONJOB_NAME: 'k8s.cronjob.name',\n    /**\n    * The operating system type.\n    */\n    OS_TYPE: 'os.type',\n    /**\n    * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n    */\n    OS_DESCRIPTION: 'os.description',\n    /**\n    * Human readable operating system name.\n    */\n    OS_NAME: 'os.name',\n    /**\n    * The version string of the operating system as defined in [Version Attributes](../../resource/semantic_conventions/README.md#version-attributes).\n    */\n    OS_VERSION: 'os.version',\n    /**\n    * Process identifier (PID).\n    */\n    PROCESS_PID: 'process.pid',\n    /**\n    * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n    */\n    PROCESS_EXECUTABLE_NAME: 'process.executable.name',\n    /**\n    * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n    */\n    PROCESS_EXECUTABLE_PATH: 'process.executable.path',\n    /**\n    * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n    */\n    PROCESS_COMMAND: 'process.command',\n    /**\n    * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n    */\n    PROCESS_COMMAND_LINE: 'process.command_line',\n    /**\n    * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n    */\n    PROCESS_COMMAND_ARGS: 'process.command_args',\n    /**\n    * The username of the user that owns the process.\n    */\n    PROCESS_OWNER: 'process.owner',\n    /**\n    * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n    */\n    PROCESS_RUNTIME_NAME: 'process.runtime.name',\n    /**\n    * The version of the runtime of this process, as returned by the runtime without modification.\n    */\n    PROCESS_RUNTIME_VERSION: 'process.runtime.version',\n    /**\n    * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n    */\n    PROCESS_RUNTIME_DESCRIPTION: 'process.runtime.description',\n    /**\n    * Logical name of the service.\n    *\n    * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n    */\n    SERVICE_NAME: 'service.name',\n    /**\n    * A namespace for `service.name`.\n    *\n    * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n    */\n    SERVICE_NAMESPACE: 'service.namespace',\n    /**\n    * The string ID of the service instance.\n    *\n    * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n    */\n    SERVICE_INSTANCE_ID: 'service.instance.id',\n    /**\n    * The version string of the service API or implementation.\n    */\n    SERVICE_VERSION: 'service.version',\n    /**\n    * The name of the telemetry SDK as defined above.\n    */\n    TELEMETRY_SDK_NAME: 'telemetry.sdk.name',\n    /**\n    * The language of the telemetry SDK.\n    */\n    TELEMETRY_SDK_LANGUAGE: 'telemetry.sdk.language',\n    /**\n    * The version string of the telemetry SDK.\n    */\n    TELEMETRY_SDK_VERSION: 'telemetry.sdk.version',\n    /**\n    * The version string of the auto instrumentation agent, if used.\n    */\n    TELEMETRY_AUTO_VERSION: 'telemetry.auto.version',\n    /**\n    * The name of the web engine.\n    */\n    WEBENGINE_NAME: 'webengine.name',\n    /**\n    * The version of the web engine.\n    */\n    WEBENGINE_VERSION: 'webengine.version',\n    /**\n    * Additional description of the web engine (e.g. detailed version and edition information).\n    */\n    WEBENGINE_DESCRIPTION: 'webengine.description',\n};\n// Enum definitions\nexport var CloudProviderValues;\n(function (CloudProviderValues) {\n    /** Alibaba Cloud. */\n    CloudProviderValues[\"ALIBABA_CLOUD\"] = \"alibaba_cloud\";\n    /** Amazon Web Services. */\n    CloudProviderValues[\"AWS\"] = \"aws\";\n    /** Microsoft Azure. */\n    CloudProviderValues[\"AZURE\"] = \"azure\";\n    /** Google Cloud Platform. */\n    CloudProviderValues[\"GCP\"] = \"gcp\";\n})(CloudProviderValues || (CloudProviderValues = {}));\nexport var CloudPlatformValues;\n(function (CloudPlatformValues) {\n    /** Alibaba Cloud Elastic Compute Service. */\n    CloudPlatformValues[\"ALIBABA_CLOUD_ECS\"] = \"alibaba_cloud_ecs\";\n    /** Alibaba Cloud Function Compute. */\n    CloudPlatformValues[\"ALIBABA_CLOUD_FC\"] = \"alibaba_cloud_fc\";\n    /** AWS Elastic Compute Cloud. */\n    CloudPlatformValues[\"AWS_EC2\"] = \"aws_ec2\";\n    /** AWS Elastic Container Service. */\n    CloudPlatformValues[\"AWS_ECS\"] = \"aws_ecs\";\n    /** AWS Elastic Kubernetes Service. */\n    CloudPlatformValues[\"AWS_EKS\"] = \"aws_eks\";\n    /** AWS Lambda. */\n    CloudPlatformValues[\"AWS_LAMBDA\"] = \"aws_lambda\";\n    /** AWS Elastic Beanstalk. */\n    CloudPlatformValues[\"AWS_ELASTIC_BEANSTALK\"] = \"aws_elastic_beanstalk\";\n    /** Azure Virtual Machines. */\n    CloudPlatformValues[\"AZURE_VM\"] = \"azure_vm\";\n    /** Azure Container Instances. */\n    CloudPlatformValues[\"AZURE_CONTAINER_INSTANCES\"] = \"azure_container_instances\";\n    /** Azure Kubernetes Service. */\n    CloudPlatformValues[\"AZURE_AKS\"] = \"azure_aks\";\n    /** Azure Functions. */\n    CloudPlatformValues[\"AZURE_FUNCTIONS\"] = \"azure_functions\";\n    /** Azure App Service. */\n    CloudPlatformValues[\"AZURE_APP_SERVICE\"] = \"azure_app_service\";\n    /** Google Cloud Compute Engine (GCE). */\n    CloudPlatformValues[\"GCP_COMPUTE_ENGINE\"] = \"gcp_compute_engine\";\n    /** Google Cloud Run. */\n    CloudPlatformValues[\"GCP_CLOUD_RUN\"] = \"gcp_cloud_run\";\n    /** Google Cloud Kubernetes Engine (GKE). */\n    CloudPlatformValues[\"GCP_KUBERNETES_ENGINE\"] = \"gcp_kubernetes_engine\";\n    /** Google Cloud Functions (GCF). */\n    CloudPlatformValues[\"GCP_CLOUD_FUNCTIONS\"] = \"gcp_cloud_functions\";\n    /** Google Cloud App Engine (GAE). */\n    CloudPlatformValues[\"GCP_APP_ENGINE\"] = \"gcp_app_engine\";\n})(CloudPlatformValues || (CloudPlatformValues = {}));\nexport var AwsEcsLaunchtypeValues;\n(function (AwsEcsLaunchtypeValues) {\n    /** ec2. */\n    AwsEcsLaunchtypeValues[\"EC2\"] = \"ec2\";\n    /** fargate. */\n    AwsEcsLaunchtypeValues[\"FARGATE\"] = \"fargate\";\n})(AwsEcsLaunchtypeValues || (AwsEcsLaunchtypeValues = {}));\nexport var HostArchValues;\n(function (HostArchValues) {\n    /** AMD64. */\n    HostArchValues[\"AMD64\"] = \"amd64\";\n    /** ARM32. */\n    HostArchValues[\"ARM32\"] = \"arm32\";\n    /** ARM64. */\n    HostArchValues[\"ARM64\"] = \"arm64\";\n    /** Itanium. */\n    HostArchValues[\"IA64\"] = \"ia64\";\n    /** 32-bit PowerPC. */\n    HostArchValues[\"PPC32\"] = \"ppc32\";\n    /** 64-bit PowerPC. */\n    HostArchValues[\"PPC64\"] = \"ppc64\";\n    /** 32-bit x86. */\n    HostArchValues[\"X86\"] = \"x86\";\n})(HostArchValues || (HostArchValues = {}));\nexport var OsTypeValues;\n(function (OsTypeValues) {\n    /** Microsoft Windows. */\n    OsTypeValues[\"WINDOWS\"] = \"windows\";\n    /** Linux. */\n    OsTypeValues[\"LINUX\"] = \"linux\";\n    /** Apple Darwin. */\n    OsTypeValues[\"DARWIN\"] = \"darwin\";\n    /** FreeBSD. */\n    OsTypeValues[\"FREEBSD\"] = \"freebsd\";\n    /** NetBSD. */\n    OsTypeValues[\"NETBSD\"] = \"netbsd\";\n    /** OpenBSD. */\n    OsTypeValues[\"OPENBSD\"] = \"openbsd\";\n    /** DragonFly BSD. */\n    OsTypeValues[\"DRAGONFLYBSD\"] = \"dragonflybsd\";\n    /** HP-UX (Hewlett Packard Unix). */\n    OsTypeValues[\"HPUX\"] = \"hpux\";\n    /** AIX (Advanced Interactive eXecutive). */\n    OsTypeValues[\"AIX\"] = \"aix\";\n    /** Oracle Solaris. */\n    OsTypeValues[\"SOLARIS\"] = \"solaris\";\n    /** IBM z/OS. */\n    OsTypeValues[\"Z_OS\"] = \"z_os\";\n})(OsTypeValues || (OsTypeValues = {}));\nexport var TelemetrySdkLanguageValues;\n(function (TelemetrySdkLanguageValues) {\n    /** cpp. */\n    TelemetrySdkLanguageValues[\"CPP\"] = \"cpp\";\n    /** dotnet. */\n    TelemetrySdkLanguageValues[\"DOTNET\"] = \"dotnet\";\n    /** erlang. */\n    TelemetrySdkLanguageValues[\"ERLANG\"] = \"erlang\";\n    /** go. */\n    TelemetrySdkLanguageValues[\"GO\"] = \"go\";\n    /** java. */\n    TelemetrySdkLanguageValues[\"JAVA\"] = \"java\";\n    /** nodejs. */\n    TelemetrySdkLanguageValues[\"NODEJS\"] = \"nodejs\";\n    /** php. */\n    TelemetrySdkLanguageValues[\"PHP\"] = \"php\";\n    /** python. */\n    TelemetrySdkLanguageValues[\"PYTHON\"] = \"python\";\n    /** ruby. */\n    TelemetrySdkLanguageValues[\"RUBY\"] = \"ruby\";\n    /** webjs. */\n    TelemetrySdkLanguageValues[\"WEBJS\"] = \"webjs\";\n})(TelemetrySdkLanguageValues || (TelemetrySdkLanguageValues = {}));\n//# sourceMappingURL=SemanticResourceAttributes.js.map","import {\n  ArrayVector,\n  DataFrame,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  Field,\n  FieldType,\n  MutableDataFrame,\n  TraceKeyValuePair,\n  TraceLog,\n  TraceSpanRow,\n} from '@grafana/data';\nimport { SpanKind, SpanStatus, SpanStatusCode } from '@opentelemetry/api';\nimport { collectorTypes } from '@opentelemetry/exporter-collector';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { createGraphFrames } from './graphTransform';\n\nexport function createTableFrame(\n  logsFrame: DataFrame,\n  datasourceUid: string,\n  datasourceName: string,\n  traceRegexs: string[]\n): DataFrame {\n  const tableFrame = new MutableDataFrame({\n    fields: [\n      {\n        name: 'Time',\n        type: FieldType.time,\n        config: {\n          custom: {\n            width: 150,\n          },\n        },\n      },\n      {\n        name: 'traceID',\n        type: FieldType.string,\n        config: {\n          displayNameFromDS: 'Trace ID',\n          custom: { width: 300 },\n          links: [\n            {\n              title: 'Click to open trace ${__value.raw}',\n              url: '',\n              internal: {\n                datasourceUid,\n                datasourceName,\n                query: {\n                  query: '${__value.raw}',\n                },\n              },\n            },\n          ],\n        },\n      },\n      {\n        name: 'Message',\n        type: FieldType.string,\n      },\n    ],\n    meta: {\n      preferredVisualisationType: 'table',\n    },\n  });\n\n  if (!logsFrame || traceRegexs.length === 0) {\n    return tableFrame;\n  }\n\n  const timeField = logsFrame.fields.find((f) => f.type === FieldType.time);\n\n  // Going through all string fields to look for trace IDs\n  for (let field of logsFrame.fields) {\n    let hasMatch = false;\n    if (field.type === FieldType.string) {\n      const values = field.values.toArray();\n      for (let i = 0; i < values.length; i++) {\n        const line = values[i];\n        if (line) {\n          for (let traceRegex of traceRegexs) {\n            const match = (line as string).match(traceRegex);\n            if (match) {\n              const traceId = match[1];\n              const time = timeField ? timeField.values.get(i) : null;\n              tableFrame.fields[0].values.add(time);\n              tableFrame.fields[1].values.add(traceId);\n              tableFrame.fields[2].values.add(line);\n              hasMatch = true;\n            }\n          }\n        }\n      }\n    }\n    if (hasMatch) {\n      break;\n    }\n  }\n\n  return tableFrame;\n}\n\nexport function transformTraceList(\n  response: DataQueryResponse,\n  datasourceId: string,\n  datasourceName: string,\n  traceRegexs: string[]\n): DataQueryResponse {\n  response.data.forEach((data, index) => {\n    const frame = createTableFrame(data, datasourceId, datasourceName, traceRegexs);\n    response.data[index] = frame;\n  });\n  return response;\n}\n\n// Don't forget to change the backend code when the id representation changed\nfunction transformBase64IDToHexString(base64: string) {\n  const raw = atob(base64);\n  let result = '';\n  for (let i = 0; i < raw.length; i++) {\n    const hex = raw.charCodeAt(i).toString(16);\n    result += hex.length === 2 ? hex : '0' + hex;\n  }\n\n  return result.length > 16 ? result.slice(16) : result;\n}\n\nfunction transformHexStringToBase64ID(hex: string) {\n  const hexArray = hex.match(/\\w{2}/g) || [];\n  return btoa(\n    hexArray\n      .map(function (a) {\n        return String.fromCharCode(parseInt(a, 16));\n      })\n      .join('')\n  );\n}\n\nfunction getAttributeValue(value: collectorTypes.opentelemetryProto.common.v1.AnyValue): any {\n  if (value.stringValue) {\n    return value.stringValue;\n  }\n\n  if (value.boolValue !== undefined) {\n    return Boolean(value.boolValue);\n  }\n\n  if (value.intValue !== undefined) {\n    return Number.parseInt(value.intValue as any, 10);\n  }\n\n  if (value.doubleValue) {\n    return Number.parseFloat(value.doubleValue as any);\n  }\n\n  if (value.arrayValue) {\n    const arrayValue = [];\n    for (const arValue of value.arrayValue.values) {\n      arrayValue.push(getAttributeValue(arValue));\n    }\n    return arrayValue;\n  }\n\n  return '';\n}\n\nfunction resourceToProcess(resource: collectorTypes.opentelemetryProto.resource.v1.Resource | undefined) {\n  const serviceTags: TraceKeyValuePair[] = [];\n  let serviceName = 'OTLPResourceNoServiceName';\n  if (!resource) {\n    return { serviceName, serviceTags };\n  }\n\n  for (const attribute of resource.attributes) {\n    if (attribute.key === SemanticResourceAttributes.SERVICE_NAME) {\n      serviceName = attribute.value.stringValue || serviceName;\n    }\n    serviceTags.push({ key: attribute.key, value: getAttributeValue(attribute.value) });\n  }\n\n  return { serviceName, serviceTags };\n}\n\nfunction getSpanTags(\n  span: collectorTypes.opentelemetryProto.trace.v1.Span,\n  instrumentationLibrary?: collectorTypes.opentelemetryProto.common.v1.InstrumentationLibrary\n): TraceKeyValuePair[] {\n  const spanTags: TraceKeyValuePair[] = [];\n\n  if (instrumentationLibrary) {\n    if (instrumentationLibrary.name) {\n      spanTags.push({ key: 'otel.library.name', value: instrumentationLibrary.name });\n    }\n    if (instrumentationLibrary.version) {\n      spanTags.push({ key: 'otel.library.version', value: instrumentationLibrary.version });\n    }\n  }\n\n  if (span.attributes) {\n    for (const attribute of span.attributes) {\n      spanTags.push({ key: attribute.key, value: getAttributeValue(attribute.value) });\n    }\n  }\n\n  if (span.status) {\n    if (span.status.code && (span.status.code as any) !== SpanStatusCode.UNSET) {\n      spanTags.push({\n        key: 'otel.status_code',\n        value: SpanStatusCode[span.status.code],\n      });\n      if (span.status.message) {\n        spanTags.push({ key: 'otel.status_description', value: span.status.message });\n      }\n    }\n    if (span.status.code === SpanStatusCode.ERROR) {\n      spanTags.push({ key: 'error', value: true });\n    }\n  }\n\n  if (\n    span.kind !== undefined &&\n    span.kind !== collectorTypes.opentelemetryProto.trace.v1.Span.SpanKind.SPAN_KIND_INTERNAL\n  ) {\n    spanTags.push({\n      key: 'span.kind',\n      value: SpanKind[collectorTypes.opentelemetryProto.trace.v1.Span.SpanKind[span.kind] as any].toLowerCase(),\n    });\n  }\n\n  return spanTags;\n}\n\nfunction getLogs(span: collectorTypes.opentelemetryProto.trace.v1.Span) {\n  const logs: TraceLog[] = [];\n  if (span.events) {\n    for (const event of span.events) {\n      const fields: TraceKeyValuePair[] = [];\n      if (event.attributes) {\n        for (const attribute of event.attributes) {\n          fields.push({ key: attribute.key, value: getAttributeValue(attribute.value) });\n        }\n      }\n      logs.push({ fields, timestamp: event.timeUnixNano / 1000000 });\n    }\n  }\n\n  return logs;\n}\n\nexport function transformFromOTLP(\n  traceData: collectorTypes.opentelemetryProto.trace.v1.ResourceSpans[],\n  nodeGraph = false\n): DataQueryResponse {\n  const frame = new MutableDataFrame({\n    fields: [\n      { name: 'traceID', type: FieldType.string },\n      { name: 'spanID', type: FieldType.string },\n      { name: 'parentSpanID', type: FieldType.string },\n      { name: 'operationName', type: FieldType.string },\n      { name: 'serviceName', type: FieldType.string },\n      { name: 'serviceTags', type: FieldType.other },\n      { name: 'startTime', type: FieldType.number },\n      { name: 'duration', type: FieldType.number },\n      { name: 'logs', type: FieldType.other },\n      { name: 'tags', type: FieldType.other },\n    ],\n    meta: {\n      preferredVisualisationType: 'trace',\n      custom: {\n        traceFormat: 'otlp',\n      },\n    },\n  });\n  try {\n    for (const data of traceData) {\n      const { serviceName, serviceTags } = resourceToProcess(data.resource);\n      for (const librarySpan of data.instrumentationLibrarySpans) {\n        for (const span of librarySpan.spans) {\n          frame.add({\n            traceID: transformBase64IDToHexString(span.traceId),\n            spanID: transformBase64IDToHexString(span.spanId),\n            parentSpanID: transformBase64IDToHexString(span.parentSpanId || ''),\n            operationName: span.name || '',\n            serviceName,\n            serviceTags,\n            startTime: span.startTimeUnixNano! / 1000000,\n            duration: (span.endTimeUnixNano! - span.startTimeUnixNano!) / 1000000,\n            tags: getSpanTags(span, librarySpan.instrumentationLibrary),\n            logs: getLogs(span),\n          } as TraceSpanRow);\n        }\n      }\n    }\n  } catch (error) {\n    console.error(error);\n    return { error: { message: 'JSON is not valid OpenTelemetry format: ' + error }, data: [] };\n  }\n\n  let data = [frame];\n  if (nodeGraph) {\n    data.push(...(createGraphFrames(frame) as MutableDataFrame[]));\n  }\n\n  return { data };\n}\n\n/**\n * Transforms trace dataframes to the OpenTelemetry format\n */\nexport function transformToOTLP(\n  data: MutableDataFrame\n): { batches: collectorTypes.opentelemetryProto.trace.v1.ResourceSpans[] } {\n  let result: { batches: collectorTypes.opentelemetryProto.trace.v1.ResourceSpans[] } = {\n    batches: [],\n  };\n\n  // Lookup object to see which batch contains spans for which services\n  let services: { [key: string]: number } = {};\n\n  for (let i = 0; i < data.length; i++) {\n    const span = data.get(i);\n\n    // Group spans based on service\n    if (!services[span.serviceName]) {\n      services[span.serviceName] = result.batches.length;\n      result.batches.push({\n        resource: {\n          attributes: [],\n          droppedAttributesCount: 0,\n        },\n        instrumentationLibrarySpans: [\n          {\n            spans: [],\n          },\n        ],\n      });\n    }\n\n    let batchIndex = services[span.serviceName];\n\n    // Populate resource attributes from service tags\n    if (result.batches[batchIndex].resource!.attributes.length === 0) {\n      result.batches[batchIndex].resource!.attributes = tagsToAttributes(span.serviceTags);\n    }\n\n    // Populate instrumentation library if it exists\n    if (!result.batches[batchIndex].instrumentationLibrarySpans[0].instrumentationLibrary) {\n      let libraryName = span.tags.find((t: TraceKeyValuePair) => t.key === 'otel.library.name')?.value;\n      if (libraryName) {\n        result.batches[batchIndex].instrumentationLibrarySpans[0].instrumentationLibrary = {\n          name: libraryName,\n          version: span.tags.find((t: TraceKeyValuePair) => t.key === 'otel.library.version')?.value,\n        };\n      }\n    }\n\n    result.batches[batchIndex].instrumentationLibrarySpans[0].spans.push({\n      traceId: transformHexStringToBase64ID(span.traceID.padStart(32, '0')),\n      spanId: transformHexStringToBase64ID(span.spanID),\n      traceState: '',\n      parentSpanId: transformHexStringToBase64ID(span.parentSpanID || ''),\n      name: span.operationName,\n      kind: getOTLPSpanKind(span.tags) as any,\n      startTimeUnixNano: span.startTime * 1000000,\n      endTimeUnixNano: (span.startTime + span.duration) * 1000000,\n      attributes: tagsToAttributes(span.tags),\n      droppedAttributesCount: 0,\n      droppedEventsCount: 0,\n      droppedLinksCount: 0,\n      status: getOTLPStatus(span.tags),\n      events: getOTLPEvents(span.logs),\n    });\n  }\n\n  return result;\n}\n\nfunction getOTLPSpanKind(tags: TraceKeyValuePair[]): string | undefined {\n  let spanKind = undefined;\n  const spanKindTagValue = tags.find((t) => t.key === 'span.kind')?.value;\n  switch (spanKindTagValue) {\n    case 'server':\n      spanKind = 'SPAN_KIND_SERVER';\n      break;\n    case 'client':\n      spanKind = 'SPAN_KIND_CLIENT';\n      break;\n    case 'producer':\n      spanKind = 'SPAN_KIND_PRODUCER';\n      break;\n    case 'consumer':\n      spanKind = 'SPAN_KIND_CONSUMER';\n      break;\n  }\n\n  return spanKind;\n}\n\n/**\n * Converts key-value tags to OTLP attributes and removes tags added by Grafana\n */\nfunction tagsToAttributes(tags: TraceKeyValuePair[]): collectorTypes.opentelemetryProto.common.v1.KeyValue[] {\n  return tags\n    .filter(\n      (t) =>\n        ![\n          'span.kind',\n          'otel.library.name',\n          'otel.libary.version',\n          'otel.status_description',\n          'otel.status_code',\n        ].includes(t.key)\n    )\n    .reduce<collectorTypes.opentelemetryProto.common.v1.KeyValue[]>(\n      (attributes, tag) => [...attributes, { key: tag.key, value: toAttributeValue(tag) }],\n      []\n    );\n}\n\n/**\n * Returns the correct OTLP AnyValue based on the value of the tag value\n */\nfunction toAttributeValue(tag: TraceKeyValuePair): collectorTypes.opentelemetryProto.common.v1.AnyValue {\n  if (typeof tag.value === 'string') {\n    return { stringValue: tag.value };\n  } else if (typeof tag.value === 'boolean') {\n    return { boolValue: tag.value };\n  } else if (typeof tag.value === 'number') {\n    if (tag.value % 1 === 0) {\n      return { intValue: tag.value };\n    } else {\n      return { doubleValue: tag.value };\n    }\n  } else if (typeof tag.value === 'object') {\n    if (Array.isArray(tag.value)) {\n      const values: collectorTypes.opentelemetryProto.common.v1.AnyValue[] = [];\n      for (const val of tag.value) {\n        values.push(toAttributeValue(val));\n      }\n\n      return { arrayValue: { values } };\n    }\n  }\n  return { stringValue: tag.value };\n}\n\nfunction getOTLPStatus(tags: TraceKeyValuePair[]): SpanStatus | undefined {\n  let status = undefined;\n  const statusCodeTag = tags.find((t) => t.key === 'otel.status_code');\n  if (statusCodeTag) {\n    status = {\n      code: statusCodeTag.value,\n      message: tags.find((t) => t.key === 'otel_status_description')?.value,\n    };\n  }\n\n  return status;\n}\n\nfunction getOTLPEvents(logs: TraceLog[]): collectorTypes.opentelemetryProto.trace.v1.Span.Event[] | undefined {\n  if (!logs || !logs.length) {\n    return undefined;\n  }\n\n  let events: collectorTypes.opentelemetryProto.trace.v1.Span.Event[] = [];\n  for (const log of logs) {\n    let event: collectorTypes.opentelemetryProto.trace.v1.Span.Event = {\n      timeUnixNano: log.timestamp * 1000000,\n      attributes: [],\n      droppedAttributesCount: 0,\n      name: '',\n    };\n    for (const field of log.fields) {\n      event.attributes!.push({\n        key: field.key,\n        value: toAttributeValue(field),\n      });\n    }\n    events.push(event);\n  }\n  return events;\n}\n\nexport function transformTrace(response: DataQueryResponse, nodeGraph = false): DataQueryResponse {\n  // We need to parse some of the fields which contain stringified json.\n  // Seems like we can't just map the values as the frame we got from backend has some default processing\n  // and will stringify the json back when we try to set it. So we create a new field and swap it instead.\n  const frame: DataFrame = response.data[0];\n\n  if (!frame) {\n    return emptyDataQueryResponse;\n  }\n\n  parseJsonFields(frame);\n\n  let data = [...response.data];\n  if (nodeGraph) {\n    data.push(...createGraphFrames(frame));\n  }\n\n  return {\n    ...response,\n    data,\n  };\n}\n\n/**\n * Change fields which are json string into JS objects. Modifies the frame in place.\n */\nfunction parseJsonFields(frame: DataFrame) {\n  for (const fieldName of ['serviceTags', 'logs', 'tags']) {\n    const field = frame.fields.find((f) => f.name === fieldName);\n    if (field) {\n      const fieldIndex = frame.fields.indexOf(field);\n      const values = new ArrayVector();\n      const newField: Field = {\n        ...field,\n        values,\n        type: FieldType.other,\n      };\n\n      for (let i = 0; i < field.values.length; i++) {\n        const value = field.values.get(i);\n        values.set(i, value === '' ? undefined : JSON.parse(value));\n      }\n      frame.fields[fieldIndex] = newField;\n    }\n  }\n}\n\ntype SearchResponse = {\n  traceID: string;\n  rootServiceName: string;\n  rootTraceName: string;\n  startTimeUnixNano: string;\n  durationMs: number;\n};\n\nexport function createTableFrameFromSearch(data: SearchResponse[], instanceSettings: DataSourceInstanceSettings) {\n  const frame = new MutableDataFrame({\n    fields: [\n      {\n        name: 'traceID',\n        type: FieldType.string,\n        config: {\n          displayNameFromDS: 'Trace ID',\n          links: [\n            {\n              title: 'Trace: ${__value.raw}',\n              url: '',\n              internal: {\n                datasourceUid: instanceSettings.uid,\n                datasourceName: instanceSettings.name,\n                query: {\n                  query: '${__value.raw}',\n                  queryType: 'traceId',\n                },\n              },\n            },\n          ],\n        },\n      },\n      { name: 'traceName', type: FieldType.string, config: { displayNameFromDS: 'Trace name' } },\n      { name: 'startTime', type: FieldType.time, config: { displayNameFromDS: 'Start time' } },\n      { name: 'duration', type: FieldType.number, config: { displayNameFromDS: 'Duration', unit: 'ms' } },\n    ],\n    meta: {\n      preferredVisualisationType: 'table',\n    },\n  });\n  if (!data?.length) {\n    return frame;\n  }\n  // Show the most recent traces\n  const traceData = data.map(transformToTraceData).sort((a, b) => b?.startTime! - a?.startTime!);\n\n  for (const trace of traceData) {\n    frame.add(trace);\n  }\n\n  return frame;\n}\n\nfunction transformToTraceData(data: SearchResponse) {\n  let traceName = '';\n  if (data.rootServiceName) {\n    traceName += data.rootServiceName + ' ';\n  }\n  if (data.rootTraceName) {\n    traceName += data.rootTraceName;\n  }\n  return {\n    traceID: data.traceID,\n    startTime: parseInt(data.startTimeUnixNano, 10) / 1000 / 1000,\n    duration: data.durationMs,\n    traceName,\n  };\n}\n\nconst emptyDataQueryResponse = {\n  data: [\n    new MutableDataFrame({\n      fields: [\n        {\n          name: 'trace',\n          type: FieldType.trace,\n          values: [],\n        },\n      ],\n      meta: {\n        preferredVisualisationType: 'trace',\n        custom: {\n          traceFormat: 'otlp',\n        },\n      },\n    }),\n  ],\n};\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeMax = Math.max,\n    nativeNow = Date.now;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * This function is like `assignValue` except that it doesn't assign\n * `undefined` values.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignMergeValue(object, key, value) {\n  if ((value !== undefined && !eq(object[key], value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.merge` without support for multiple sources.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} [customizer] The function to customize merged values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMerge(object, source, srcIndex, customizer, stack) {\n  if (object === source) {\n    return;\n  }\n  baseFor(source, function(srcValue, key) {\n    stack || (stack = new Stack);\n    if (isObject(srcValue)) {\n      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n    }\n    else {\n      var newValue = customizer\n        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      if (newValue === undefined) {\n        newValue = srcValue;\n      }\n      assignMergeValue(object, key, newValue);\n    }\n  }, keysIn);\n}\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = safeGet(object, key),\n      srcValue = safeGet(source, key),\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n    : undefined;\n\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    var isArr = isArray(srcValue),\n        isBuff = !isArr && isBuffer(srcValue),\n        isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n    newValue = srcValue;\n    if (isArr || isBuff || isTyped) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      }\n      else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      }\n      else if (isBuff) {\n        isCommon = false;\n        newValue = cloneBuffer(srcValue, true);\n      }\n      else if (isTyped) {\n        isCommon = false;\n        newValue = cloneTypedArray(srcValue, true);\n      }\n      else {\n        newValue = [];\n      }\n    }\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      newValue = objValue;\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      }\n      else if (!isObject(objValue) || isFunction(objValue)) {\n        newValue = initCloneObject(srcValue);\n      }\n    }\n    else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue(object, key, newValue);\n}\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\n/**\n * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction safeGet(object, key) {\n  if (key === 'constructor' && typeof object[key] === 'function') {\n    return;\n  }\n\n  if (key == '__proto__') {\n    return;\n  }\n\n  return object[key];\n}\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Converts `value` to a plain object flattening inherited enumerable string\n * keyed properties of `value` to own properties of the plain object.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Object} Returns the converted plain object.\n * @example\n *\n * function Foo() {\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.assign({ 'a': 1 }, new Foo);\n * // => { 'a': 1, 'b': 2 }\n *\n * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n * // => { 'a': 1, 'b': 2, 'c': 3 }\n */\nfunction toPlainObject(value) {\n  return copyObject(value, keysIn(value));\n}\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\n/**\n * This method is like `_.assign` except that it recursively merges own and\n * inherited enumerable string keyed properties of source objects into the\n * destination object. Source properties that resolve to `undefined` are\n * skipped if a destination value exists. Array and plain object properties\n * are merged recursively. Other objects and value types are overridden by\n * assignment. Source objects are applied from left to right. Subsequent\n * sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = {\n *   'a': [{ 'b': 2 }, { 'd': 4 }]\n * };\n *\n * var other = {\n *   'a': [{ 'c': 3 }, { 'e': 5 }]\n * };\n *\n * _.merge(object, other);\n * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n */\nvar merge = createAssigner(function(object, source, srcIndex) {\n  baseMerge(object, source, srcIndex);\n});\n\n/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = merge;\n"],"names":["getNonOverlappingDuration","ranges","sort","a","b","reduce","acc","range","length","tail","slice","prevStart","prevEnd","start","end","makeSpanMap","getSpan","spanMap","span","index","id","children","parentId","parentIds","push","undefined","getStats","duration","traceDuration","selfDuration","main","toFixedNoTrailingZeros","secondary","n","parseFloat","toFixed","makeFrames","MutableDataFrame","fields","name","Fields","type","FieldType","config","displayName","color","mode","meta","preferredVisualisationType","createGraphFrames","data","nodes","edges","view","DataFrameView","traceEndTime","traceStartTime","Infinity","i","row","get","startTime","findTraceDuration","spanID","parentSpanID","map","c","childrenDuration","stats","serviceName","operationName","convertTraceToGraph","nodesFrame","edgesFrame","node","add","edge","secondsMetric","totalsMetric","failedMetric","serviceMapMetrics","mapPromMetricsToServiceMap","responses","frames","frame","refId","getMetricFrames","nodesMap","edgesMap","collectMetricData","rangeMs","to","valueOf","from","createDF","unit","fixedColor","FieldColorModeId","createServiceMapDataFrames","nodeId","Object","keys","total","seconds","Number","NaN","Math","round","failed","edgeId","source","target","convertToDataFrames","stat","metric","valueName","client","server","BaggageImpl","entries","this","_entries","Map","prototype","getEntry","key","entry","assign","getAllEntries","Array","_a","setEntry","newBaggage","set","removeEntry","delete","removeEntries","_i","arguments","keys_1","clear","baggageEntryMetadataSymbol","Symbol","createBaggage","DiagLogLevel","defaultTextMapGetter","carrier","defaultTextMapSetter","value","createContextKey","description","for","TraceFlags","BaseContext","parentContext","self","_currentContext","getValue","setValue","context","deleteValue","ROOT_CONTEXT","VALID_TRACEID_REGEX","VALID_SPANID_REGEX","INVALID_SPANID","INVALID_TRACEID","INVALID_SPAN_CONTEXT","traceId","spanId","traceFlags","NONE","isValidTraceId","test","isSpanContextValid","spanContext","wrapSpanContext","NonRecordingSpan","_spanContext","setAttribute","_key","_value","setAttributes","_attributes","addEvent","_name","setStatus","_status","updateName","_endTime","isRecording","recordException","_exception","_time","SPAN_KEY","setSpan","deleteSpan","setSpanContext","getSpanContext","NoopTracer","startSpan","options","Boolean","root","parentFromContext","startActiveSpan","arg2","arg3","arg4","opts","ctx","fn","active","contextWithSpanSet","SamplingDecision","SpanKind","SpanStatusCode","NOOP_TRACER","ProxyTracer","_provider","version","_getTracer","_options","_context","_fn","tracer","Reflect","apply","_delegate","getDelegateTracer","NOOP_TRACER_PROVIDER","NoopTracerProvider","getTracer","_version","ProxyTracerProvider","getDelegate","setDelegate","delegate","__spreadArray","il","j","NoopContextManager","with","thisArg","args","call","bind","enable","disable","_globalThis","globalThis","window","VERSION","re","isCompatible","ownVersion","acceptedVersions","Set","rejectedVersions","myVersionMatch","match","ownVersionParsed","globalVersion","_reject","v","_accept","has","globalVersionMatch","globalVersionParsed","_makeCompatibilityCheck","major","split","GLOBAL_OPENTELEMETRY_API_KEY","_global","registerGlobal","instance","diag","allowOverride","api","err","Error","error","stack","message","debug","getGlobal","_b","unregisterGlobal","DiagComponentLogger","props","_namespace","namespace","logProxy","info","warn","verbose","funcName","logger","unshift","DiagAPI","_logProxy","setLogger","logLevel","INFO","oldLogger","newLogger","maxLevel","_filterFunc","theLevel","theFunc","ALL","ERROR","WARN","DEBUG","VERBOSE","createLogLevelDiagLogger","createComponentLogger","_instance","NOOP_CONTEXT_MANAGER","ContextAPI","getInstance","setGlobalContextManager","contextManager","_getContextManager","TraceAPI","_proxyTracerProvider","setGlobalTracerProvider","provider","success","getTracerProvider","NoopTextMapPropagator","inject","_carrier","extract","BAGGAGE_KEY","getBaggage","setBaggage","baggage","deleteBaggage","NOOP_TEXT_MAP_PROPAGATOR","PropagationAPI","setGlobalPropagator","propagator","setter","_getGlobalPropagator","getter","trace","propagation","SUPPRESS_TRACING_KEY","isTracingSuppressed","BAGGAGE_HEADER","parsePairKeyValue","valueProps","keyPairPart","shift","keyPair","metadata","str","decodeURIComponent","trim","join","__TYPE__","toString","parseKeyPairsIntoRecord","filter","headers","HttpBaggagePropagator","keyPairs","encodeURIComponent","getKeyPairs","pair","headerValue","hValue","current","serializeKeyPairs","forEach","baggageEntry","delegateHandler","ex","JSON","stringify","result","getOwnPropertyNames","propertyName","String","getPrototypeOf","flattenException","stringifyException","TracesSamplerValues","globalErrorHandler","ENVIRONMENT_NUMBERS_KEYS","isEnvVarANumber","indexOf","ENVIRONMENT_LISTS_KEYS","isEnvVarAList","DEFAULT_ENVIRONMENT","CONTAINER_NAME","ECS_CONTAINER_METADATA_URI_V4","ECS_CONTAINER_METADATA_URI","HOSTNAME","KUBERNETES_SERVICE_HOST","NAMESPACE","OTEL_BSP_EXPORT_TIMEOUT","OTEL_BSP_MAX_EXPORT_BATCH_SIZE","OTEL_BSP_MAX_QUEUE_SIZE","OTEL_BSP_SCHEDULE_DELAY","OTEL_EXPORTER_JAEGER_AGENT_HOST","OTEL_EXPORTER_JAEGER_ENDPOINT","OTEL_EXPORTER_JAEGER_PASSWORD","OTEL_EXPORTER_JAEGER_USER","OTEL_EXPORTER_OTLP_ENDPOINT","OTEL_EXPORTER_OTLP_TRACES_ENDPOINT","OTEL_EXPORTER_OTLP_METRICS_ENDPOINT","OTEL_EXPORTER_OTLP_HEADERS","OTEL_EXPORTER_OTLP_TRACES_HEADERS","OTEL_EXPORTER_OTLP_METRICS_HEADERS","OTEL_EXPORTER_ZIPKIN_ENDPOINT","OTEL_LOG_LEVEL","OTEL_NO_PATCH_MODULES","OTEL_PROPAGATORS","OTEL_RESOURCE_ATTRIBUTES","OTEL_SERVICE_NAME","OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT","OTEL_SPAN_EVENT_COUNT_LIMIT","OTEL_SPAN_LINK_COUNT_LIMIT","OTEL_TRACES_EXPORTER","OTEL_TRACES_SAMPLER","ParentBasedAlwaysOn","OTEL_TRACES_SAMPLER_ARG","parseNumber","environment","values","min","max","isNaN","parseStringList","output","input","separator","givenValue","logLevelMap","setLogLevelFromEnv","toUpperCase","getEnv","globalEnv","env","parseEnvironment","hexToBase64","hexStr","hexStrLen","hexAsciiCharsStr","hexPair","substring","hexVal","parseInt","fromCharCode","btoa","DbSystemValues","DbCassandraConsistencyLevelValues","FaasTriggerValues","FaasDocumentOperationValues","FaasInvokedProviderValues","NetTransportValues","HttpFlavorValues","MessagingDestinationKindValues","MessagingOperationValues","RpcGrpcStatusCodeValues","otperformance","performance","CloudProviderValues","CloudPlatformValues","AwsEcsLaunchtypeValues","HostArchValues","OsTypeValues","TelemetrySdkLanguageValues","ResourceAttributes","SDK_INFO","WEBJS","ExportResultCode","SECOND_TO_NANOSECONDS","pow","numberToHrtime","epochMillis","epochSeconds","trunc","getTimeOrigin","timeOrigin","perf","timing","fetchStart","hrTime","performanceNow","now","nanos","hrTimeToNanoseconds","CompositePropagator","_propagators","propagators","_fields","p","x","y","concat","constructor","VALID_KEY_REGEX","RegExp","VALID_VALUE_BASE_REGEX","INVALID_VALUE_COMMA_EQUAL_REGEX","TraceState","rawTraceState","_internalState","_parse","traceState","_clone","unset","serialize","_this","_keys","agg","reverse","part","listMember","validateKey","validateValue","size","TRACE_PARENT_HEADER","TRACE_STATE_HEADER","TRACE_PARENT_REGEX","RPCType","HttpTraceContextPropagator","traceParent","traceParentHeader","isArray","exec","parseTraceParent","isRemote","traceStateHeader","state","AlwaysOffSampler","shouldSample","decision","NOT_RECORD","AlwaysOnSampler","RECORD_AND_SAMPLED","CollectorExporterBase","ParentBasedSampler","_c","_d","_root","_remoteParentSampled","remoteParentSampled","_remoteParentNotSampled","remoteParentNotSampled","_localParentSampled","localParentSampled","_localParentNotSampled","localParentNotSampled","spanName","spanKind","attributes","links","SAMPLED","TraceIdRatioBasedSampler","_ratio","_normalize","_upperBound","floor","_accumulate","ratio","accumulation","pos","_isShutdown","_shuttingDownPromise","Promise","resolve","_sendingPromises","url","getDefaultUrl","hostname","shutdown","_concurrencyLimit","concurrencyLimit","onInit","export","items","resultCallback","code","FAILED","_export","then","SUCCESS","catch","reject","send","e","onShutdown","all","extendStatics","opentelemetryProto","__extends","d","setPrototypeOf","__proto__","hasOwnProperty","TypeError","__","create","metrics","v1","AggregationTemporality","ConstantSampler","ConstantDecision","Span","common","ValueType","CollectorExporterError","_super","COLLECTOR_SPAN_KIND_MAPPING","INTERNAL","SPAN_KIND_INTERNAL","SERVER","SPAN_KIND_SERVER","CLIENT","SPAN_KIND_CLIENT","PRODUCER","SPAN_KIND_PRODUCER","CONSUMER","SPAN_KIND_CONSUMER","CollectorExporterBrowserBase","_useXHR","navigator","sendBeacon","_headers","partialHeaders","parseHeaders","addEventListener","removeEventListener","onSuccess","onError","serviceRequest","convert","body","promise","_onSuccess","_onFinish","_onError","splice","xhr","XMLHttpRequest","open","setRequestHeader","k","onreadystatechange","readyState","DONE","status","sendWithXhr","sendWithBeacon","toCollectorAttributes","anyValue","toCollectorAnyValue","toCollectorAttributeKeyValue","stringValue","boolValue","isInteger","intValue","doubleValue","arrayValue","kvlistValue","toCollectorLinks","useHex","link","droppedAttributesCount","toCollectorStatus","spanStatus","toCollectorResource","resource","additionalAttributes","toCollectorTraceState","toCollectorExportTraceServiceRequest","spans","collectorTraceExporterBase","groupedSpans","resourceSpans","libSpans","instrumentationLibrary","groupSpansByResourceAndLibrary","toCollectorResourceSpans","toCollectorInstrumentationLibrarySpans","parentSpanId","kind","collectorKind","SPAN_KIND_UNSPECIFIED","startTimeUnixNano","endTimeUnixNano","endTime","events","timedEvents","timedEvent","timeUnixNano","time","droppedEventsCount","droppedLinksCount","toCollectorSpan","baseAttributes","instrumentationLibrarySpans","CollectorTraceExporter","NoopMeter","createValueRecorder","NOOP_VALUE_RECORDER_METRIC","createCounter","NOOP_COUNTER_METRIC","createUpDownCounter","createValueObserver","_callback","NOOP_VALUE_OBSERVER_METRIC","createSumObserver","NOOP_SUM_OBSERVER_METRIC","createUpDownSumObserver","NOOP_UP_DOWN_SUM_OBSERVER_METRIC","createBatchObserver","NOOP_BATCH_OBSERVER","NoopMetric","instrument","_instrument","_labels","unbind","NoopCounterMetric","labels","NoopValueRecorderMetric","record","NoopBaseObserverMetric","observation","observer","NoopBatchObserver","NoopBoundCounter","NoopBoundValueRecorder","_baggage","NoopBoundBaseObserver","update","NOOP_METER","NOOP_BOUND_BASE_OBSERVER","NOOP_METER_PROVIDER","NoopMeterProvider","getMeter","GLOBAL_METRICS_API_KEY","MetricKind","MetricsAPI","setGlobalMeterProvider","getMeterProvider","requiredVersion","fallback","BaseBoundInstrument","_disabled","_valueType","_aggregator","getLabels","getAggregator","BoundCounter","disabled","valueType","aggregator","BoundUpDownCounter","BoundValueRecorder","BoundObserver","AggregatorKind","hashLabels","__assign","t","s","Metric","_kind","_instruments","_boundaries","boundaries","_descriptor","_getMetricDescriptor","_aggregationTemporality","aggregationTemporality","hash","_makeInstrument","getKind","getAggregationTemporality","getMetricRecord","descriptor","metricKind","CounterMetric","_processor","COUNTER","aggregatorFor","ValueRecorderMetric","VALUE_RECORDER","Resource","empty","EMPTY","default","merge","other","BatchObserverResult","cancelled","onObserveCalled","callback","observe","observations","_immediate","setImmediate","NOOP_CALLBACK","BatchObserver","_maxTimeoutUpdateMS","maxTimeoutUpdateMS","collect","observerResult","timer","setTimeout","clearTimeout","_arguments","P","generator","fulfilled","step","next","rejected","done","f","g","_","label","sent","trys","ops","verb","iterator","op","pop","PushController","_meter","_exporter","interval","_timer","setInterval","_collect","clearInterval","getProcessor","checkPointSet","NoopExporter","_metrics","_resultCallback","HistogramAggregator","HISTOGRAM","_current","_newEmptyCheckpoint","_lastUpdateTime","count","sum","buckets","counts","toPoint","timestamp","LastValueAggregator","LAST_VALUE","SumAggregator","SUM","UngroupedProcessor","metricDescriptor","UP_DOWN_COUNTER","SUM_OBSERVER","UP_DOWN_SUM_OBSERVER","VALUE_OBSERVER","process","_batchMap","Processor","ObserverResult","BaseObserverMetric","_processResults","SumObserverMetric","processor","previous","previousValue","DEFAULT_CONFIG","DEFAULT_METRIC_OPTIONS","UpDownCounterMetric","UpDownSumObserverMetric","ValueObserverMetric","Meter","_batchObservers","mergedConfig","_resource","_instrumentationLibrary","exporter","_controller","_isValidName","opt","valueRecorder","_registerMetric","counter","upDownCounter","valueObserver","sumObserver","upDownSumObserver","batchObserver","metricsRecords","records","MeterProvider","_meters","_config","ConsoleMetricExporter","metrics_1","console","log","point","histogram","toCollectorLabels","toAggregationTemporality","toDataPoint","toHistogramPoint","bucketCounts","explicitBounds","toCollectorExportMetricServiceRequest","collectorExporterBase","groupedMetrics","metricMap","resourceMetrics","libMetrics","groupMetricsByResourceAndLibrary","toCollectorResourceMetrics","toCollectorInstrumentationLibraryMetrics","metricCollector","dataPoints","isMonotonic","INT","intSum","doubleSum","intGauge","doubleGauge","intHistogram","doubleHistogram","toCollectorMetric","instrumentationLibraryMetrics","NetHostConnectionTypeValues","NetHostConnectionSubtypeValues","CollectorMetricExporter","_startTime","Date","getTime","SemanticResourceAttributes","transformTraceList","response","datasourceId","datasourceName","traceRegexs","logsFrame","datasourceUid","tableFrame","custom","width","displayNameFromDS","title","internal","query","timeField","find","field","hasMatch","toArray","line","traceRegex","createTableFrame","transformBase64IDToHexString","base64","raw","atob","hex","charCodeAt","transformHexStringToBase64ID","hexArray","getAttributeValue","arValue","resourceToProcess","serviceTags","attribute","getSpanTags","spanTags","UNSET","collectorTypes","toLowerCase","getLogs","logs","event","transformFromOTLP","traceData","nodeGraph","traceFormat","librarySpan","traceID","tags","transformToOTLP","batches","services","batchIndex","tagsToAttributes","libraryName","padStart","getOTLPSpanKind","getOTLPStatus","getOTLPEvents","includes","tag","toAttributeValue","val","statusCodeTag","transformTrace","emptyDataQueryResponse","fieldName","fieldIndex","ArrayVector","newField","parse","parseJsonFields","createTableFrameFromSearch","instanceSettings","uid","queryType","transformToTraceData","traceName","rootServiceName","rootTraceName","durationMs","HASH_UNDEFINED","MAX_SAFE_INTEGER","argsTag","funcTag","objectTag","reIsHostCtor","reIsUint","typedArrayTags","freeGlobal","freeSelf","Function","freeExports","exports","nodeType","freeModule","module","moduleExports","freeProcess","nodeUtil","types","require","binding","nodeIsTypedArray","isTypedArray","func","transform","arrayProto","funcProto","objectProto","coreJsData","funcToString","maskSrcKey","IE_PROTO","nativeObjectToString","objectCtorString","reIsNative","replace","Buffer","Uint8Array","allocUnsafe","getPrototype","arg","objectCreate","propertyIsEnumerable","symToStringTag","toStringTag","defineProperty","getNative","nativeIsBuffer","isBuffer","nativeMax","nativeNow","nativeCreate","baseCreate","object","proto","isObject","Hash","ListCache","MapCache","Stack","__data__","arrayLikeKeys","inherited","isArr","isArg","isArguments","isBuff","isType","skipIndexes","iteratee","baseTimes","isIndex","assignMergeValue","eq","baseAssignValue","assignValue","objValue","assocIndexOf","array","getMapData","pairs","LARGE_ARRAY_SIZE","fromRight","baseFor","keysFunc","iterable","baseGetTag","isOwn","unmasked","getRawTag","objectToString","baseIsArguments","isObjectLike","baseIsNative","isMasked","isFunction","toSource","baseKeysIn","nativeKeysIn","isProto","isPrototype","baseMerge","srcIndex","customizer","srcValue","mergeFunc","safeGet","stacked","newValue","isCommon","isTyped","isArrayLike","copyArray","buffer","isDeep","copy","cloneBuffer","typedArray","arrayBuffer","byteLength","byteOffset","Ctor","isPlainObject","isNew","copyObject","keysIn","toPlainObject","initCloneObject","baseMergeDeep","baseRest","setToString","otherArgs","overRest","identity","baseSetToString","string","lastCalled","stamp","remaining","shortOut","isLength","baseUnary","assigner","sources","guard","isIterateeCall"],"sourceRoot":""}