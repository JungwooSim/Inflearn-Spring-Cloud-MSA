{"version":3,"file":"FolderSettingsPage.1f65f885c5a67f13d9d6.js","mappings":"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","sources":["webpack://grafana/./public/app/features/folders/FolderSettingsPage.tsx","webpack://grafana/./public/app/features/folders/state/actions.ts","webpack://grafana/./public/app/features/folders/state/navModel.ts"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { Button, LegacyForms } from '@grafana/ui';\nconst { Input } = LegacyForms;\nimport Page from 'app/core/components/Page/Page';\nimport appEvents from 'app/core/app_events';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types';\nimport { deleteFolder, getFolderByUid, saveFolder } from './state/actions';\nimport { getLoadingNav } from './state/navModel';\nimport { setFolderTitle } from './state/reducers';\nimport { ShowConfirmModalEvent } from '../../types/events';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nexport interface OwnProps extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nconst mapStateToProps = (state: StoreState, props: OwnProps) => {\n  const uid = props.match.params.uid;\n  return {\n    navModel: getNavModel(state.navIndex, `folder-settings-${uid}`, getLoadingNav(2)),\n    folderUid: uid,\n    folder: state.folder,\n  };\n};\n\nconst mapDispatchToProps = {\n  getFolderByUid,\n  saveFolder,\n  setFolderTitle,\n  deleteFolder,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport interface State {\n  isLoading: boolean;\n}\n\nexport class FolderSettingsPage extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n    };\n  }\n\n  componentDidMount() {\n    this.props.getFolderByUid(this.props.folderUid);\n  }\n\n  onTitleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.setFolderTitle(evt.target.value);\n  };\n\n  onSave = async (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n    evt.stopPropagation();\n    this.setState({ isLoading: true });\n    await this.props.saveFolder(this.props.folder);\n    this.setState({ isLoading: false });\n  };\n\n  onDelete = (evt: React.MouseEvent<HTMLButtonElement>) => {\n    evt.stopPropagation();\n    evt.preventDefault();\n\n    const confirmationText = `Do you want to delete this folder and all its dashboards and alerts?`;\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete',\n        text: confirmationText,\n        icon: 'trash-alt',\n        yesText: 'Delete',\n        onConfirm: () => {\n          this.props.deleteFolder(this.props.folder.uid);\n        },\n      })\n    );\n  };\n\n  render() {\n    const { navModel, folder } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={this.state.isLoading}>\n          <h3 className=\"page-sub-heading\">Folder settings</h3>\n\n          <div className=\"section gf-form-group\">\n            <form name=\"folderSettingsForm\" onSubmit={this.onSave}>\n              <div className=\"gf-form\">\n                <label className=\"gf-form-label width-7\">Name</label>\n                <Input\n                  type=\"text\"\n                  className=\"gf-form-input width-30\"\n                  value={folder.title}\n                  onChange={this.onTitleChange}\n                />\n              </div>\n              <div className=\"gf-form-button-row\">\n                <Button type=\"submit\" disabled={!folder.canSave || !folder.hasChanged}>\n                  Save\n                </Button>\n                <Button variant=\"destructive\" onClick={this.onDelete} disabled={!folder.canSave}>\n                  Delete\n                </Button>\n              </div>\n            </form>\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(FolderSettingsPage);\n","import { AppEvents, locationUtil } from '@grafana/data';\nimport { getBackendSrv, locationService } from '@grafana/runtime';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { FolderState, ThunkResult } from 'app/types';\nimport { DashboardAcl, DashboardAclUpdateDTO, NewDashboardAclItem, PermissionLevel } from 'app/types/acl';\nimport { updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport appEvents from 'app/core/app_events';\nimport { loadFolder, loadFolderPermissions } from './reducers';\n\nexport function getFolderByUid(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    const folder = await backendSrv.getFolderByUid(uid);\n    dispatch(loadFolder(folder));\n    dispatch(updateNavIndex(buildNavModel(folder)));\n  };\n}\n\nexport function saveFolder(folder: FolderState): ThunkResult<void> {\n  return async (dispatch) => {\n    const res = await backendSrv.put(`/api/folders/${folder.uid}`, {\n      title: folder.title,\n      version: folder.version,\n    });\n\n    // this should be redux action at some point\n    appEvents.emit(AppEvents.alertSuccess, ['Folder saved']);\n    locationService.push(`${res.url}/settings`);\n  };\n}\n\nexport function deleteFolder(uid: string): ThunkResult<void> {\n  return async () => {\n    await backendSrv.delete(`/api/folders/${uid}?forceDeleteRules=false`);\n    locationService.push('/dashboards');\n  };\n}\n\nexport function getFolderPermissions(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    const permissions = await backendSrv.get(`/api/folders/${uid}/permissions`);\n    dispatch(loadFolderPermissions(permissions));\n  };\n}\n\nfunction toUpdateItem(item: DashboardAcl): DashboardAclUpdateDTO {\n  return {\n    userId: item.userId,\n    teamId: item.teamId,\n    role: item.role,\n    permission: item.permission,\n  };\n}\n\nexport function updateFolderPermission(itemToUpdate: DashboardAcl, level: PermissionLevel): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n\n      const updated = toUpdateItem(item);\n\n      // if this is the item we want to update, update it's permission\n      if (itemToUpdate === item) {\n        updated.permission = level;\n      }\n\n      itemsToUpdate.push(updated);\n    }\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function removeFolderPermission(itemToDelete: DashboardAcl): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited || item === itemToDelete) {\n        continue;\n      }\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function addFolderPermission(newItem: NewDashboardAclItem): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    itemsToUpdate.push({\n      userId: newItem.userId,\n      teamId: newItem.teamId,\n      role: newItem.role,\n      permission: newItem.permission,\n    });\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function createNewFolder(folderName: string): ThunkResult<void> {\n  return async () => {\n    const newFolder = await getBackendSrv().post('/api/folders', { title: folderName });\n    appEvents.emit(AppEvents.alertSuccess, ['Folder Created', 'OK']);\n    locationService.push(locationUtil.stripBaseFromUrl(newFolder.url));\n  };\n}\n","import { NavModel, NavModelItem } from '@grafana/data';\n\nimport { FolderDTO } from 'app/types';\n\nexport function buildNavModel(folder: FolderDTO): NavModelItem {\n  const model = {\n    icon: 'folder',\n    id: 'manage-folder',\n    subTitle: 'Manage folder dashboards and permissions',\n    url: '',\n    text: folder.title,\n    breadcrumbs: [{ title: 'Dashboards', url: 'dashboards' }],\n    children: [\n      {\n        active: false,\n        icon: 'apps',\n        id: `folder-dashboards-${folder.uid}`,\n        text: 'Dashboards',\n        url: folder.url,\n      },\n    ],\n  };\n\n  model.children.push({\n    active: false,\n    icon: 'library-panel',\n    id: `folder-library-panels-${folder.uid}`,\n    text: 'Panels',\n    url: `${folder.url}/library-panels`,\n  });\n\n  if (folder.canAdmin) {\n    model.children.push({\n      active: false,\n      icon: 'lock',\n      id: `folder-permissions-${folder.uid}`,\n      text: 'Permissions',\n      url: `${folder.url}/permissions`,\n    });\n  }\n\n  if (folder.canSave) {\n    model.children.push({\n      active: false,\n      icon: 'cog',\n      id: `folder-settings-${folder.uid}`,\n      text: 'Settings',\n      url: `${folder.url}/settings`,\n    });\n  }\n\n  return model;\n}\n\nexport function getLoadingNav(tabIndex: number): NavModel {\n  const main = buildNavModel({\n    id: 1,\n    uid: 'loading',\n    title: 'Loading',\n    url: 'url',\n    canSave: true,\n    canEdit: true,\n    canAdmin: true,\n    version: 0,\n  });\n\n  main.children![tabIndex].active = true;\n\n  return {\n    main: main,\n    node: main.children![tabIndex],\n  };\n}\n"],"names":["Input","LegacyForms","mapDispatchToProps","getFolderByUid","saveFolder","setFolderTitle","deleteFolder","connector","connect","state","props","uid","match","params","navModel","getNavModel","navIndex","getLoadingNav","folderUid","folder","FolderSettingsPage","PureComponent","constructor","super","evt","this","target","value","async","preventDefault","stopPropagation","setState","isLoading","appEvents","ShowConfirmModalEvent","title","text","icon","yesText","onConfirm","componentDidMount","render","className","name","onSubmit","onSave","type","onChange","onTitleChange","Button","disabled","canSave","hasChanged","variant","onClick","onDelete","backendSrv","dispatch","loadFolder","updateNavIndex","buildNavModel","res","version","AppEvents","locationService","url","getFolderPermissions","permissions","loadFolderPermissions","toUpdateItem","item","userId","teamId","role","permission","updateFolderPermission","itemToUpdate","level","getStore","itemsToUpdate","inherited","updated","push","items","removeFolderPermission","itemToDelete","addFolderPermission","newItem","createNewFolder","folderName","newFolder","getBackendSrv","post","locationUtil","model","id","subTitle","breadcrumbs","children","active","canAdmin","tabIndex","main","canEdit","node"],"sourceRoot":""}