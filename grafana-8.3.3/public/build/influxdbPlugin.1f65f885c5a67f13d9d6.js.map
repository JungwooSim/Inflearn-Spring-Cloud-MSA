{"version":3,"file":"influxdbPlugin.1f65f885c5a67f13d9d6.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/influxdb/influx_series.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/query_part.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/influx_query_model.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/response_parser.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/query_builder.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/types.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/FluxQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/queryUtils.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/datasource.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/useShadowedState.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/constants.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/RawInfluxQLEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/Seg.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/toSelectableValue.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/FromSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/tagUtils.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/unwrap.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/AddButton.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/TagsSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/PartListSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/styles.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/OrderByTimeSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/InputSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/influxQLMetadataQuery.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/FormatAsSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/partListUtils.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/Editor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/QueryEditorModeSwitcher.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/InfluxCheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/InfluxStartPage.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VariableQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/module.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/QueryEditor.tsx","webpack://grafana/./.yarn/__virtual__/react-use-virtual-ca2705900f/3/opt/drone/yarncache/react-use-npm-17.2.4-c702db5427-3c885c3798.zip/node_modules/react-use/esm/usePrevious.js"],"sourcesContent":["import { each, map, includes, flatten, keys } from 'lodash';\nimport TableModel from 'app/core/table_model';\nimport { FieldType, QueryResultMeta, TimeSeries, TableData } from '@grafana/data';\n\nexport default class InfluxSeries {\n  refId?: string;\n  series: any;\n  alias: any;\n  annotation: any;\n  meta?: QueryResultMeta;\n\n  constructor(options: { series: any; alias?: any; annotation?: any; meta?: QueryResultMeta; refId?: string }) {\n    this.series = options.series;\n    this.alias = options.alias;\n    this.annotation = options.annotation;\n    this.meta = options.meta;\n    this.refId = options.refId;\n  }\n\n  getTimeSeries(): TimeSeries[] {\n    const output: TimeSeries[] = [];\n    let i, j;\n\n    if (this.series.length === 0) {\n      return output;\n    }\n\n    each(this.series, (series) => {\n      const columns = series.columns.length;\n      const tags = map(series.tags, (value, key) => {\n        return key + ': ' + value;\n      });\n\n      for (j = 1; j < columns; j++) {\n        let seriesName = series.name;\n        const columnName = series.columns[j];\n        if (columnName !== 'value') {\n          seriesName = seriesName + '.' + columnName;\n        }\n\n        if (this.alias) {\n          seriesName = this._getSeriesName(series, j);\n        } else if (series.tags) {\n          seriesName = seriesName + ' {' + tags.join(', ') + '}';\n        }\n\n        const datapoints = [];\n        if (series.values) {\n          for (i = 0; i < series.values.length; i++) {\n            datapoints[i] = [series.values[i][j], series.values[i][0]];\n          }\n        }\n\n        output.push({\n          title: seriesName,\n          target: seriesName,\n          datapoints: datapoints,\n          tags: series.tags,\n          meta: this.meta,\n          refId: this.refId,\n        });\n      }\n    });\n\n    return output;\n  }\n\n  _getSeriesName(series: any, index: number) {\n    const regex = /\\$(\\w+)|\\[\\[([\\s\\S]+?)\\]\\]/g;\n    const segments = series.name.split('.');\n\n    return this.alias.replace(regex, (match: any, g1: any, g2: any) => {\n      const group = g1 || g2;\n      const segIndex = parseInt(group, 10);\n\n      if (group === 'm' || group === 'measurement') {\n        return series.name;\n      }\n      if (group === 'col') {\n        return series.columns[index];\n      }\n      if (!isNaN(segIndex)) {\n        return segments[segIndex] ?? match;\n      }\n      if (group.indexOf('tag_') !== 0) {\n        return match;\n      }\n\n      const tag = group.replace('tag_', '');\n      if (!series.tags) {\n        return match;\n      }\n      return series.tags[tag];\n    });\n  }\n\n  getAnnotations() {\n    const list: any[] = [];\n\n    each(this.series, (series) => {\n      let titleCol: any = null;\n      let timeCol: any = null;\n      let timeEndCol: any = null;\n      const tagsCol: any = [];\n      let textCol: any = null;\n\n      each(series.columns, (column, index) => {\n        if (column === 'time') {\n          timeCol = index;\n          return;\n        }\n        if (column === 'sequence_number') {\n          return;\n        }\n        if (column === this.annotation.titleColumn) {\n          titleCol = index;\n          return;\n        }\n        if (includes((this.annotation.tagsColumn || '').replace(' ', '').split(','), column)) {\n          tagsCol.push(index);\n          return;\n        }\n        if (column === this.annotation.textColumn) {\n          textCol = index;\n          return;\n        }\n        if (column === this.annotation.timeEndColumn) {\n          timeEndCol = index;\n          return;\n        }\n        // legacy case\n        if (!titleCol && textCol !== index) {\n          titleCol = index;\n        }\n      });\n\n      each(series.values, (value) => {\n        const data = {\n          annotation: this.annotation,\n          time: +new Date(value[timeCol]),\n          title: value[titleCol],\n          timeEnd: value[timeEndCol],\n          // Remove empty values, then split in different tags for comma separated values\n          tags: flatten(\n            tagsCol\n              .filter((t: any) => {\n                return value[t];\n              })\n              .map((t: any) => {\n                return value[t].split(',');\n              })\n          ),\n          text: value[textCol],\n        };\n\n        list.push(data);\n      });\n    });\n\n    return list;\n  }\n\n  getTable(): TableData {\n    const table = new TableModel();\n    let i, j;\n\n    table.refId = this.refId;\n    table.meta = this.meta;\n\n    if (this.series.length === 0) {\n      return table;\n    }\n\n    // the order is:\n    // - first the first item from the value-array (this is often (always?) the timestamp)\n    // - then all the tag-values\n    // - then the rest of the value-array\n    //\n    // we have to keep this order both in table.columns and table.rows\n\n    each(this.series, (series: any, seriesIndex: number) => {\n      if (seriesIndex === 0) {\n        const firstCol = series.columns[0];\n        // Check the first column's name, if it is `time`, we\n        // mark it as having the type time\n        const firstTableCol = firstCol === 'time' ? { text: 'Time', type: FieldType.time } : { text: firstCol };\n        table.columns.push(firstTableCol);\n        each(keys(series.tags), (key) => {\n          table.columns.push({ text: key });\n        });\n        for (j = 1; j < series.columns.length; j++) {\n          table.columns.push({ text: series.columns[j] });\n        }\n      }\n\n      if (series.values) {\n        for (i = 0; i < series.values.length; i++) {\n          const values = series.values[i];\n          const reordered = [values[0]];\n          if (series.tags) {\n            for (const key in series.tags) {\n              if (series.tags.hasOwnProperty(key)) {\n                reordered.push(series.tags[key]);\n              }\n            }\n          }\n          for (j = 1; j < values.length; j++) {\n            reordered.push(values[j]);\n          }\n          table.rows.push(reordered);\n        }\n      }\n    });\n\n    return table;\n  }\n}\n","import { map, clone } from 'lodash';\nimport { QueryPartDef, QueryPart, functionRenderer, suffixRenderer } from 'app/angular/components/query_part';\n\nconst index: any[] = [];\nconst categories: any = {\n  Aggregations: [],\n  Selectors: [],\n  Transformations: [],\n  Predictors: [],\n  Math: [],\n  Aliasing: [],\n  Fields: [],\n};\n\nfunction createPart(part: any): any {\n  const def = index[part.type];\n  if (!def) {\n    throw { message: 'Could not find query part ' + part.type };\n  }\n\n  return new QueryPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new QueryPartDef(options);\n  options.category.push(index[options.type]);\n}\n\nconst groupByTimeFunctions: any[] = [];\n\nfunction aliasRenderer(part: { params: string[] }, innerExpr: string) {\n  return innerExpr + ' AS ' + '\"' + part.params[0] + '\"';\n}\n\nfunction fieldRenderer(part: { params: string[] }, innerExpr: any) {\n  if (part.params[0] === '*') {\n    return '*';\n  }\n  return '\"' + part.params[0] + '\"';\n}\n\nfunction replaceAggregationAddStrategy(selectParts: any[], partModel: { def: { type: string } }) {\n  // look for existing aggregation\n  for (let i = 0; i < selectParts.length; i++) {\n    const part = selectParts[i];\n    if (part.def.category === categories.Aggregations) {\n      if (part.def.type === partModel.def.type) {\n        return;\n      }\n      // count distinct is allowed\n      if (part.def.type === 'count' && partModel.def.type === 'distinct') {\n        break;\n      }\n      // remove next aggregation if distinct was replaced\n      if (part.def.type === 'distinct') {\n        const morePartsAvailable = selectParts.length >= i + 2;\n        if (partModel.def.type !== 'count' && morePartsAvailable) {\n          const nextPart = selectParts[i + 1];\n          if (nextPart.def.category === categories.Aggregations) {\n            selectParts.splice(i + 1, 1);\n          }\n        } else if (partModel.def.type === 'count') {\n          if (!morePartsAvailable || selectParts[i + 1].def.type !== 'count') {\n            selectParts.splice(i + 1, 0, partModel);\n          }\n          return;\n        }\n      }\n      selectParts[i] = partModel;\n      return;\n    }\n    if (part.def.category === categories.Selectors) {\n      selectParts[i] = partModel;\n      return;\n    }\n  }\n\n  selectParts.splice(1, 0, partModel);\n}\n\nfunction addTransformationStrategy(selectParts: any[], partModel: any) {\n  let i;\n  // look for index to add transformation\n  for (i = 0; i < selectParts.length; i++) {\n    const part = selectParts[i];\n    if (part.def.category === categories.Math || part.def.category === categories.Aliasing) {\n      break;\n    }\n  }\n\n  selectParts.splice(i, 0, partModel);\n}\n\nfunction addMathStrategy(selectParts: any[], partModel: any) {\n  const partCount = selectParts.length;\n  if (partCount > 0) {\n    // if last is math, replace it\n    if (selectParts[partCount - 1].def.type === 'math') {\n      selectParts[partCount - 1] = partModel;\n      return;\n    }\n    // if next to last is math, replace it\n    if (partCount > 1 && selectParts[partCount - 2].def.type === 'math') {\n      selectParts[partCount - 2] = partModel;\n      return;\n    } else if (selectParts[partCount - 1].def.type === 'alias') {\n      // if last is alias add it before\n      selectParts.splice(partCount - 1, 0, partModel);\n      return;\n    }\n  }\n  selectParts.push(partModel);\n}\n\nfunction addAliasStrategy(selectParts: any[], partModel: any) {\n  const partCount = selectParts.length;\n  if (partCount > 0) {\n    // if last is alias, replace it\n    if (selectParts[partCount - 1].def.type === 'alias') {\n      selectParts[partCount - 1] = partModel;\n      return;\n    }\n  }\n  selectParts.push(partModel);\n}\n\nfunction addFieldStrategy(selectParts: any, partModel: any, query: { selectModels: any[][] }) {\n  // copy all parts\n  const parts = map(selectParts, (part: any) => {\n    return createPart({ type: part.def.type, params: clone(part.params) });\n  });\n\n  query.selectModels.push(parts);\n}\n\nregister({\n  type: 'field',\n  addStrategy: addFieldStrategy,\n  category: categories.Fields,\n  params: [{ type: 'field', dynamicLookup: true }],\n  defaultParams: ['value'],\n  renderer: fieldRenderer,\n});\n\n// Aggregations\nregister({\n  type: 'count',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'distinct',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'integral',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'mean',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'median',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'mode',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'sum',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\n// transformations\n\nregister({\n  type: 'derivative',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'spread',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'non_negative_derivative',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'difference',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'non_negative_difference',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'moving_average',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [{ name: 'window', type: 'int', options: [5, 10, 20, 30, 40] }],\n  defaultParams: [10],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'cumulative_sum',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'stddev',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'time',\n  category: groupByTimeFunctions,\n  params: [\n    {\n      name: 'interval',\n      type: 'time',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['$__interval'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'fill',\n  category: groupByTimeFunctions,\n  params: [\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'null', '0', 'previous', 'linear'],\n    },\n  ],\n  defaultParams: ['null'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'elapsed',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\n// predictions\nregister({\n  type: 'holt_winters',\n  addStrategy: addTransformationStrategy,\n  category: categories.Predictors,\n  params: [\n    { name: 'number', type: 'int', options: [5, 10, 20, 30, 40] },\n    { name: 'season', type: 'int', options: [0, 1, 2, 5, 10] },\n  ],\n  defaultParams: [10, 2],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'holt_winters_with_fit',\n  addStrategy: addTransformationStrategy,\n  category: categories.Predictors,\n  params: [\n    { name: 'number', type: 'int', options: [5, 10, 20, 30, 40] },\n    { name: 'season', type: 'int', options: [0, 1, 2, 5, 10] },\n  ],\n  defaultParams: [10, 2],\n  renderer: functionRenderer,\n});\n\n// Selectors\nregister({\n  type: 'bottom',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [3],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'first',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'last',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'max',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'min',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'percentile',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'nth', type: 'int' }],\n  defaultParams: [95],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'top',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [3],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'tag',\n  category: groupByTimeFunctions,\n  params: [{ name: 'tag', type: 'string', dynamicLookup: true }],\n  defaultParams: ['tag'],\n  renderer: fieldRenderer,\n});\n\nregister({\n  type: 'math',\n  addStrategy: addMathStrategy,\n  category: categories.Math,\n  params: [{ name: 'expr', type: 'string' }],\n  defaultParams: [' / 100'],\n  renderer: suffixRenderer,\n});\n\nregister({\n  type: 'alias',\n  addStrategy: addAliasStrategy,\n  category: categories.Aliasing,\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n  renderMode: 'suffix',\n  renderer: aliasRenderer,\n});\n\nexport default {\n  create: createPart,\n  getCategories: () => {\n    return categories;\n  },\n  replaceAggregationAdd: replaceAggregationAddStrategy,\n};\n","import { map, find, filter, indexOf } from 'lodash';\nimport queryPart from './query_part';\nimport kbn from 'app/core/utils/kbn';\nimport { InfluxQuery, InfluxQueryTag } from './types';\nimport { ScopedVars } from '@grafana/data';\nimport { TemplateSrv } from '@grafana/runtime';\n\nexport default class InfluxQueryModel {\n  target: InfluxQuery;\n  selectModels: any[] = [];\n  queryBuilder: any;\n  groupByParts: any;\n  templateSrv: any;\n  scopedVars: any;\n  refId?: string;\n\n  /** @ngInject */\n  constructor(target: InfluxQuery, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.policy = target.policy || 'default';\n    target.resultFormat = target.resultFormat || 'time_series';\n    target.orderByTime = target.orderByTime || 'ASC';\n    target.tags = target.tags || [];\n    target.groupBy = target.groupBy || [\n      { type: 'time', params: ['$__interval'] },\n      { type: 'fill', params: ['null'] },\n    ];\n    target.select = target.select || [\n      [\n        { type: 'field', params: ['value'] },\n        { type: 'mean', params: [] },\n      ],\n    ];\n\n    this.updateProjection();\n  }\n\n  updateProjection() {\n    this.selectModels = map(this.target.select, (parts: any) => {\n      return map(parts, queryPart.create);\n    });\n    this.groupByParts = map(this.target.groupBy, queryPart.create);\n  }\n\n  updatePersistedParts() {\n    this.target.select = map(this.selectModels, (selectParts) => {\n      return map(selectParts, (part: any) => {\n        return { type: part.def.type, params: part.params };\n      });\n    });\n  }\n\n  hasGroupByTime() {\n    return find(this.target.groupBy, (g: any) => g.type === 'time');\n  }\n\n  hasFill() {\n    return find(this.target.groupBy, (g: any) => g.type === 'fill');\n  }\n\n  addGroupBy(value: string) {\n    let stringParts = value.match(/^(\\w+)\\((.*)\\)$/);\n\n    if (!stringParts || !this.target.groupBy) {\n      return;\n    }\n\n    const typePart = stringParts[1];\n    const arg = stringParts[2];\n    const partModel = queryPart.create({ type: typePart, params: [arg] });\n    const partCount = this.target.groupBy.length;\n\n    if (partCount === 0) {\n      this.target.groupBy.push(partModel.part);\n    } else if (typePart === 'time') {\n      this.target.groupBy.splice(0, 0, partModel.part);\n    } else if (typePart === 'tag') {\n      if (this.target.groupBy[partCount - 1].type === 'fill') {\n        this.target.groupBy.splice(partCount - 1, 0, partModel.part);\n      } else {\n        this.target.groupBy.push(partModel.part);\n      }\n    } else {\n      this.target.groupBy.push(partModel.part);\n    }\n\n    this.updateProjection();\n  }\n\n  removeGroupByPart(part: { def: { type: string } }, index: number) {\n    const categories = queryPart.getCategories();\n\n    if (part.def.type === 'time') {\n      // remove fill\n      this.target.groupBy = filter(this.target.groupBy, (g: any) => g.type !== 'fill');\n      // remove aggregations\n      this.target.select = map(this.target.select, (s: any) => {\n        return filter(s, (part: any) => {\n          const partModel = queryPart.create(part);\n          if (partModel.def.category === categories.Aggregations) {\n            return false;\n          }\n          if (partModel.def.category === categories.Selectors) {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.target.groupBy!.splice(index, 1);\n    this.updateProjection();\n  }\n\n  removeSelect(index: number) {\n    this.target.select!.splice(index, 1);\n    this.updateProjection();\n  }\n\n  removeSelectPart(selectParts: any[], part: any) {\n    // if we remove the field remove the whole statement\n    if (part.def.type === 'field') {\n      if (this.selectModels.length > 1) {\n        const modelsIndex = indexOf(this.selectModels, selectParts);\n        this.selectModels.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  addSelectPart(selectParts: any[], type: string) {\n    const partModel = queryPart.create({ type: type });\n    partModel.def.addStrategy(selectParts, partModel, this);\n    this.updatePersistedParts();\n  }\n\n  private renderTagCondition(tag: InfluxQueryTag, index: number, interpolate?: boolean) {\n    // FIXME: merge this function with query_builder/renderTagCondition\n    let str = '';\n    let operator = tag.operator;\n    let value = tag.value;\n    if (index > 0) {\n      str = (tag.condition || 'AND') + ' ';\n    }\n\n    if (!operator) {\n      if (/^\\/.*\\/$/.test(value)) {\n        operator = '=~';\n      } else {\n        operator = '=';\n      }\n    }\n\n    // quote value unless regex\n    if (operator !== '=~' && operator !== '!~') {\n      if (interpolate) {\n        value = this.templateSrv.replace(value, this.scopedVars);\n      }\n      if (operator !== '>' && operator !== '<') {\n        value = \"'\" + value.replace(/\\\\/g, '\\\\\\\\').replace(/\\'/g, \"\\\\'\") + \"'\";\n      }\n    } else if (interpolate) {\n      value = this.templateSrv.replace(value, this.scopedVars, 'regex');\n    }\n\n    return str + '\"' + tag.key + '\" ' + operator + ' ' + value;\n  }\n\n  getMeasurementAndPolicy(interpolate: any) {\n    let policy = this.target.policy;\n    let measurement = this.target.measurement || 'measurement';\n\n    if (!measurement.match('^/.*/$')) {\n      measurement = '\"' + measurement + '\"';\n    } else if (interpolate) {\n      measurement = this.templateSrv.replace(measurement, this.scopedVars, 'regex');\n    }\n\n    if (policy !== 'default') {\n      policy = '\"' + this.target.policy + '\".';\n    } else {\n      policy = '';\n    }\n\n    return policy + measurement;\n  }\n\n  interpolateQueryStr(value: any[], variable: { multi: any; includeAll: any }, defaultFormatFn: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      return kbn.regexEscape(value);\n    }\n\n    const escapedValues = map(value, kbn.regexEscape);\n    return '(' + escapedValues.join('|') + ')';\n  }\n\n  render(interpolate?: boolean) {\n    const target = this.target;\n\n    if (target.rawQuery) {\n      if (interpolate) {\n        return this.templateSrv.replace(target.query, this.scopedVars, this.interpolateQueryStr);\n      } else {\n        return target.query;\n      }\n    }\n\n    let query = 'SELECT ';\n    let i, y;\n    for (i = 0; i < this.selectModels.length; i++) {\n      const parts = this.selectModels[i];\n      let selectText = '';\n      for (y = 0; y < parts.length; y++) {\n        const part = parts[y];\n        selectText = part.render(selectText);\n      }\n\n      if (i > 0) {\n        query += ', ';\n      }\n      query += selectText;\n    }\n\n    query += ' FROM ' + this.getMeasurementAndPolicy(interpolate) + ' WHERE ';\n    const conditions = map(target.tags, (tag, index) => {\n      return this.renderTagCondition(tag, index, interpolate);\n    });\n\n    if (conditions.length > 0) {\n      query += '(' + conditions.join(' ') + ') AND ';\n    }\n\n    query += '$timeFilter';\n\n    let groupBySection = '';\n    for (i = 0; i < this.groupByParts.length; i++) {\n      const part = this.groupByParts[i];\n      if (i > 0) {\n        // for some reason fill has no separator\n        groupBySection += part.def.type === 'fill' ? ' ' : ', ';\n      }\n      groupBySection += part.render('');\n    }\n\n    if (groupBySection.length) {\n      query += ' GROUP BY ' + groupBySection;\n    }\n\n    if (target.fill) {\n      query += ' fill(' + target.fill + ')';\n    }\n\n    if (target.orderByTime === 'DESC') {\n      query += ' ORDER BY time DESC';\n    }\n\n    if (target.limit) {\n      query += ' LIMIT ' + target.limit;\n    }\n\n    if (target.slimit) {\n      query += ' SLIMIT ' + target.slimit;\n    }\n\n    if (target.tz) {\n      query += \" tz('\" + target.tz + \"')\";\n    }\n\n    return query;\n  }\n\n  renderAdhocFilters(filters: any[]) {\n    const conditions = map(filters, (tag, index) => {\n      return this.renderTagCondition(tag, index, true);\n    });\n    return conditions.join(' ');\n  }\n}\n","import { each, isArray } from 'lodash';\n\nexport default class ResponseParser {\n  parse(query: string, results: { results: any }) {\n    if (!results?.results || results.results.length === 0) {\n      return [];\n    }\n\n    const influxResults = results.results[0];\n    if (!influxResults.series) {\n      return [];\n    }\n\n    const normalizedQuery = query.toLowerCase();\n    const isValueFirst =\n      normalizedQuery.indexOf('show field keys') >= 0 || normalizedQuery.indexOf('show retention policies') >= 0;\n\n    const res = new Set<string>();\n    each(influxResults.series, (serie) => {\n      each(serie.values, (value) => {\n        if (isArray(value)) {\n          // In general, there are 2 possible shapes for the returned value.\n          // The first one is a two-element array,\n          // where the first element is somewhat a metadata value:\n          // the tag name for SHOW TAG VALUES queries,\n          // the time field for SELECT queries, etc.\n          // The second shape is an one-element array,\n          // that is containing an immediate value.\n          // For example, SHOW FIELD KEYS queries return such shape.\n          // Note, pre-0.11 versions return\n          // the second shape for SHOW TAG VALUES queries\n          // (while the newer versions—first).\n\n          if (isValueFirst) {\n            addUnique(res, value[0]);\n          } else if (value[1] !== undefined) {\n            addUnique(res, value[1]);\n          } else {\n            addUnique(res, value[0]);\n          }\n        } else {\n          addUnique(res, value);\n        }\n      });\n    });\n\n    // NOTE: it is important to keep the order of items in the parsed output\n    // the same as it was in the influxdb-response.\n    // we use a `Set` to collect the unique-results, and `Set` iteration\n    // order is insertion-order, so this should be ok.\n    return Array.from(res).map((v) => ({ text: v }));\n  }\n}\n\nfunction addUnique(s: Set<string>, value: string | number) {\n  s.add(value.toString());\n}\n","import { reduce } from 'lodash';\nimport kbn from 'app/core/utils/kbn';\n\nfunction renderTagCondition(tag: { operator: any; value: string; condition: any; key: string }, index: number) {\n  // FIXME: merge this function with influx_query_model/renderTagCondition\n  let str = '';\n  let operator = tag.operator;\n  let value = tag.value;\n  if (index > 0) {\n    str = (tag.condition || 'AND') + ' ';\n  }\n\n  if (!operator) {\n    if (/^\\/.*\\/$/.test(tag.value)) {\n      operator = '=~';\n    } else {\n      operator = '=';\n    }\n  }\n\n  // quote value unless regex or number, or if empty-string\n  if (value === '' || (operator !== '=~' && operator !== '!~' && isNaN(+value))) {\n    value = \"'\" + value.replace(/\\\\/g, '\\\\\\\\').replace(/\\'/g, \"\\\\'\") + \"'\";\n  }\n\n  return str + '\"' + tag.key + '\" ' + operator + ' ' + value;\n}\n\nexport class InfluxQueryBuilder {\n  constructor(private target: { measurement: any; tags: any; policy?: any }, private database?: string) {}\n\n  buildExploreQuery(type: string, withKey?: string, withMeasurementFilter?: string): string {\n    let query = '';\n    let measurement;\n    let policy;\n\n    if (type === 'TAG_KEYS') {\n      query = 'SHOW TAG KEYS';\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n    } else if (type === 'TAG_VALUES') {\n      query = 'SHOW TAG VALUES';\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n    } else if (type === 'MEASUREMENTS') {\n      query = 'SHOW MEASUREMENTS';\n      if (withMeasurementFilter) {\n        // we do a case-insensitive regex-based lookup\n        query += ' WITH MEASUREMENT =~ /(?i)' + kbn.regexEscape(withMeasurementFilter) + '/';\n      }\n    } else if (type === 'FIELDS') {\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n\n      if (!measurement.match('^/.*/')) {\n        measurement = '\"' + measurement + '\"';\n\n        if (policy && policy !== 'default') {\n          policy = '\"' + policy + '\"';\n          measurement = policy + '.' + measurement;\n        }\n      }\n\n      return 'SHOW FIELD KEYS FROM ' + measurement;\n    } else if (type === 'RETENTION POLICIES') {\n      query = 'SHOW RETENTION POLICIES on \"' + this.database + '\"';\n      return query;\n    }\n\n    if (measurement) {\n      if (!measurement.match('^/.*/') && !measurement.match(/^merge\\(.*\\)/)) {\n        measurement = '\"' + measurement + '\"';\n      }\n\n      if (policy && policy !== 'default') {\n        policy = '\"' + policy + '\"';\n        measurement = policy + '.' + measurement;\n      }\n\n      query += ' FROM ' + measurement;\n    }\n\n    if (withKey) {\n      query += ' WITH KEY = \"' + withKey + '\"';\n    }\n\n    if (this.target.tags && this.target.tags.length > 0) {\n      const whereConditions = reduce(\n        this.target.tags,\n        (memo, tag) => {\n          // do not add a condition for the key we want to explore for\n          if (tag.key === withKey) {\n            return memo;\n          }\n\n          // value operators not supported in these types of queries\n          if (tag.operator === '>' || tag.operator === '<') {\n            return memo;\n          }\n\n          memo.push(renderTagCondition(tag, memo.length));\n          return memo;\n        },\n        [] as string[]\n      );\n\n      if (whereConditions.length > 0) {\n        query += ' WHERE ' + whereConditions.join(' ');\n      }\n    }\n\n    if (type === 'MEASUREMENTS') {\n      query += ' LIMIT 100';\n      //Solve issue #2524 by limiting the number of measurements returned\n      //LIMIT must be after WITH MEASUREMENT and WHERE clauses\n      //This also could be used for TAG KEYS and TAG VALUES, if desired\n    }\n\n    return query;\n  }\n}\n","import { DataQuery, DataSourceJsonData } from '@grafana/data';\n\nexport enum InfluxVersion {\n  InfluxQL = 'InfluxQL',\n  Flux = 'Flux',\n}\n\nexport interface InfluxOptions extends DataSourceJsonData {\n  version?: InfluxVersion;\n\n  timeInterval?: string;\n  httpMode?: string;\n\n  // With Flux\n  organization?: string;\n  defaultBucket?: string;\n  maxSeries?: number;\n}\n\nexport interface InfluxSecureJsonData {\n  // For Flux\n  token?: string;\n\n  // In 1x a different password can be sent than then HTTP auth\n  password?: string;\n}\n\nexport interface InfluxQueryPart {\n  type: string;\n  params?: Array<string | number>;\n  // FIXME: `interval` does not seem to be used.\n  // check all the influxdb parts (query-generation etc.),\n  // if it is really so, and if yes, remove it\n  interval?: string;\n}\n\nexport interface InfluxQueryTag {\n  key: string;\n  operator?: string;\n  condition?: string;\n  value: string;\n}\n\nexport type ResultFormat = 'time_series' | 'table' | 'logs';\n\nexport interface InfluxQuery extends DataQuery {\n  policy?: string;\n  measurement?: string;\n  resultFormat?: ResultFormat;\n  orderByTime?: string;\n  tags?: InfluxQueryTag[];\n  groupBy?: InfluxQueryPart[];\n  select?: InfluxQueryPart[][];\n  limit?: string | number;\n  slimit?: string | number;\n  tz?: string;\n  // NOTE: `fill` is not used in the query-editor anymore, and is removed\n  // if any change happens in the query-editor. the query-generation still\n  // supports it for now.\n  fill?: string;\n  rawQuery?: boolean;\n  query?: string;\n  alias?: string;\n}\n","import React, { PureComponent } from 'react';\nimport { InfluxQuery } from '../types';\nimport { SelectableValue } from '@grafana/data';\nimport { cx, css } from '@emotion/css';\nimport {\n  InlineFormLabel,\n  LinkButton,\n  Segment,\n  CodeEditor,\n  MonacoEditor,\n  CodeEditorSuggestionItem,\n  CodeEditorSuggestionItemKind,\n} from '@grafana/ui';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport InfluxDatasource from '../datasource';\n\ntype Props = {\n  onChange: (query: InfluxQuery) => void;\n  onRunQuery: () => void;\n  query: InfluxQuery;\n  // `datasource` is not used internally, but this component is used at some places\n  // directly, where the `datasource` prop has to exist. later, when the whole\n  // query-editor gets converted to react we can stop using this component directly\n  // and then we can probably remove the datasource attribute.\n  datasource: InfluxDatasource;\n};\n\nconst samples: Array<SelectableValue<string>> = [\n  { label: 'Show buckets', description: 'List the available buckets (table)', value: 'buckets()' },\n  {\n    label: 'Simple query',\n    description: 'filter by measurement and field',\n    value: `from(bucket: \"db/rp\")\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\n  |> filter(fn: (r) =>\n    r._measurement == \"example-measurement\" and\n    r._field == \"example-field\"\n  )`,\n  },\n  {\n    label: 'Grouped Query',\n    description: 'Group by (min/max/sum/median)',\n    value: `// v.windowPeriod is a variable referring to the current optimized window period (currently: $interval)\nfrom(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"measurement1\" or r[\"_measurement\"] =~ /^.*?regex.*$/)\n  |> filter(fn: (r) => r[\"_field\"] == \"field2\" or r[\"_field\"] =~ /^.*?regex.*$/)\n  |> aggregateWindow(every: v.windowPeriod, fn: mean|median|max|count|derivative|sum)\n  |> yield(name: \"some-name\")`,\n  },\n  {\n    label: 'Filter by value',\n    description: 'Results between a min/max',\n    value: `// v.bucket, v.timeRangeStart, and v.timeRange stop are all variables supported by the flux plugin and influxdb\nfrom(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_value\"] >= 10 and r[\"_value\"] <= 20)`,\n  },\n  {\n    label: 'Schema Exploration: (measurements)',\n    description: 'Get a list of measurement using flux',\n    value: `import \"influxdata/influxdb/v1\"\nv1.measurements(bucket: v.bucket)`,\n  },\n  {\n    label: 'Schema Exploration: (fields)',\n    description: 'Return every possible key in a single table',\n    value: `from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\n  |> keys()\n  |> keep(columns: [\"_value\"])\n  |> group()\n  |> distinct()`,\n  },\n  {\n    label: 'Schema Exploration: (tag keys)',\n    description: 'Get a list of tag keys using flux',\n    value: `import \"influxdata/influxdb/v1\"\nv1.tagKeys(bucket: v.bucket)`,\n  },\n  {\n    label: 'Schema Exploration: (tag values)',\n    description: 'Get a list of tag values using flux',\n    value: `import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"host\",\n    predicate: (r) => true,\n    start: -1d\n)`,\n  },\n];\n\nexport class FluxQueryEditor extends PureComponent<Props> {\n  onFluxQueryChange = (query: string) => {\n    this.props.onChange({ ...this.props.query, query });\n    this.props.onRunQuery();\n  };\n\n  onSampleChange = (val: SelectableValue<string>) => {\n    this.props.onChange({\n      ...this.props.query,\n      query: val.value!,\n    });\n\n    // Angular HACK: Since the target does not actually change!\n    this.forceUpdate();\n    this.props.onRunQuery();\n  };\n\n  getSuggestions = (): CodeEditorSuggestionItem[] => {\n    const sugs: CodeEditorSuggestionItem[] = [\n      {\n        label: 'v.timeRangeStart',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'The start time',\n      },\n      {\n        label: 'v.timeRangeStop',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'The stop time',\n      },\n      {\n        label: 'v.windowPeriod',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'based on max data points',\n      },\n      {\n        label: 'v.defaultBucket',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'bucket configured in the datsource',\n      },\n      {\n        label: 'v.organization',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'org configured for the datsource',\n      },\n    ];\n\n    const templateSrv = getTemplateSrv();\n    templateSrv.getVariables().forEach((variable) => {\n      const label = '${' + variable.name + '}';\n      let val = templateSrv.replace(label);\n      if (val === label) {\n        val = '';\n      }\n      sugs.push({\n        label,\n        kind: CodeEditorSuggestionItemKind.Text,\n        detail: `(Template Variable) ${val}`,\n      });\n    });\n\n    return sugs;\n  };\n\n  // For some reason in angular, when this component gets re-mounted, the width\n  // is not set properly.  This forces the layout shortly after mount so that it\n  // displays OK.  Note: this is not an issue when used directly in react\n  editorDidMountCallbackHack = (editor: MonacoEditor) => {\n    setTimeout(() => editor.layout(), 100);\n  };\n\n  render() {\n    const { query } = this.props;\n\n    const helpTooltip = (\n      <div>\n        Type: <i>ctrl+space</i> to show template variable suggestions <br />\n        Many queries can be copied from Chronograf\n      </div>\n    );\n\n    return (\n      <>\n        <CodeEditor\n          height={'200px'}\n          language=\"sql\"\n          value={query.query || ''}\n          onBlur={this.onFluxQueryChange}\n          onSave={this.onFluxQueryChange}\n          showMiniMap={false}\n          showLineNumbers={true}\n          getSuggestions={this.getSuggestions}\n          onEditorDidMount={this.editorDidMountCallbackHack}\n        />\n        <div\n          className={cx(\n            'gf-form-inline',\n            css`\n              margin-top: 6px;\n            `\n          )}\n        >\n          <LinkButton\n            icon=\"external-link-alt\"\n            variant=\"secondary\"\n            target=\"blank\"\n            href=\"https://docs.influxdata.com/influxdb/latest/query-data/get-started/\"\n          >\n            Flux language syntax\n          </LinkButton>\n          <Segment options={samples} value=\"Sample Query\" onChange={this.onSampleChange} />\n          <div className=\"gf-form gf-form--grow\">\n            <div className=\"gf-form-label gf-form-label--grow\"></div>\n          </div>\n          <InlineFormLabel width={5} tooltip={helpTooltip}>\n            Help\n          </InlineFormLabel>\n        </div>\n      </>\n    );\n  }\n}\n","import { cloneDeep } from 'lodash';\nimport InfluxQueryModel from './influx_query_model';\nimport { InfluxQuery } from './types';\n\n// FIXME: these functions are a beginning of a refactoring of influx_query_model.ts\n// into a simpler approach with full typescript types.\n// later we should be able to migrate the unit-tests\n// that relate to these functions here, and then perhaps even move the implementation\n// to this place\n\nexport function buildRawQuery(query: InfluxQuery): string {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  return model.render(false);\n}\n\nexport function normalizeQuery(query: InfluxQuery): InfluxQuery {\n  // we return the original query if there is no need to update it\n  if (\n    query.policy !== undefined &&\n    query.resultFormat !== undefined &&\n    query.orderByTime !== undefined &&\n    query.tags !== undefined &&\n    query.groupBy !== undefined &&\n    query.select !== undefined\n  ) {\n    return query;\n  }\n\n  // FIXME: we should move the whole normalizeQuery logic here,\n  // and then have influxQueryModel call this function,\n  // to concentrate the whole logic here\n\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  return new InfluxQueryModel(queryCopy).target;\n}\n\nexport function addNewSelectPart(query: InfluxQuery, type: string, index: number): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  model.addSelectPart(model.selectModels[index], type);\n  return model.target;\n}\n\nexport function removeSelectPart(query: InfluxQuery, partIndex: number, index: number): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  const selectModel = model.selectModels[index];\n  model.removeSelectPart(selectModel, selectModel[partIndex]);\n  return model.target;\n}\n\nexport function changeSelectPart(\n  query: InfluxQuery,\n  listIndex: number,\n  partIndex: number,\n  newParams: string[]\n): InfluxQuery {\n  // we need to make shallow copy of `query.select` down to `query.select[listIndex][partIndex]`\n  const newSel = [...(query.select ?? [])];\n  newSel[listIndex] = [...newSel[listIndex]];\n  newSel[listIndex][partIndex] = {\n    ...newSel[listIndex][partIndex],\n    params: newParams,\n  };\n  return { ...query, select: newSel };\n}\n\nexport function addNewGroupByPart(query: InfluxQuery, type: string): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  model.addGroupBy(type);\n  return model.target;\n}\n\nexport function removeGroupByPart(query: InfluxQuery, partIndex: number): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  model.removeGroupByPart(model.groupByParts[partIndex], partIndex);\n  return model.target;\n}\n\nexport function changeGroupByPart(query: InfluxQuery, partIndex: number, newParams: string[]): InfluxQuery {\n  // we need to make shallow copy of `query.groupBy` down to `query.groupBy[partIndex]`\n  const newGroupBy = [...(query.groupBy ?? [])];\n  newGroupBy[partIndex] = {\n    ...newGroupBy[partIndex],\n    params: newParams,\n  };\n  return { ...query, groupBy: newGroupBy };\n}\n","import { cloneDeep, extend, get, has, isString, map as _map, omit, pick, reduce } from 'lodash';\nimport { lastValueFrom, Observable, of, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { v4 as uuidv4 } from 'uuid';\nimport { DataSourceWithBackend, frameToMetricFindValue, getBackendSrv } from '@grafana/runtime';\nimport {\n  AnnotationEvent,\n  AnnotationQueryRequest,\n  ArrayVector,\n  DataFrame,\n  DataQueryError,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  dateMath,\n  dateTime,\n  FieldType,\n  LoadingState,\n  MetricFindValue,\n  QueryResultMeta,\n  ScopedVars,\n  TIME_SERIES_TIME_FIELD_NAME,\n  TIME_SERIES_VALUE_FIELD_NAME,\n  TimeSeries,\n} from '@grafana/data';\n\nimport InfluxSeries from './influx_series';\nimport InfluxQueryModel from './influx_query_model';\nimport ResponseParser from './response_parser';\nimport { InfluxQueryBuilder } from './query_builder';\nimport { InfluxOptions, InfluxQuery, InfluxVersion } from './types';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { FluxQueryEditor } from './components/FluxQueryEditor';\nimport { buildRawQuery } from './queryUtils';\n\n// we detect the field type based on the value-array\nfunction getFieldType(values: unknown[]): FieldType {\n  // the values-array may contain a lot of nulls.\n  // we need the first not-null item\n  const firstNotNull = values.find((v) => v !== null);\n\n  if (firstNotNull === undefined) {\n    // we could not find any not-null values\n    return FieldType.number;\n  }\n\n  const valueType = typeof firstNotNull;\n\n  switch (valueType) {\n    case 'string':\n      return FieldType.string;\n    case 'boolean':\n      return FieldType.boolean;\n    case 'number':\n      return FieldType.number;\n    default:\n      // this should never happen, influxql values\n      // can only be numbers, strings and booleans.\n      throw new Error(`InfluxQL: invalid value type ${valueType}`);\n  }\n}\n\n// this conversion function is specialized to work with the timeseries\n// data returned by InfluxDatasource.getTimeSeries()\nfunction timeSeriesToDataFrame(timeSeries: TimeSeries): DataFrame {\n  const times: number[] = [];\n  const values: unknown[] = [];\n\n  // the data we process here is not correctly typed.\n  // the typescript types say every data-point is number|null,\n  // but in fact it can be string or boolean too.\n\n  const points = timeSeries.datapoints;\n  for (const point of points) {\n    values.push(point[0]);\n    times.push(point[1] as number);\n  }\n\n  const timeField = {\n    name: TIME_SERIES_TIME_FIELD_NAME,\n    type: FieldType.time,\n    config: {},\n    values: new ArrayVector<number>(times),\n  };\n\n  const valueField = {\n    name: TIME_SERIES_VALUE_FIELD_NAME,\n    type: getFieldType(values),\n    config: {\n      displayNameFromDS: timeSeries.title,\n    },\n    values: new ArrayVector<unknown>(values),\n    labels: timeSeries.tags,\n  };\n\n  const fields = [timeField, valueField];\n\n  return {\n    name: timeSeries.target,\n    refId: timeSeries.refId,\n    meta: timeSeries.meta,\n    fields,\n    length: values.length,\n  };\n}\n\nexport default class InfluxDatasource extends DataSourceWithBackend<InfluxQuery, InfluxOptions> {\n  type: string;\n  urls: string[];\n  username: string;\n  password: string;\n  name: string;\n  database: any;\n  basicAuth: any;\n  withCredentials: any;\n  interval: any;\n  responseParser: any;\n  httpMode: string;\n  isFlux: boolean;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<InfluxOptions>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n\n    this.type = 'influxdb';\n    this.urls = (instanceSettings.url ?? '').split(',').map((url) => {\n      return url.trim();\n    });\n\n    this.username = instanceSettings.username ?? '';\n    this.password = instanceSettings.password ?? '';\n    this.name = instanceSettings.name;\n    this.database = instanceSettings.database;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    const settingsData = instanceSettings.jsonData || ({} as InfluxOptions);\n    this.interval = settingsData.timeInterval;\n    this.httpMode = settingsData.httpMode || 'GET';\n    this.responseParser = new ResponseParser();\n    this.isFlux = settingsData.version === InfluxVersion.Flux;\n\n    if (this.isFlux) {\n      // When flux, use an annotation processor rather than the `annotationQuery` lifecycle\n      this.annotations = {\n        QueryEditor: FluxQueryEditor,\n      };\n    }\n  }\n\n  query(request: DataQueryRequest<InfluxQuery>): Observable<DataQueryResponse> {\n    if (this.isFlux) {\n      // for not-flux queries we call `this.classicQuery`, and that\n      // handles the is-hidden situation.\n      // for the flux-case, we do the filtering here\n      const filteredRequest = {\n        ...request,\n        targets: request.targets.filter((t) => t.hide !== true),\n      };\n      return super.query(filteredRequest);\n    }\n\n    // Fallback to classic query support\n    return this.classicQuery(request);\n  }\n\n  getQueryDisplayText(query: InfluxQuery) {\n    if (this.isFlux) {\n      return query.query;\n    }\n    return new InfluxQueryModel(query).render(false);\n  }\n\n  /**\n   * Returns false if the query should be skipped\n   */\n  filterQuery(query: InfluxQuery): boolean {\n    if (this.isFlux) {\n      return !!query.query;\n    }\n    return true;\n  }\n\n  applyTemplateVariables(query: InfluxQuery, scopedVars: ScopedVars): Record<string, any> {\n    // this only works in flux-mode, it should not be called in non-flux-mode\n    if (!this.isFlux) {\n      throw new Error('applyTemplateVariables called in influxql-mode. this should never happen');\n    }\n\n    // We want to interpolate these variables on backend\n    const { __interval, __interval_ms, ...rest } = scopedVars;\n\n    return {\n      ...query,\n      query: this.templateSrv.replace(query.query ?? '', rest), // The raw query text\n    };\n  }\n\n  /**\n   * The unchanged pre 7.1 query implementation\n   */\n  classicQuery(options: any): Observable<DataQueryResponse> {\n    let timeFilter = this.getTimeFilter(options);\n    const scopedVars = options.scopedVars;\n    const targets = cloneDeep(options.targets);\n    const queryTargets: any[] = [];\n\n    let i, y;\n\n    let allQueries = _map(targets, (target) => {\n      if (target.hide) {\n        return '';\n      }\n\n      queryTargets.push(target);\n\n      // backward compatibility\n      scopedVars.interval = scopedVars.__interval;\n\n      return new InfluxQueryModel(target, this.templateSrv, scopedVars).render(true);\n    }).reduce((acc, current) => {\n      if (current !== '') {\n        acc += ';' + current;\n      }\n      return acc;\n    });\n\n    if (allQueries === '') {\n      return of({ data: [] });\n    }\n\n    // add global adhoc filters to timeFilter\n    const adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    if (adhocFilters.length > 0) {\n      const tmpQuery = new InfluxQueryModel({ refId: 'A' }, this.templateSrv, scopedVars);\n      timeFilter += ' AND ' + tmpQuery.renderAdhocFilters(adhocFilters);\n    }\n\n    // replace grafana variables\n    scopedVars.timeFilter = { value: timeFilter };\n\n    // replace templated variables\n    allQueries = this.templateSrv.replace(allQueries, scopedVars);\n\n    return this._seriesQuery(allQueries, options).pipe(\n      map((data: any) => {\n        if (!data || !data.results) {\n          return { data: [] };\n        }\n\n        const seriesList = [];\n        for (i = 0; i < data.results.length; i++) {\n          const result = data.results[i];\n          if (!result || !result.series) {\n            continue;\n          }\n\n          const target = queryTargets[i];\n          let alias = target.alias;\n          if (alias) {\n            alias = this.templateSrv.replace(target.alias, options.scopedVars);\n          }\n\n          const meta: QueryResultMeta = {\n            executedQueryString: data.executedQueryString,\n          };\n\n          const influxSeries = new InfluxSeries({\n            refId: target.refId,\n            series: data.results[i].series,\n            alias: alias,\n            meta,\n          });\n\n          switch (target.resultFormat) {\n            case 'logs':\n              meta.preferredVisualisationType = 'logs';\n            case 'table': {\n              seriesList.push(influxSeries.getTable());\n              break;\n            }\n            default: {\n              const timeSeries = influxSeries.getTimeSeries();\n              for (y = 0; y < timeSeries.length; y++) {\n                seriesList.push(timeSeriesToDataFrame(timeSeries[y]));\n              }\n              break;\n            }\n          }\n        }\n\n        return { data: seriesList };\n      })\n    );\n  }\n\n  async annotationQuery(options: AnnotationQueryRequest<any>): Promise<AnnotationEvent[]> {\n    if (this.isFlux) {\n      return Promise.reject({\n        message: 'Flux requires the standard annotation query',\n      });\n    }\n\n    // InfluxQL puts a query string on the annotation\n    if (!options.annotation.query) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const timeFilter = this.getTimeFilter({ rangeRaw: options.rangeRaw, timezone: options.dashboard.timezone });\n    let query = options.annotation.query.replace('$timeFilter', timeFilter);\n    query = this.templateSrv.replace(query, undefined, 'regex');\n\n    return lastValueFrom(this._seriesQuery(query, options)).then((data: any) => {\n      if (!data || !data.results || !data.results[0]) {\n        throw { message: 'No results in response from InfluxDB' };\n      }\n      return new InfluxSeries({\n        series: data.results[0].series,\n        annotation: options.annotation,\n      }).getAnnotations();\n    });\n  }\n\n  targetContainsTemplate(target: any) {\n    // for flux-mode we just take target.query,\n    // for influxql-mode we use InfluxQueryModel to create the text-representation\n    const queryText = this.isFlux ? target.query : buildRawQuery(target);\n\n    return this.templateSrv.variableExists(queryText);\n  }\n\n  interpolateVariablesInQueries(queries: InfluxQuery[], scopedVars: ScopedVars): InfluxQuery[] {\n    if (!queries || queries.length === 0) {\n      return [];\n    }\n\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map((query) => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.getRef(),\n          measurement: this.templateSrv.replace(query.measurement ?? '', scopedVars, 'regex'),\n          policy: this.templateSrv.replace(query.policy ?? '', scopedVars, 'regex'),\n        };\n\n        if (query.rawQuery || this.isFlux) {\n          expandedQuery.query = this.templateSrv.replace(query.query ?? '', scopedVars, 'regex');\n        }\n\n        if (query.tags) {\n          expandedQuery.tags = query.tags.map((tag) => {\n            return {\n              ...tag,\n              value: this.templateSrv.replace(tag.value, undefined, 'regex'),\n            };\n          });\n        }\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  async metricFindQuery(query: string, options?: any): Promise<MetricFindValue[]> {\n    if (this.isFlux) {\n      const target: InfluxQuery = {\n        refId: 'metricFindQuery',\n        query,\n      };\n      return lastValueFrom(\n        super.query({\n          ...options, // includes 'range'\n          targets: [target],\n        } as DataQueryRequest)\n      ).then((rsp) => {\n        if (rsp.data?.length) {\n          return frameToMetricFindValue(rsp.data[0]);\n        }\n        return [];\n      });\n    }\n\n    const interpolated = this.templateSrv.replace(query, undefined, 'regex');\n\n    return lastValueFrom(this._seriesQuery(interpolated, options)).then((resp) => {\n      return this.responseParser.parse(query, resp);\n    });\n  }\n\n  getTagKeys(options: any = {}) {\n    const queryBuilder = new InfluxQueryBuilder({ measurement: options.measurement || '', tags: [] }, this.database);\n    const query = queryBuilder.buildExploreQuery('TAG_KEYS');\n    return this.metricFindQuery(query, options);\n  }\n\n  getTagValues(options: any = {}) {\n    const queryBuilder = new InfluxQueryBuilder({ measurement: options.measurement || '', tags: [] }, this.database);\n    const query = queryBuilder.buildExploreQuery('TAG_VALUES', options.key);\n    return this.metricFindQuery(query, options);\n  }\n\n  _seriesQuery(query: string, options?: any) {\n    if (!query) {\n      return of({ results: [] });\n    }\n\n    if (options && options.range) {\n      const timeFilter = this.getTimeFilter({ rangeRaw: options.range, timezone: options.timezone });\n      query = query.replace('$timeFilter', timeFilter);\n    }\n\n    return this._influxRequest(this.httpMode, '/query', { q: query, epoch: 'ms' }, options);\n  }\n\n  serializeParams(params: any) {\n    if (!params) {\n      return '';\n    }\n\n    return reduce(\n      params,\n      (memo, value, key) => {\n        if (value === null || value === undefined) {\n          return memo;\n        }\n        memo.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n        return memo;\n      },\n      [] as string[]\n    ).join('&');\n  }\n\n  testDatasource() {\n    if (this.isFlux) {\n      // TODO: eventually use the real /health endpoint\n      const request: DataQueryRequest<InfluxQuery> = {\n        targets: [{ refId: 'test', query: 'buckets()' }],\n        requestId: `${this.id}-health-${uuidv4()}`,\n        dashboardId: 0,\n        panelId: 0,\n        interval: '1m',\n        intervalMs: 60000,\n        maxDataPoints: 423,\n        range: {\n          from: dateTime(1000),\n          to: dateTime(2000),\n        },\n      } as DataQueryRequest<InfluxQuery>;\n\n      return lastValueFrom(super.query(request))\n        .then((res: DataQueryResponse) => {\n          if (!res || !res.data || res.state !== LoadingState.Done) {\n            console.error('InfluxDB Error', res);\n            return { status: 'error', message: 'Error reading InfluxDB' };\n          }\n          const first = res.data[0];\n          if (first && first.length) {\n            return { status: 'success', message: `${first.length} buckets found` };\n          }\n          console.error('InfluxDB Error', res);\n          return { status: 'error', message: 'Error reading buckets' };\n        })\n        .catch((err: any) => {\n          console.error('InfluxDB Error', err);\n          return { status: 'error', message: err.message };\n        });\n    }\n\n    const queryBuilder = new InfluxQueryBuilder({ measurement: '', tags: [] }, this.database);\n    const query = queryBuilder.buildExploreQuery('RETENTION POLICIES');\n\n    return lastValueFrom(this._seriesQuery(query))\n      .then((res: any) => {\n        const error = get(res, 'results[0].error');\n        if (error) {\n          return { status: 'error', message: error };\n        }\n        return { status: 'success', message: 'Data source is working' };\n      })\n      .catch((err: any) => {\n        return { status: 'error', message: err.message };\n      });\n  }\n\n  _influxRequest(method: string, url: string, data: any, options?: any) {\n    const currentUrl = this.urls.shift()!;\n    this.urls.push(currentUrl);\n\n    const params: any = {};\n\n    if (this.username) {\n      params.u = this.username;\n      params.p = this.password;\n    }\n\n    if (options && options.database) {\n      params.db = options.database;\n    } else if (this.database) {\n      params.db = this.database;\n    }\n\n    const { q } = data;\n\n    if (method === 'POST' && has(data, 'q')) {\n      // verb is POST and 'q' param is defined\n      extend(params, omit(data, ['q']));\n      data = this.serializeParams(pick(data, ['q']));\n    } else if (method === 'GET' || method === 'POST') {\n      // verb is GET, or POST without 'q' param\n      extend(params, data);\n      data = null;\n    }\n\n    const req: any = {\n      method: method,\n      url: currentUrl + url,\n      params: params,\n      data: data,\n      precision: 'ms',\n      inspect: { type: 'influxdb' },\n      paramSerializer: this.serializeParams,\n    };\n\n    req.headers = req.headers || {};\n    if (this.basicAuth || this.withCredentials) {\n      req.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      req.headers.Authorization = this.basicAuth;\n    }\n\n    if (method === 'POST') {\n      req.headers['Content-type'] = 'application/x-www-form-urlencoded';\n    }\n\n    return getBackendSrv()\n      .fetch(req)\n      .pipe(\n        map((result: any) => {\n          const { data } = result;\n          if (data) {\n            data.executedQueryString = q;\n            if (data.results) {\n              const errors = result.data.results.filter((elem: any) => elem.error);\n\n              if (errors.length > 0) {\n                throw {\n                  message: 'InfluxDB Error: ' + errors[0].error,\n                  data,\n                };\n              }\n            }\n          }\n          return data;\n        }),\n        catchError((err) => {\n          if (err.cancelled) {\n            return of(err);\n          }\n\n          return throwError(this.handleErrors(err));\n        })\n      );\n  }\n\n  handleErrors(err: any) {\n    const error: DataQueryError = {\n      message:\n        (err && err.status) ||\n        (err && err.message) ||\n        'Unknown error during query transaction. Please check JS console logs.',\n    };\n\n    if ((Number.isInteger(err.status) && err.status !== 0) || err.status >= 300) {\n      if (err.data && err.data.error) {\n        error.message = 'InfluxDB Error: ' + err.data.error;\n        error.data = err.data;\n        // @ts-ignore\n        error.config = err.config;\n      } else {\n        error.message = 'Network Error: ' + err.statusText + '(' + err.status + ')';\n        error.data = err.data;\n        // @ts-ignore\n        error.config = err.config;\n      }\n    }\n\n    return error;\n  }\n\n  getTimeFilter(options: any) {\n    const from = this.getInfluxTime(options.rangeRaw.from, false, options.timezone);\n    const until = this.getInfluxTime(options.rangeRaw.to, true, options.timezone);\n\n    return 'time >= ' + from + ' and time <= ' + until;\n  }\n\n  getInfluxTime(date: any, roundUp: any, timezone: any) {\n    if (isString(date)) {\n      if (date === 'now') {\n        return 'now()';\n      }\n\n      const parts = /^now-(\\d+)([dhms])$/.exec(date);\n      if (parts) {\n        const amount = parseInt(parts[1], 10);\n        const unit = parts[2];\n        return 'now() - ' + amount + unit;\n      }\n      date = dateMath.parse(date, roundUp, timezone);\n    }\n\n    return date.valueOf() + 'ms';\n  }\n}\n","import { useState, useEffect } from 'react';\nimport { usePrevious } from 'react-use';\n\nexport function useShadowedState<T>(outsideVal: T): [T, (newVal: T) => void] {\n  const [currentVal, setCurrentVal] = useState(outsideVal);\n  const prevOutsideVal = usePrevious(outsideVal);\n\n  useEffect(() => {\n    const isOutsideValChanged = prevOutsideVal !== outsideVal;\n    // if the value changes from the outside, we accept it into the state\n    // (we only set it if it is different from the current value)\n    if (isOutsideValChanged && currentVal !== outsideVal) {\n      setCurrentVal(outsideVal);\n    }\n  }, [outsideVal, currentVal, prevOutsideVal]);\n\n  return [currentVal, setCurrentVal];\n}\n","import { SelectableValue } from '@grafana/data';\nimport { ResultFormat } from '../types';\n\nexport const RESULT_FORMATS: Array<SelectableValue<ResultFormat>> = [\n  { label: 'Time series', value: 'time_series' },\n  { label: 'Table', value: 'table' },\n  { label: 'Logs', value: 'logs' },\n];\n\nexport const DEFAULT_RESULT_FORMAT: ResultFormat = 'time_series';\n","import React from 'react';\nimport { TextArea, InlineFormLabel, Input, Select, HorizontalGroup } from '@grafana/ui';\nimport { InfluxQuery } from '../types';\nimport { useShadowedState } from './useShadowedState';\nimport { useUniqueId } from './useUniqueId';\nimport { RESULT_FORMATS, DEFAULT_RESULT_FORMAT } from './constants';\n\ntype Props = {\n  query: InfluxQuery;\n  onChange: (query: InfluxQuery) => void;\n  onRunQuery: () => void;\n};\n\n// we handle 3 fields: \"query\", \"alias\", \"resultFormat\"\n// \"resultFormat\" changes are applied immediately\n// \"query\" and \"alias\" changes only happen on onblur\nexport const RawInfluxQLEditor = ({ query, onChange, onRunQuery }: Props): JSX.Element => {\n  const [currentQuery, setCurrentQuery] = useShadowedState(query.query);\n  const [currentAlias, setCurrentAlias] = useShadowedState(query.alias);\n  const aliasElementId = useUniqueId();\n  const selectElementId = useUniqueId();\n\n  const resultFormat = query.resultFormat ?? DEFAULT_RESULT_FORMAT;\n\n  const applyDelayedChangesAndRunQuery = () => {\n    onChange({\n      ...query,\n      query: currentQuery,\n      alias: currentAlias,\n      resultFormat,\n    });\n    onRunQuery();\n  };\n\n  return (\n    <div>\n      <TextArea\n        aria-label=\"query\"\n        rows={3}\n        spellCheck={false}\n        placeholder=\"InfluxDB Query\"\n        onBlur={applyDelayedChangesAndRunQuery}\n        onChange={(e) => {\n          setCurrentQuery(e.currentTarget.value);\n        }}\n        value={currentQuery ?? ''}\n      />\n      <HorizontalGroup>\n        <InlineFormLabel htmlFor={selectElementId}>Format as</InlineFormLabel>\n        <Select\n          menuShouldPortal\n          inputId={selectElementId}\n          onChange={(v) => {\n            onChange({ ...query, resultFormat: v.value });\n            onRunQuery();\n          }}\n          value={resultFormat}\n          options={RESULT_FORMATS}\n        />\n        <InlineFormLabel htmlFor={aliasElementId}>Alias by</InlineFormLabel>\n        <Input\n          id={aliasElementId}\n          type=\"text\"\n          spellCheck={false}\n          placeholder=\"Naming pattern\"\n          onBlur={applyDelayedChangesAndRunQuery}\n          onChange={(e) => {\n            setCurrentAlias(e.currentTarget.value);\n          }}\n          value={currentAlias ?? ''}\n        />\n      </HorizontalGroup>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport debouncePromise from 'debounce-promise';\nimport { cx, css } from '@emotion/css';\nimport { SelectableValue } from '@grafana/data';\nimport { useAsyncFn } from 'react-use';\nimport { InlineLabel, Select, AsyncSelect, Input } from '@grafana/ui';\nimport { useShadowedState } from '../useShadowedState';\n\n// this file is a simpler version of `grafana-ui / SegmentAsync.tsx`\n// with some changes:\n// 1. click-outside does not select the value. i think it's better to be explicit here.\n// 2. we set a min-width on the select-element to handle cases where the `value`\n//    is very short, like \"x\", and then you click on it and the select opens,\n//    and it tries to be as short as \"x\" and it does not work well.\n\n// NOTE: maybe these changes could be migrated into the SegmentAsync later\n\ntype SelVal = SelectableValue<string>;\n\n// when allowCustomValue is true, there is no way to enforce the selectableValue\n// enum-type, so i just go with `string`\n\ntype LoadOptions = (filter: string) => Promise<SelVal[]>;\n\ntype Props = {\n  value: string;\n  buttonClassName?: string;\n  loadOptions?: LoadOptions;\n  // if filterByLoadOptions is false,\n  // loadOptions is only executed once,\n  // when the select-box opens,\n  // and as you write, the list gets filtered\n  // by the select-box.\n  // if filterByLoadOptions is true,\n  // as you write the loadOptions is executed again and again,\n  // and it is relied on to filter the results.\n  filterByLoadOptions?: boolean;\n  onChange: (v: SelVal) => void;\n  allowCustomValue?: boolean;\n};\n\nconst selectClass = css({\n  minWidth: '160px',\n});\n\ntype SelProps = {\n  loadOptions: LoadOptions;\n  filterByLoadOptions?: boolean;\n  onClose: () => void;\n  onChange: (v: SelVal) => void;\n  allowCustomValue?: boolean;\n};\n\ntype SelReloadProps = {\n  loadOptions: (filter: string) => Promise<SelVal[]>;\n  onClose: () => void;\n  onChange: (v: SelVal) => void;\n  allowCustomValue?: boolean;\n};\n\n// when a custom value is written into a select-box,\n// by default the new value is prefixed with \"Create:\",\n// and that sounds confusing because here we do not create\n// anything. we change this to just be the entered string.\nconst formatCreateLabel = (v: string) => v;\n\nconst SelReload = ({ loadOptions, allowCustomValue, onChange, onClose }: SelReloadProps): JSX.Element => {\n  // here we rely on the fact that writing text into the <AsyncSelect/>\n  // does not cause a re-render of the current react component.\n  // this way there is only a single render-call,\n  // so there is only a single `debouncedLoadOptions`.\n  // if we want ot make this \"re-render safe,\n  // we will have to put the debounced call into an useRef,\n  // and probably have an useEffect\n  const debouncedLoadOptions = debouncePromise(loadOptions, 1000, { leading: true });\n  return (\n    <div className={selectClass}>\n      <AsyncSelect\n        menuShouldPortal\n        formatCreateLabel={formatCreateLabel}\n        defaultOptions\n        autoFocus\n        isOpen\n        onCloseMenu={onClose}\n        allowCustomValue={allowCustomValue}\n        loadOptions={debouncedLoadOptions}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n\ntype SelSingleLoadProps = {\n  loadOptions: (filter: string) => Promise<SelVal[]>;\n  onClose: () => void;\n  onChange: (v: SelVal) => void;\n  allowCustomValue?: boolean;\n};\n\nconst SelSingleLoad = ({ loadOptions, allowCustomValue, onChange, onClose }: SelSingleLoadProps): JSX.Element => {\n  const [loadState, doLoad] = useAsyncFn(loadOptions, [loadOptions]);\n\n  useEffect(() => {\n    doLoad('');\n  }, [doLoad, loadOptions]);\n\n  return (\n    <div className={selectClass}>\n      <Select\n        menuShouldPortal\n        isLoading={loadState.loading}\n        formatCreateLabel={formatCreateLabel}\n        autoFocus\n        isOpen\n        onCloseMenu={onClose}\n        allowCustomValue={allowCustomValue}\n        options={loadState.value ?? []}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n\nconst Sel = ({ loadOptions, filterByLoadOptions, allowCustomValue, onChange, onClose }: SelProps): JSX.Element => {\n  // unfortunately <Segment/> and <SegmentAsync/> have somewhat different behavior,\n  // so the simplest approach was to just create two separate wrapper-components\n  return filterByLoadOptions ? (\n    <SelReload loadOptions={loadOptions} allowCustomValue={allowCustomValue} onChange={onChange} onClose={onClose} />\n  ) : (\n    <SelSingleLoad\n      loadOptions={loadOptions}\n      allowCustomValue={allowCustomValue}\n      onChange={onChange}\n      onClose={onClose}\n    />\n  );\n};\n\ntype InpProps = {\n  initialValue: string;\n  onChange: (newVal: string) => void;\n  onClose: () => void;\n};\n\nconst Inp = ({ initialValue, onChange, onClose }: InpProps): JSX.Element => {\n  const [currentValue, setCurrentValue] = useShadowedState(initialValue);\n\n  return (\n    <Input\n      autoFocus\n      type=\"text\"\n      spellCheck={false}\n      onBlur={onClose}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter') {\n          onChange(currentValue);\n        }\n      }}\n      onChange={(e) => {\n        setCurrentValue(e.currentTarget.value);\n      }}\n      value={currentValue}\n    />\n  );\n};\n\nconst defaultButtonClass = css({\n  width: 'auto',\n  cursor: 'pointer',\n});\n\nexport const Seg = ({\n  value,\n  buttonClassName,\n  loadOptions,\n  filterByLoadOptions,\n  allowCustomValue,\n  onChange,\n}: Props): JSX.Element => {\n  const [isOpen, setOpen] = useState(false);\n  if (!isOpen) {\n    const className = cx(defaultButtonClass, buttonClassName);\n    return (\n      <InlineLabel\n        as=\"button\"\n        className={className}\n        onClick={() => {\n          setOpen(true);\n        }}\n      >\n        {value}\n      </InlineLabel>\n    );\n  } else {\n    if (loadOptions !== undefined) {\n      return (\n        <Sel\n          loadOptions={loadOptions}\n          filterByLoadOptions={filterByLoadOptions ?? false}\n          allowCustomValue={allowCustomValue}\n          onChange={(v) => {\n            setOpen(false);\n            onChange(v);\n          }}\n          onClose={() => {\n            setOpen(false);\n          }}\n        />\n      );\n    } else {\n      return (\n        <Inp\n          initialValue={value}\n          onClose={() => {\n            setOpen(false);\n          }}\n          onChange={(v) => {\n            setOpen(false);\n            onChange({ value: v, label: v });\n          }}\n        />\n      );\n    }\n  }\n};\n","import { SelectableValue } from '@grafana/data';\n\nexport function toSelectableValue<T extends string>(t: T): SelectableValue<T> {\n  return { label: t, value: t };\n}\n","import React from 'react';\nimport { Seg } from './Seg';\nimport { toSelectableValue } from './toSelectableValue';\n\nconst DEFAULT_POLICY = 'default';\n\n// we use the value \"default\" as a magic-value, it means\n// we use the default retention-policy.\n// unfortunately, IF the user has a retention-policy named \"default\",\n// and it is not the default-retention-policy in influxdb,\n// bad things will happen.\n// https://github.com/grafana/grafana/issues/4347 :-(\n// FIXME: we could maybe at least detect here that problem-is-happening,\n// and show an error message or something.\n// unfortunately, currently the ResponseParser does not return the\n// is-default info for the retention-policies, so that should change first.\n\ntype Props = {\n  onChange: (policy: string | undefined, measurement: string | undefined) => void;\n  policy: string | undefined;\n  measurement: string | undefined;\n  getPolicyOptions: () => Promise<string[]>;\n  getMeasurementOptions: (filter: string) => Promise<string[]>;\n};\n\nexport const FromSection = ({\n  policy,\n  measurement,\n  onChange,\n  getPolicyOptions,\n  getMeasurementOptions,\n}: Props): JSX.Element => {\n  const handlePolicyLoadOptions = async () => {\n    const allPolicies = await getPolicyOptions();\n    // if `default` does not exist in the list of policies, we add it\n    const allPoliciesWithDefault = allPolicies.some((p) => p === 'default')\n      ? allPolicies\n      : [DEFAULT_POLICY, ...allPolicies];\n\n    return allPoliciesWithDefault.map(toSelectableValue);\n  };\n\n  const handleMeasurementLoadOptions = async (filter: string) => {\n    const allMeasurements = await getMeasurementOptions(filter);\n    return allMeasurements.map(toSelectableValue);\n  };\n\n  return (\n    <>\n      <Seg\n        allowCustomValue\n        value={policy ?? 'using default policy'}\n        loadOptions={handlePolicyLoadOptions}\n        onChange={(v) => {\n          onChange(v.value, measurement);\n        }}\n      />\n      <Seg\n        allowCustomValue\n        value={measurement ?? 'select measurement'}\n        loadOptions={handleMeasurementLoadOptions}\n        filterByLoadOptions\n        onChange={(v) => {\n          onChange(policy, v.value);\n        }}\n      />\n    </>\n  );\n};\n","import { InfluxQueryTag } from '../../types';\n\nfunction isRegex(text: string): boolean {\n  return /^\\/.*\\/$/.test(text);\n}\n\n// FIXME: sync these to the query-string-generation-code\n// probably it's in influx_query_model.ts\nexport function getOperator(tag: InfluxQueryTag): string {\n  return tag.operator ?? (isRegex(tag.value) ? '=~' : '=');\n}\n\n// FIXME: sync these to the query-string-generation-code\n// probably it's in influx_query_model.ts\nexport function getCondition(tag: InfluxQueryTag, isFirst: boolean): string | undefined {\n  return isFirst ? undefined : tag.condition ?? 'AND';\n}\n\nexport function adjustOperatorIfNeeded(currentOperator: string, newTagValue: string): string {\n  const isCurrentOperatorRegex = currentOperator === '=~' || currentOperator === '!~';\n  const isNewTagValueRegex = isRegex(newTagValue);\n\n  if (isNewTagValueRegex) {\n    return isCurrentOperatorRegex ? currentOperator : '=~';\n  } else {\n    return isCurrentOperatorRegex ? '=' : currentOperator;\n  }\n}\n","export function unwrap<T>(value: T | null | undefined): T {\n  if (value == null) {\n    throw new Error('value must not be nullish');\n  }\n  return value;\n}\n","import React from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { Seg } from './Seg';\nimport { unwrap } from './unwrap';\n\ntype Props = {\n  loadOptions: () => Promise<SelectableValue[]>;\n  allowCustomValue?: boolean;\n  onAdd: (v: string) => void;\n};\n\nexport const AddButton = ({ loadOptions, allowCustomValue, onAdd }: Props): JSX.Element => {\n  return (\n    <Seg\n      value=\"+\"\n      loadOptions={loadOptions}\n      allowCustomValue={allowCustomValue}\n      onChange={(v) => {\n        onAdd(unwrap(v.value));\n      }}\n    />\n  );\n};\n","import React from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { Seg } from './Seg';\nimport { InfluxQueryTag } from '../../types';\nimport { toSelectableValue } from './toSelectableValue';\nimport { adjustOperatorIfNeeded, getCondition, getOperator } from './tagUtils';\nimport { AddButton } from './AddButton';\n\ntype KnownOperator = '=' | '!=' | '<>' | '<' | '>' | '=~' | '!~';\nconst knownOperators: KnownOperator[] = ['=', '!=', '<>', '<', '>', '=~', '!~'];\n\ntype KnownCondition = 'AND' | 'OR';\nconst knownConditions: KnownCondition[] = ['AND', 'OR'];\n\nconst operatorOptions: Array<SelectableValue<KnownOperator>> = knownOperators.map(toSelectableValue);\nconst condititonOptions: Array<SelectableValue<KnownCondition>> = knownConditions.map(toSelectableValue);\n\ntype Props = {\n  tags: InfluxQueryTag[];\n  onChange: (tags: InfluxQueryTag[]) => void;\n  getTagKeyOptions: () => Promise<string[]>;\n  getTagValueOptions: (key: string) => Promise<string[]>;\n};\n\ntype TagProps = {\n  tag: InfluxQueryTag;\n  isFirst: boolean;\n  onRemove: () => void;\n  onChange: (tag: InfluxQueryTag) => void;\n  getTagKeyOptions: () => Promise<string[]>;\n  getTagValueOptions: (key: string) => Promise<string[]>;\n};\n\nconst loadConditionOptions = () => Promise.resolve(condititonOptions);\n\nconst loadOperatorOptions = () => Promise.resolve(operatorOptions);\n\nconst Tag = ({ tag, isFirst, onRemove, onChange, getTagKeyOptions, getTagValueOptions }: TagProps): JSX.Element => {\n  const operator = getOperator(tag);\n  const condition = getCondition(tag, isFirst);\n\n  const getTagKeySegmentOptions = () => {\n    return getTagKeyOptions()\n      .catch((err) => {\n        // in this UI element we add a special item to the list of options,\n        // that is used to remove the element.\n        // this causes a problem: if `getTagKeyOptions` fails with an error,\n        // the remove-filter option is never added to the list,\n        // and the UI element can not be removed.\n        // to avoid it, we catch any potential errors coming from `getTagKeyOptions`,\n        // log the error, and pretend that the list of options is an empty list.\n        // this way the remove-item option can always be added to the list.\n        console.error(err);\n        return [];\n      })\n      .then((tags) => [{ label: '-- remove filter --', value: undefined }, ...tags.map(toSelectableValue)]);\n  };\n\n  const getTagValueSegmentOptions = () => {\n    return getTagValueOptions(tag.key).then((tags) => tags.map(toSelectableValue));\n  };\n\n  return (\n    <div className=\"gf-form\">\n      {condition != null && (\n        <Seg\n          value={condition}\n          loadOptions={loadConditionOptions}\n          onChange={(v) => {\n            onChange({ ...tag, condition: v.value });\n          }}\n        />\n      )}\n      <Seg\n        allowCustomValue\n        value={tag.key}\n        loadOptions={getTagKeySegmentOptions}\n        onChange={(v) => {\n          const { value } = v;\n          if (value === undefined) {\n            onRemove();\n          } else {\n            onChange({ ...tag, key: value ?? '' });\n          }\n        }}\n      />\n      <Seg\n        value={operator}\n        loadOptions={loadOperatorOptions}\n        onChange={(op) => {\n          onChange({ ...tag, operator: op.value });\n        }}\n      />\n      <Seg\n        allowCustomValue\n        value={tag.value}\n        loadOptions={getTagValueSegmentOptions}\n        onChange={(v) => {\n          const value = v.value ?? '';\n          onChange({ ...tag, value, operator: adjustOperatorIfNeeded(operator, value) });\n        }}\n      />\n    </div>\n  );\n};\n\nexport const TagsSection = ({ tags, onChange, getTagKeyOptions, getTagValueOptions }: Props): JSX.Element => {\n  const onTagChange = (newTag: InfluxQueryTag, index: number) => {\n    const newTags = tags.map((tag, i) => {\n      return index === i ? newTag : tag;\n    });\n    onChange(newTags);\n  };\n\n  const onTagRemove = (index: number) => {\n    const newTags = tags.filter((t, i) => i !== index);\n    onChange(newTags);\n  };\n\n  const getTagKeySegmentOptions = () => {\n    return getTagKeyOptions().then((tags) => tags.map(toSelectableValue));\n  };\n\n  const addNewTag = (tagKey: string, isFirst: boolean) => {\n    const minimalTag: InfluxQueryTag = {\n      key: tagKey,\n      value: 'select tag value',\n    };\n\n    const newTag: InfluxQueryTag = {\n      key: minimalTag.key,\n      value: minimalTag.value,\n      operator: getOperator(minimalTag),\n      condition: getCondition(minimalTag, isFirst),\n    };\n\n    onChange([...tags, newTag]);\n  };\n\n  return (\n    <>\n      {tags.map((t, i) => (\n        <Tag\n          tag={t}\n          isFirst={i === 0}\n          key={i}\n          onChange={(newT) => {\n            onTagChange(newT, i);\n          }}\n          onRemove={() => {\n            onTagRemove(i);\n          }}\n          getTagKeyOptions={getTagKeyOptions}\n          getTagValueOptions={getTagValueOptions}\n        />\n      ))}\n      <AddButton\n        allowCustomValue\n        loadOptions={getTagKeySegmentOptions}\n        onAdd={(v) => {\n          addNewTag(v, tags.length === 0);\n        }}\n      />\n    </>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { cx, css } from '@emotion/css';\nimport { MenuItem, WithContextMenu, MenuGroup, useTheme2 } from '@grafana/ui';\nimport { SelectableValue, GrafanaTheme2 } from '@grafana/data';\nimport { Seg } from './Seg';\nimport { unwrap } from './unwrap';\nimport { toSelectableValue } from './toSelectableValue';\nimport { AddButton } from './AddButton';\n\nexport type PartParams = Array<{\n  value: string;\n  options: (() => Promise<string[]>) | null;\n}>;\n\ntype Props = {\n  parts: Array<{\n    name: string;\n    params: PartParams;\n  }>;\n  getNewPartOptions: () => Promise<SelectableValue[]>;\n  onChange: (partIndex: number, paramValues: string[]) => void;\n  onRemovePart: (index: number) => void;\n  onAddNewPart: (type: string) => void;\n};\n\nconst renderRemovableNameMenuItems = (onClick: () => void) => {\n  return (\n    <MenuGroup label=\"\">\n      <MenuItem label=\"remove\" onClick={onClick} />\n    </MenuGroup>\n  );\n};\n\nconst noRightMarginPaddingClass = css({\n  paddingRight: '0',\n  marginRight: '0',\n});\n\nconst RemovableName = ({ name, onRemove }: { name: string; onRemove: () => void }) => {\n  return (\n    <WithContextMenu renderMenuItems={() => renderRemovableNameMenuItems(onRemove)}>\n      {({ openMenu }) => (\n        <button className={cx('gf-form-label', noRightMarginPaddingClass)} onClick={openMenu}>\n          {name}\n        </button>\n      )}\n    </WithContextMenu>\n  );\n};\n\ntype PartProps = {\n  name: string;\n  params: PartParams;\n  onRemove: () => void;\n  onChange: (paramValues: string[]) => void;\n};\n\nconst noHorizMarginPaddingClass = css({\n  paddingLeft: '0',\n  paddingRight: '0',\n  marginLeft: '0',\n  marginRight: '0',\n});\n\nconst getPartClass = (theme: GrafanaTheme2) => {\n  return cx(\n    'gf-form-label',\n    css({\n      paddingLeft: '0',\n      // gf-form-label class makes certain css attributes incorrect\n      // for the selectbox-dropdown, so we have to \"reset\" them back\n      lineHeight: theme.typography.body.lineHeight,\n      fontSize: theme.typography.body.fontSize,\n    })\n  );\n};\n\nconst Part = ({ name, params, onChange, onRemove }: PartProps): JSX.Element => {\n  const theme = useTheme2();\n  const partClass = useMemo(() => getPartClass(theme), [theme]);\n\n  const onParamChange = (par: string, i: number) => {\n    const newParams = params.map((p) => p.value);\n    newParams[i] = par;\n    onChange(newParams);\n  };\n  return (\n    <div className={partClass}>\n      <RemovableName name={name} onRemove={onRemove} />(\n      {params.map((p, i) => {\n        const { value, options } = p;\n        const isLast = i === params.length - 1;\n        const loadOptions =\n          options !== null ? () => options().then((items) => items.map(toSelectableValue)) : undefined;\n        return (\n          <React.Fragment key={i}>\n            <Seg\n              allowCustomValue\n              value={value}\n              buttonClassName={noHorizMarginPaddingClass}\n              loadOptions={loadOptions}\n              onChange={(v) => {\n                onParamChange(unwrap(v.value), i);\n              }}\n            />\n            {!isLast && ','}\n          </React.Fragment>\n        );\n      })}\n      )\n    </div>\n  );\n};\n\nexport const PartListSection = ({\n  parts,\n  getNewPartOptions,\n  onAddNewPart,\n  onRemovePart,\n  onChange,\n}: Props): JSX.Element => {\n  return (\n    <>\n      {parts.map((part, index) => (\n        <Part\n          key={index}\n          name={part.name}\n          params={part.params}\n          onRemove={() => {\n            onRemovePart(index);\n          }}\n          onChange={(pars) => {\n            onChange(index, pars);\n          }}\n        />\n      ))}\n      <AddButton loadOptions={getNewPartOptions} onAdd={onAddNewPart} />\n    </>\n  );\n};\n","import { css } from '@emotion/css';\n\nexport const paddingRightClass = css({\n  paddingRight: '4px',\n});\n","import React from 'react';\nimport { cx } from '@emotion/css';\nimport { SelectableValue } from '@grafana/data';\nimport { unwrap } from './unwrap';\nimport { Select } from '@grafana/ui';\nimport { paddingRightClass } from './styles';\n\ntype Mode = 'ASC' | 'DESC';\n\nconst OPTIONS: Array<SelectableValue<Mode>> = [\n  { label: 'ascending', value: 'ASC' },\n  { label: 'descending', value: 'DESC' },\n];\n\nconst className = cx('width-9', paddingRightClass);\n\ntype Props = {\n  value: Mode;\n  onChange: (value: Mode) => void;\n};\n\nexport const OrderByTimeSection = ({ value, onChange }: Props): JSX.Element => {\n  return (\n    <>\n      <Select<Mode>\n        className={className}\n        onChange={(v) => {\n          onChange(unwrap(v.value));\n        }}\n        value={value}\n        options={OPTIONS}\n      />\n    </>\n  );\n};\n","import React from 'react';\nimport { cx } from '@emotion/css';\nimport { Input } from '@grafana/ui';\nimport { useShadowedState } from '../useShadowedState';\nimport { paddingRightClass } from './styles';\n\ntype Props = {\n  value: string | undefined;\n  onChange: (value: string | undefined) => void;\n  isWide?: boolean;\n  placeholder?: string;\n};\n\nexport const InputSection = ({ value, onChange, isWide, placeholder }: Props): JSX.Element => {\n  const [currentValue, setCurrentValue] = useShadowedState(value);\n\n  const onBlur = () => {\n    // we send empty-string as undefined\n    const newValue = currentValue === '' ? undefined : currentValue;\n    onChange(newValue);\n  };\n\n  return (\n    <>\n      <Input\n        placeholder={placeholder}\n        className={cx(isWide ?? false ? 'width-14' : 'width-8', paddingRightClass)}\n        type=\"text\"\n        spellCheck={false}\n        onBlur={onBlur}\n        onChange={(e) => {\n          setCurrentValue(e.currentTarget.value);\n        }}\n        value={currentValue ?? ''}\n      />\n    </>\n  );\n};\n","import { InfluxQueryTag } from './types';\nimport InfluxDatasource from './datasource';\nimport { InfluxQueryBuilder } from './query_builder';\n\nconst runExploreQuery = (\n  type: string,\n  withKey: string | undefined,\n  withMeasurementFilter: string | undefined,\n  target: { measurement: string | undefined; tags: InfluxQueryTag[]; policy: string | undefined },\n  datasource: InfluxDatasource\n): Promise<Array<{ text: string }>> => {\n  const builder = new InfluxQueryBuilder(target, datasource.database);\n  const q = builder.buildExploreQuery(type, withKey, withMeasurementFilter);\n  return datasource.metricFindQuery(q);\n};\n\nexport async function getAllPolicies(datasource: InfluxDatasource): Promise<string[]> {\n  const target = { tags: [], measurement: undefined, policy: undefined };\n  const data = await runExploreQuery('RETENTION POLICIES', undefined, undefined, target, datasource);\n  return data.map((item) => item.text);\n}\n\nexport async function getAllMeasurementsForTags(\n  measurementFilter: string | undefined,\n  tags: InfluxQueryTag[],\n  datasource: InfluxDatasource\n): Promise<string[]> {\n  const target = { tags, measurement: undefined, policy: undefined };\n  const data = await runExploreQuery('MEASUREMENTS', undefined, measurementFilter, target, datasource);\n  return data.map((item) => item.text);\n}\n\nexport async function getTagKeysForMeasurementAndTags(\n  measurement: string | undefined,\n  policy: string | undefined,\n  tags: InfluxQueryTag[],\n  datasource: InfluxDatasource\n): Promise<string[]> {\n  const target = { tags, measurement, policy };\n  const data = await runExploreQuery('TAG_KEYS', undefined, undefined, target, datasource);\n  return data.map((item) => item.text);\n}\n\nexport async function getTagValues(\n  tagKey: string,\n  measurement: string | undefined,\n  policy: string | undefined,\n  tags: InfluxQueryTag[],\n  datasource: InfluxDatasource\n): Promise<string[]> {\n  const target = { tags, measurement, policy };\n  const data = await runExploreQuery('TAG_VALUES', tagKey, undefined, target, datasource);\n  return data.map((item) => item.text);\n}\n\nexport async function getFieldKeysForMeasurement(\n  measurement: string,\n  policy: string | undefined,\n  datasource: InfluxDatasource\n): Promise<string[]> {\n  const target = { tags: [], measurement, policy };\n  const data = await runExploreQuery('FIELDS', undefined, undefined, target, datasource);\n  return data.map((item) => item.text);\n}\n","import { Select } from '@grafana/ui';\nimport { cx } from '@emotion/css';\nimport { ResultFormat } from '../../types';\nimport React from 'react';\nimport { unwrap } from './unwrap';\nimport { RESULT_FORMATS } from '../constants';\nimport { paddingRightClass } from './styles';\n\ntype Props = {\n  format: ResultFormat;\n  onChange: (newFormat: ResultFormat) => void;\n};\n\nconst className = cx('width-8', paddingRightClass);\n\nexport const FormatAsSection = ({ format, onChange }: Props): JSX.Element => {\n  return (\n    <Select<ResultFormat>\n      className={className}\n      onChange={(v) => {\n        onChange(unwrap(v.value));\n      }}\n      value={format}\n      options={RESULT_FORMATS}\n    />\n  );\n};\n","import { InfluxQuery, InfluxQueryPart } from '../../types';\nimport { SelectableValue } from '@grafana/data';\nimport { PartParams } from './PartListSection';\nimport InfluxQueryModel from '../../influx_query_model';\nimport { unwrap } from './unwrap';\nimport queryPart from '../../query_part';\nimport { toSelectableValue } from './toSelectableValue';\nimport { QueryPartDef } from 'app/angular/components/query_part';\n\ntype Categories = Record<string, QueryPartDef[]>;\n\nexport function getNewSelectPartOptions(): SelectableValue[] {\n  const categories: Categories = queryPart.getCategories();\n  const options: SelectableValue[] = [];\n\n  const keys = Object.keys(categories);\n\n  keys.forEach((key) => {\n    const children: SelectableValue[] = categories[key].map((x) => toSelectableValue(x.type));\n\n    options.push({\n      label: key,\n      options: children,\n    });\n  });\n\n  return options;\n}\n\nexport async function getNewGroupByPartOptions(\n  query: InfluxQuery,\n  getTagKeys: () => Promise<string[]>\n): Promise<Array<SelectableValue<string>>> {\n  const tagKeys = await getTagKeys();\n  const queryCopy = { ...query }; // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  const options: Array<SelectableValue<string>> = [];\n  if (!model.hasFill()) {\n    options.push(toSelectableValue('fill(null)'));\n  }\n  if (!model.hasGroupByTime()) {\n    options.push(toSelectableValue('time($interval)'));\n  }\n  tagKeys.forEach((key) => {\n    options.push(toSelectableValue(`tag(${key})`));\n  });\n  return options;\n}\n\ntype Part = {\n  name: string;\n  params: PartParams;\n};\n\nfunction getPartParams(part: InfluxQueryPart, dynamicParamOptions: Map<string, () => Promise<string[]>>): PartParams {\n  // NOTE: the way the system is constructed,\n  // there always can only be one possible dynamic-lookup\n  // field. in case of select it is the field,\n  // in case of group-by it is the tag\n  const def = queryPart.create(part).def;\n\n  // we switch the numbers to strings, it will work that way too,\n  // and it makes the code simpler\n  const paramValues = (part.params ?? []).map((p) => p.toString());\n\n  if (paramValues.length !== def.params.length) {\n    throw new Error('Invalid query-segment');\n  }\n\n  return paramValues.map((val, index) => {\n    const defParam = def.params[index];\n    if (defParam.dynamicLookup) {\n      return {\n        value: val,\n        options: unwrap(dynamicParamOptions.get(`${def.type}_${index}`)),\n      };\n    }\n\n    if (defParam.options != null) {\n      return {\n        value: val,\n        options: () => Promise.resolve(defParam.options),\n      };\n    }\n\n    return {\n      value: val,\n      options: null,\n    };\n  });\n}\n\nexport function makePartList(\n  queryParts: InfluxQueryPart[],\n  dynamicParamOptions: Map<string, () => Promise<string[]>>\n): Part[] {\n  return queryParts.map((qp) => {\n    return {\n      name: qp.type,\n      params: getPartParams(qp, dynamicParamOptions),\n    };\n  });\n}\n","import React, { useMemo } from 'react';\nimport { InfluxQuery, InfluxQueryTag } from '../../types';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport InfluxDatasource from '../../datasource';\nimport { FromSection } from './FromSection';\nimport { TagsSection } from './TagsSection';\nimport { PartListSection } from './PartListSection';\nimport { OrderByTimeSection } from './OrderByTimeSection';\nimport { InputSection } from './InputSection';\nimport {\n  getAllMeasurementsForTags,\n  getAllPolicies,\n  getFieldKeysForMeasurement,\n  getTagKeysForMeasurementAndTags,\n  getTagValues,\n} from '../../influxQLMetadataQuery';\nimport {\n  normalizeQuery,\n  addNewSelectPart,\n  removeSelectPart,\n  addNewGroupByPart,\n  removeGroupByPart,\n  changeSelectPart,\n  changeGroupByPart,\n} from '../../queryUtils';\nimport { FormatAsSection } from './FormatAsSection';\nimport { DEFAULT_RESULT_FORMAT } from '../constants';\nimport { getNewSelectPartOptions, getNewGroupByPartOptions, makePartList } from './partListUtils';\nimport { InlineLabel, SegmentSection, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\n\ntype Props = {\n  query: InfluxQuery;\n  onChange: (query: InfluxQuery) => void;\n  onRunQuery: () => void;\n  datasource: InfluxDatasource;\n};\n\nfunction getTemplateVariableOptions() {\n  return (\n    getTemplateSrv()\n      .getVariables()\n      // we make them regex-params, i'm not 100% sure why.\n      // probably because this way multi-value variables work ok too.\n      .map((v) => `/^$${v.name}$/`)\n  );\n}\n\n// helper function to make it easy to call this from the widget-render-code\nfunction withTemplateVariableOptions(optionsPromise: Promise<string[]>): Promise<string[]> {\n  return optionsPromise.then((options) => [...getTemplateVariableOptions(), ...options]);\n}\n\nexport const Editor = (props: Props): JSX.Element => {\n  const styles = useStyles2(getStyles);\n  const query = normalizeQuery(props.query);\n  const { datasource } = props;\n  const { measurement, policy } = query;\n\n  const selectLists = useMemo(() => {\n    const dynamicSelectPartOptions = new Map([\n      [\n        'field_0',\n        () => {\n          return measurement !== undefined\n            ? getFieldKeysForMeasurement(measurement, policy, datasource)\n            : Promise.resolve([]);\n        },\n      ],\n    ]);\n    return (query.select ?? []).map((sel) => makePartList(sel, dynamicSelectPartOptions));\n  }, [measurement, policy, query.select, datasource]);\n\n  // the following function is not complicated enough to memoize, but it's result\n  // is used in both memoized and un-memoized parts, so we have no choice\n  const getTagKeys = useMemo(() => {\n    return () => getTagKeysForMeasurementAndTags(measurement, policy, query.tags ?? [], datasource);\n  }, [measurement, policy, query.tags, datasource]);\n\n  const groupByList = useMemo(() => {\n    const dynamicGroupByPartOptions = new Map([['tag_0', getTagKeys]]);\n\n    return makePartList(query.groupBy ?? [], dynamicGroupByPartOptions);\n  }, [getTagKeys, query.groupBy]);\n\n  const onAppliedChange = (newQuery: InfluxQuery) => {\n    props.onChange(newQuery);\n    props.onRunQuery();\n  };\n  const handleFromSectionChange = (p: string | undefined, m: string | undefined) => {\n    onAppliedChange({\n      ...query,\n      policy: p,\n      measurement: m,\n    });\n  };\n\n  const handleTagsSectionChange = (tags: InfluxQueryTag[]) => {\n    // we set empty-arrays to undefined\n    onAppliedChange({\n      ...query,\n      tags: tags.length === 0 ? undefined : tags,\n    });\n  };\n\n  return (\n    <div>\n      <SegmentSection label=\"FROM\" fill={true}>\n        <FromSection\n          policy={policy}\n          measurement={measurement}\n          getPolicyOptions={() => getAllPolicies(datasource)}\n          getMeasurementOptions={(filter) =>\n            withTemplateVariableOptions(\n              getAllMeasurementsForTags(filter === '' ? undefined : filter, query.tags ?? [], datasource)\n            )\n          }\n          onChange={handleFromSectionChange}\n        />\n        <InlineLabel width=\"auto\" className={styles.inlineLabel}>\n          WHERE\n        </InlineLabel>\n        <TagsSection\n          tags={query.tags ?? []}\n          onChange={handleTagsSectionChange}\n          getTagKeyOptions={getTagKeys}\n          getTagValueOptions={(key: string) =>\n            withTemplateVariableOptions(getTagValues(key, measurement, policy, query.tags ?? [], datasource))\n          }\n        />\n      </SegmentSection>\n      {selectLists.map((sel, index) => (\n        <SegmentSection key={index} label={index === 0 ? 'SELECT' : ''} fill={true}>\n          <PartListSection\n            parts={sel}\n            getNewPartOptions={() => Promise.resolve(getNewSelectPartOptions())}\n            onChange={(partIndex, newParams) => {\n              const newQuery = changeSelectPart(query, index, partIndex, newParams);\n              onAppliedChange(newQuery);\n            }}\n            onAddNewPart={(type) => {\n              onAppliedChange(addNewSelectPart(query, type, index));\n            }}\n            onRemovePart={(partIndex) => {\n              onAppliedChange(removeSelectPart(query, partIndex, index));\n            }}\n          />\n        </SegmentSection>\n      ))}\n      <SegmentSection label=\"GROUP BY\" fill={true}>\n        <PartListSection\n          parts={groupByList}\n          getNewPartOptions={() => getNewGroupByPartOptions(query, getTagKeys)}\n          onChange={(partIndex, newParams) => {\n            const newQuery = changeGroupByPart(query, partIndex, newParams);\n            onAppliedChange(newQuery);\n          }}\n          onAddNewPart={(type) => {\n            onAppliedChange(addNewGroupByPart(query, type));\n          }}\n          onRemovePart={(partIndex) => {\n            onAppliedChange(removeGroupByPart(query, partIndex));\n          }}\n        />\n      </SegmentSection>\n      <SegmentSection label=\"TIMEZONE\" fill={true}>\n        <InputSection\n          placeholder=\"(optional)\"\n          value={query.tz}\n          onChange={(tz) => {\n            onAppliedChange({ ...query, tz });\n          }}\n        />\n        <InlineLabel width=\"auto\" className={styles.inlineLabel}>\n          ORDER BY TIME\n        </InlineLabel>\n        <OrderByTimeSection\n          value={query.orderByTime === 'DESC' ? 'DESC' : 'ASC' /* FIXME: make this shared with influx_query_model */}\n          onChange={(v) => {\n            onAppliedChange({ ...query, orderByTime: v });\n          }}\n        />\n      </SegmentSection>\n      {/* query.fill is ignored in the query-editor, and it is deleted whenever\n          query-editor changes. the influx_query_model still handles it, but the new\n          approach seem to be to handle \"fill\" inside query.groupBy. so, if you\n          have a panel where in the json you have query.fill, it will be applied,\n          as long as you do not edit that query. */}\n      <SegmentSection label=\"LIMIT\" fill={true}>\n        <InputSection\n          placeholder=\"(optional)\"\n          value={query.limit?.toString()}\n          onChange={(limit) => {\n            onAppliedChange({ ...query, limit });\n          }}\n        />\n        <InlineLabel width=\"auto\" className={styles.inlineLabel}>\n          SLIMIT\n        </InlineLabel>\n        <InputSection\n          placeholder=\"(optional)\"\n          value={query.slimit?.toString()}\n          onChange={(slimit) => {\n            onAppliedChange({ ...query, slimit });\n          }}\n        />\n      </SegmentSection>\n      <SegmentSection label=\"FORMAT AS\" fill={true}>\n        <FormatAsSection\n          format={query.resultFormat ?? DEFAULT_RESULT_FORMAT}\n          onChange={(format) => {\n            onAppliedChange({ ...query, resultFormat: format });\n          }}\n        />\n        {query.resultFormat !== 'table' && (\n          <>\n            <InlineLabel width=\"auto\" className={styles.inlineLabel}>\n              ALIAS\n            </InlineLabel>\n            <InputSection\n              isWide\n              placeholder=\"Naming pattern\"\n              value={query.alias}\n              onChange={(alias) => {\n                onAppliedChange({ ...query, alias });\n              }}\n            />\n          </>\n        )}\n      </SegmentSection>\n    </div>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    inlineLabel: css`\n      color: ${theme.colors.primary.text};\n    `,\n  };\n}\n","import React, { useEffect, useState } from 'react';\nimport { Button, ConfirmModal } from '@grafana/ui';\n\ntype Props = {\n  isRaw: boolean;\n  onChange: (newIsRaw: boolean) => void;\n};\n\nexport const QueryEditorModeSwitcher = ({ isRaw, onChange }: Props): JSX.Element => {\n  const [isModalOpen, setModalOpen] = useState(false);\n\n  useEffect(() => {\n    // if the isRaw changes, we hide the modal\n    setModalOpen(false);\n  }, [isRaw]);\n\n  if (isRaw) {\n    return (\n      <>\n        <Button\n          icon=\"pen\"\n          variant=\"secondary\"\n          type=\"button\"\n          onClick={() => {\n            // we show the are-you-sure modal\n            setModalOpen(true);\n          }}\n        ></Button>\n        <ConfirmModal\n          isOpen={isModalOpen}\n          title=\"Switch to visual editor mode\"\n          body=\"Are you sure to switch to visual editor mode? You will lose the changes done in raw query mode.\"\n          confirmText=\"Yes, switch to editor mode\"\n          dismissText=\"No, stay in raw query mode\"\n          onConfirm={() => {\n            onChange(false);\n          }}\n          onDismiss={() => {\n            setModalOpen(false);\n          }}\n        />\n      </>\n    );\n  } else {\n    return (\n      <Button\n        icon=\"pen\"\n        variant=\"secondary\"\n        type=\"button\"\n        onClick={() => {\n          onChange(true);\n        }}\n      ></Button>\n    );\n  }\n};\n","import React from 'react';\n\nconst CHEAT_SHEET_ITEMS = [\n  {\n    title: 'Getting started',\n    label:\n      'Start by selecting a measurement and field from the dropdown above. You can then use the tag selector to further narrow your search.',\n  },\n];\n\nconst InfluxCheatSheet = (props: any) => (\n  <div>\n    <h2>InfluxDB Cheat Sheet</h2>\n    {CHEAT_SHEET_ITEMS.map((item) => (\n      <div className=\"cheat-sheet-item\" key={item.title}>\n        <div className=\"cheat-sheet-item__title\">{item.title}</div>\n        <div className=\"cheat-sheet-item__label\">{item.label}</div>\n      </div>\n    ))}\n  </div>\n);\n\nexport default InfluxCheatSheet;\n","import React, { PureComponent } from 'react';\nimport { QueryEditorHelpProps } from '@grafana/data';\nimport InfluxCheatSheet from './InfluxCheatSheet';\n\nexport default class InfluxStartPage extends PureComponent<QueryEditorHelpProps> {\n  render() {\n    return <InfluxCheatSheet onClickExample={this.props.onClickExample} />;\n  }\n}\n","import React, { PureComponent } from 'react';\nimport {\n  DataSourcePluginOptionsEditorProps,\n  SelectableValue,\n  onUpdateDatasourceOption,\n  updateDatasourcePluginResetOption,\n  onUpdateDatasourceJsonDataOption,\n  onUpdateDatasourceJsonDataOptionSelect,\n  onUpdateDatasourceSecureJsonDataOption,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { Alert, DataSourceHttpSettings, InfoBox, InlineField, InlineFormLabel, LegacyForms } from '@grafana/ui';\nconst { Select, Input, SecretFormField } = LegacyForms;\nimport { InfluxOptions, InfluxSecureJsonData, InfluxVersion } from '../types';\n\nconst httpModes = [\n  { label: 'GET', value: 'GET' },\n  { label: 'POST', value: 'POST' },\n] as SelectableValue[];\n\nconst versions = [\n  {\n    label: 'InfluxQL',\n    value: InfluxVersion.InfluxQL,\n    description: 'The InfluxDB SQL-like query language.',\n  },\n  {\n    label: 'Flux',\n    value: InfluxVersion.Flux,\n    description: 'Advanced data scripting and query language.  Supported in InfluxDB 2.x and 1.8+',\n  },\n] as Array<SelectableValue<InfluxVersion>>;\n\nexport type Props = DataSourcePluginOptionsEditorProps<InfluxOptions>;\ntype State = {\n  maxSeries: string | undefined;\n};\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  state = {\n    maxSeries: '',\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state.maxSeries = props.options.jsonData.maxSeries?.toString() || '';\n  }\n\n  // 1x\n  onResetPassword = () => {\n    updateDatasourcePluginResetOption(this.props, 'password');\n  };\n\n  // 2x\n  onResetToken = () => {\n    updateDatasourcePluginResetOption(this.props, 'token');\n  };\n\n  onVersionChanged = (selected: SelectableValue<InfluxVersion>) => {\n    const { options, onOptionsChange } = this.props;\n\n    const copy: any = {\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        version: selected.value,\n      },\n    };\n    if (selected.value === InfluxVersion.Flux) {\n      copy.access = 'proxy';\n      copy.basicAuth = true;\n      copy.jsonData.httpMode = 'POST';\n\n      // Remove old 1x configs\n      delete copy.user;\n      delete copy.database;\n    }\n\n    onOptionsChange(copy);\n  };\n\n  renderInflux2x() {\n    const { options } = this.props;\n    const { secureJsonFields } = options;\n    const secureJsonData = (options.secureJsonData || {}) as InfluxSecureJsonData;\n\n    return (\n      <>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel className=\"width-10\">Organization</InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                className=\"width-20\"\n                value={options.jsonData.organization || ''}\n                onChange={onUpdateDatasourceJsonDataOption(this.props, 'organization')}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <SecretFormField\n              isConfigured={(secureJsonFields && secureJsonFields.token) as boolean}\n              value={secureJsonData.token || ''}\n              label=\"Token\"\n              labelWidth={10}\n              inputWidth={20}\n              onReset={this.onResetToken}\n              onChange={onUpdateDatasourceSecureJsonDataOption(this.props, 'token')}\n            />\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel className=\"width-10\">Default Bucket</InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                className=\"width-20\"\n                placeholder=\"default bucket\"\n                value={options.jsonData.defaultBucket || ''}\n                onChange={onUpdateDatasourceJsonDataOption(this.props, 'defaultBucket')}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel\n              className=\"width-10\"\n              tooltip=\"A lower limit for the auto group by time interval. Recommended to be set to write frequency,\n\t\t\t\tfor example 1m if your data is written every minute.\"\n            >\n              Min time interval\n            </InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                className=\"width-10\"\n                placeholder=\"10s\"\n                value={options.jsonData.timeInterval || ''}\n                onChange={onUpdateDatasourceJsonDataOption(this.props, 'timeInterval')}\n              />\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  renderInflux1x() {\n    const { options } = this.props;\n    const { secureJsonFields } = options;\n    const secureJsonData = (options.secureJsonData || {}) as InfluxSecureJsonData;\n\n    return (\n      <>\n        <InfoBox>\n          <h5>Database Access</h5>\n          <p>\n            Setting the database for this datasource does not deny access to other databases. The InfluxDB query syntax\n            allows switching the database in the query. For example:\n            <code>SHOW MEASUREMENTS ON _internal</code> or\n            <code>SELECT * FROM &quot;_internal&quot;..&quot;database&quot; LIMIT 10</code>\n            <br />\n            <br />\n            To support data isolation and security, make sure appropriate permissions are configured in InfluxDB.\n          </p>\n        </InfoBox>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel className=\"width-10\">Database</InlineFormLabel>\n            <div className=\"width-20\">\n              <Input\n                className=\"width-20\"\n                value={options.database || ''}\n                onChange={onUpdateDatasourceOption(this.props, 'database')}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel className=\"width-10\">User</InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                className=\"width-20\"\n                value={options.user || ''}\n                onChange={onUpdateDatasourceOption(this.props, 'user')}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <SecretFormField\n              isConfigured={(secureJsonFields && secureJsonFields.password) as boolean}\n              value={secureJsonData.password || ''}\n              label=\"Password\"\n              labelWidth={10}\n              inputWidth={20}\n              onReset={this.onResetPassword}\n              onChange={onUpdateDatasourceSecureJsonDataOption(this.props, 'password')}\n            />\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel\n              className=\"width-10\"\n              tooltip=\"You can use either GET or POST HTTP method to query your InfluxDB database. The POST\n          method allows you to perform heavy requests (with a lots of WHERE clause) while the GET method\n          will restrict you and return an error if the query is too large.\"\n            >\n              HTTP Method\n            </InlineFormLabel>\n            <Select\n              menuShouldPortal\n              className=\"width-10\"\n              value={httpModes.find((httpMode) => httpMode.value === options.jsonData.httpMode)}\n              options={httpModes}\n              defaultValue={options.jsonData.httpMode}\n              onChange={onUpdateDatasourceJsonDataOptionSelect(this.props, 'httpMode')}\n            />\n          </div>\n        </div>\n\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel\n              className=\"width-10\"\n              tooltip=\"A lower limit for the auto group by time interval. Recommended to be set to write frequency,\n\t\t\t\tfor example 1m if your data is written every minute.\"\n            >\n              Min time interval\n            </InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                className=\"width-10\"\n                placeholder=\"10s\"\n                value={options.jsonData.timeInterval || ''}\n                onChange={onUpdateDatasourceJsonDataOption(this.props, 'timeInterval')}\n              />\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    const { options, onOptionsChange } = this.props;\n\n    return (\n      <>\n        <h3 className=\"page-heading\">Query Language</h3>\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <Select\n                menuShouldPortal\n                className=\"width-30\"\n                value={options.jsonData.version === InfluxVersion.Flux ? versions[1] : versions[0]}\n                options={versions}\n                defaultValue={versions[0]}\n                onChange={this.onVersionChanged}\n              />\n            </div>\n          </div>\n        </div>\n\n        {options.jsonData.version === InfluxVersion.Flux && (\n          <InfoBox>\n            <h5>Support for Flux in Grafana is currently in beta</h5>\n            <p>\n              Please report any issues to: <br />\n              <a href=\"https://github.com/grafana/grafana/issues/new/choose\">\n                https://github.com/grafana/grafana/issues\n              </a>\n            </p>\n          </InfoBox>\n        )}\n\n        {options.access === 'direct' && (\n          <Alert title=\"Deprecation Notice\" severity=\"warning\">\n            Browser access mode in the InfluxDB datasource is deprecated and will be removed in a future release.\n          </Alert>\n        )}\n\n        <DataSourceHttpSettings\n          showAccessOptions={true}\n          dataSourceConfig={options}\n          defaultUrl=\"http://localhost:8086\"\n          onChange={onOptionsChange}\n        />\n\n        <div className=\"gf-form-group\">\n          <div>\n            <h3 className=\"page-heading\">InfluxDB Details</h3>\n          </div>\n          {options.jsonData.version === InfluxVersion.Flux ? this.renderInflux2x() : this.renderInflux1x()}\n          <div className=\"gf-form-inline\">\n            <InlineField\n              labelWidth={20}\n              label=\"Max series\"\n              tooltip=\"Limit the number of series/tables that Grafana will process. Lower this number to prevent abuse, and increase it if you have lots of small time series and not all are shown. Defaults to 1000.\"\n            >\n              <Input\n                placeholder=\"1000\"\n                type=\"number\"\n                className=\"width-10\"\n                value={this.state.maxSeries}\n                onChange={(event) => {\n                  // We duplicate this state so that we allow to write freely inside the input. We don't have\n                  // any influence over saving so this seems to be only way to do this.\n                  this.setState({ maxSeries: event.currentTarget.value });\n                  const val = parseInt(event.currentTarget.value, 10);\n                  updateDatasourcePluginJsonDataOption(this.props, 'maxSeries', Number.isFinite(val) ? val : undefined);\n                }}\n              />\n            </InlineField>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ConfigEditor;\n","import React, { PureComponent } from 'react';\nimport InfluxDatasource from '../datasource';\nimport { InlineFormLabel, TextArea } from '@grafana/ui';\nimport { FluxQueryEditor } from './FluxQueryEditor';\n\ninterface Props {\n  query: string; // before flux, it was always a string\n  onChange: (query?: string) => void;\n  datasource: InfluxDatasource;\n}\n\nexport default class VariableQueryEditor extends PureComponent<Props> {\n  onRefresh = () => {\n    // noop\n  };\n\n  render() {\n    let { query, datasource, onChange } = this.props;\n    if (datasource.isFlux) {\n      return (\n        <FluxQueryEditor\n          datasource={datasource}\n          query={{\n            refId: 'A',\n            query,\n          }}\n          onRunQuery={this.onRefresh}\n          onChange={(v) => onChange(v.query)}\n        />\n      );\n    }\n\n    return (\n      <div className=\"gf-form-inline\">\n        <InlineFormLabel width={10}>Query</InlineFormLabel>\n        <div className=\"gf-form-inline gf-form--grow\">\n          <TextArea\n            defaultValue={query || ''}\n            placeholder=\"metric name or tags query\"\n            rows={1}\n            className=\"gf-form-input\"\n            onBlur={(e) => onChange(e.currentTarget.value)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import InfluxDatasource from './datasource';\nimport { QueryEditor } from './components/QueryEditor';\nimport InfluxStartPage from './components/InfluxStartPage';\nimport { DataSourcePlugin } from '@grafana/data';\nimport ConfigEditor from './components/ConfigEditor';\nimport VariableQueryEditor from './components/VariableQueryEditor';\n\nclass InfluxAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport const plugin = new DataSourcePlugin(InfluxDatasource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setAnnotationQueryCtrl(InfluxAnnotationsQueryCtrl)\n  .setVariableQueryEditor(VariableQueryEditor)\n  .setQueryEditorHelp(InfluxStartPage);\n","import React from 'react';\nimport { css } from '@emotion/css';\nimport { QueryEditorProps } from '@grafana/data';\nimport { InfluxOptions, InfluxQuery } from '../types';\nimport InfluxDatasource from '../datasource';\nimport { FluxQueryEditor } from './FluxQueryEditor';\nimport { RawInfluxQLEditor } from './RawInfluxQLEditor';\nimport { Editor as VisualInfluxQLEditor } from './VisualInfluxQLEditor/Editor';\nimport { QueryEditorModeSwitcher } from './QueryEditorModeSwitcher';\nimport { buildRawQuery } from '../queryUtils';\n\ntype Props = QueryEditorProps<InfluxDatasource, InfluxQuery, InfluxOptions>;\n\nexport const QueryEditor = ({ query, onChange, onRunQuery, datasource, range, data }: Props): JSX.Element => {\n  if (datasource.isFlux) {\n    return (\n      <div className=\"gf-form-query-content\">\n        <FluxQueryEditor query={query} onChange={onChange} onRunQuery={onRunQuery} datasource={datasource} />\n      </div>\n    );\n  }\n\n  return (\n    <div className={css({ display: 'flex' })}>\n      <div className={css({ flexGrow: 1 })}>\n        {query.rawQuery ? (\n          <RawInfluxQLEditor query={query} onChange={onChange} onRunQuery={onRunQuery} />\n        ) : (\n          <VisualInfluxQLEditor query={query} onChange={onChange} onRunQuery={onRunQuery} datasource={datasource} />\n        )}\n      </div>\n      <QueryEditorModeSwitcher\n        isRaw={query.rawQuery ?? false}\n        onChange={(value) => {\n          onChange({ ...query, query: buildRawQuery(query), rawQuery: value });\n          onRunQuery();\n        }}\n      />\n    </div>\n  );\n};\n","import { useEffect, useRef } from 'react';\nexport default function usePrevious(state) {\n    var ref = useRef();\n    useEffect(function () {\n        ref.current = state;\n    });\n    return ref.current;\n}\n"],"names":["InfluxSeries","constructor","options","this","series","alias","annotation","meta","refId","getTimeSeries","output","i","j","length","each","columns","tags","map","value","key","seriesName","name","columnName","_getSeriesName","join","datapoints","values","push","title","target","index","segments","split","replace","match","g1","g2","group","segIndex","parseInt","isNaN","indexOf","tag","getAnnotations","list","titleCol","timeCol","timeEndCol","tagsCol","textCol","column","titleColumn","includes","tagsColumn","textColumn","timeEndColumn","data","time","Date","timeEnd","flatten","filter","t","text","getTable","table","TableModel","seriesIndex","firstCol","firstTableCol","type","FieldType","keys","reordered","hasOwnProperty","rows","categories","Aggregations","Selectors","Transformations","Predictors","Math","Aliasing","Fields","createPart","part","def","message","QueryPart","register","QueryPartDef","category","groupByTimeFunctions","fieldRenderer","innerExpr","params","replaceAggregationAddStrategy","selectParts","partModel","morePartsAvailable","splice","addTransformationStrategy","addStrategy","query","parts","clone","selectModels","dynamicLookup","defaultParams","renderer","functionRenderer","partCount","suffixRenderer","quote","renderMode","create","getCategories","replaceAggregationAdd","InfluxQueryModel","templateSrv","scopedVars","policy","resultFormat","orderByTime","groupBy","select","updateProjection","queryPart","groupByParts","updatePersistedParts","hasGroupByTime","find","g","hasFill","addGroupBy","stringParts","typePart","arg","removeGroupByPart","s","removeSelect","removeSelectPart","modelsIndex","partIndex","addSelectPart","renderTagCondition","interpolate","str","operator","condition","test","getMeasurementAndPolicy","measurement","interpolateQueryStr","variable","defaultFormatFn","multi","includeAll","kbn","render","rawQuery","y","selectText","conditions","groupBySection","fill","limit","slimit","tz","renderAdhocFilters","filters","ResponseParser","parse","results","influxResults","normalizedQuery","toLowerCase","isValueFirst","res","Set","serie","isArray","addUnique","undefined","Array","from","v","add","toString","InfluxQueryBuilder","database","buildExploreQuery","withKey","withMeasurementFilter","whereConditions","reduce","memo","InfluxVersion","samples","label","description","FluxQueryEditor","PureComponent","props","onChange","onRunQuery","val","forceUpdate","sugs","kind","CodeEditorSuggestionItemKind","detail","getTemplateSrv","getVariables","forEach","editor","setTimeout","layout","helpTooltip","CodeEditor","height","language","onBlur","onFluxQueryChange","onSave","showMiniMap","showLineNumbers","getSuggestions","onEditorDidMount","editorDidMountCallbackHack","className","cx","css","LinkButton","icon","variant","href","Segment","onSampleChange","InlineFormLabel","width","tooltip","buildRawQuery","queryCopy","cloneDeep","getFieldType","firstNotNull","valueType","Error","timeSeriesToDataFrame","timeSeries","times","points","point","fields","TIME_SERIES_TIME_FIELD_NAME","config","ArrayVector","TIME_SERIES_VALUE_FIELD_NAME","displayNameFromDS","labels","InfluxDatasource","DataSourceWithBackend","instanceSettings","super","urls","url","trim","username","password","basicAuth","withCredentials","settingsData","jsonData","interval","timeInterval","httpMode","responseParser","isFlux","version","Flux","annotations","QueryEditor","request","filteredRequest","targets","hide","classicQuery","getQueryDisplayText","filterQuery","applyTemplateVariables","rest","timeFilter","getTimeFilter","queryTargets","allQueries","_map","__interval","acc","current","of","adhocFilters","getAdhocFilters","_seriesQuery","pipe","seriesList","result","executedQueryString","influxSeries","preferredVisualisationType","Promise","reject","rangeRaw","timezone","dashboard","lastValueFrom","then","targetContainsTemplate","queryText","variableExists","interpolateVariablesInQueries","queries","expandedQueries","expandedQuery","datasource","getRef","rsp","frameToMetricFindValue","interpolated","resp","getTagKeys","metricFindQuery","getTagValues","range","_influxRequest","q","epoch","serializeParams","encodeURIComponent","testDatasource","requestId","id","uuidv4","dashboardId","panelId","intervalMs","maxDataPoints","dateTime","to","state","LoadingState","console","error","status","first","catch","err","get","method","currentUrl","shift","u","p","db","has","extend","omit","pick","req","precision","inspect","paramSerializer","headers","Authorization","getBackendSrv","fetch","errors","elem","catchError","cancelled","throwError","handleErrors","Number","isInteger","statusText","getInfluxTime","date","roundUp","isString","exec","dateMath","valueOf","useShadowedState","outsideVal","currentVal","setCurrentVal","useState","prevOutsideVal","usePrevious","useEffect","RESULT_FORMATS","DEFAULT_RESULT_FORMAT","RawInfluxQLEditor","currentQuery","setCurrentQuery","currentAlias","setCurrentAlias","aliasElementId","useUniqueId","selectElementId","applyDelayedChangesAndRunQuery","TextArea","spellCheck","placeholder","e","currentTarget","HorizontalGroup","htmlFor","Select","menuShouldPortal","inputId","Input","selectClass","minWidth","formatCreateLabel","SelReload","loadOptions","allowCustomValue","onClose","debouncedLoadOptions","debouncePromise","leading","AsyncSelect","defaultOptions","autoFocus","isOpen","onCloseMenu","SelSingleLoad","loadState","doLoad","useAsyncFn","isLoading","loading","Sel","filterByLoadOptions","Inp","initialValue","currentValue","setCurrentValue","onKeyDown","defaultButtonClass","cursor","Seg","buttonClassName","setOpen","InlineLabel","as","onClick","toSelectableValue","FromSection","getPolicyOptions","getMeasurementOptions","async","allPolicies","some","isRegex","getOperator","getCondition","isFirst","adjustOperatorIfNeeded","currentOperator","newTagValue","isCurrentOperatorRegex","unwrap","AddButton","onAdd","operatorOptions","condititonOptions","loadConditionOptions","resolve","loadOperatorOptions","Tag","onRemove","getTagKeyOptions","getTagValueOptions","op","TagsSection","newT","newTag","newTags","onTagChange","onTagRemove","tagKey","minimalTag","addNewTag","noRightMarginPaddingClass","paddingRight","marginRight","RemovableName","WithContextMenu","renderMenuItems","renderRemovableNameMenuItems","MenuGroup","MenuItem","openMenu","noHorizMarginPaddingClass","paddingLeft","marginLeft","Part","theme","useTheme2","partClass","useMemo","lineHeight","typography","body","fontSize","getPartClass","isLast","items","par","newParams","onParamChange","PartListSection","getNewPartOptions","onAddNewPart","onRemovePart","pars","paddingRightClass","OPTIONS","OrderByTimeSection","InputSection","isWide","runExploreQuery","FormatAsSection","format","getPartParams","dynamicParamOptions","paramValues","defParam","makePartList","queryParts","qp","withTemplateVariableOptions","optionsPromise","Editor","styles","useStyles2","getStyles","normalizeQuery","selectLists","dynamicSelectPartOptions","Map","item","getFieldKeysForMeasurement","sel","getTagKeysForMeasurementAndTags","groupByList","dynamicGroupByPartOptions","onAppliedChange","newQuery","SegmentSection","getAllPolicies","measurementFilter","getAllMeasurementsForTags","m","inlineLabel","Object","children","x","getNewSelectPartOptions","listIndex","newSel","changeSelectPart","model","addNewSelectPart","selectModel","tagKeys","getNewGroupByPartOptions","newGroupBy","changeGroupByPart","addNewGroupByPart","colors","primary","QueryEditorModeSwitcher","isRaw","isModalOpen","setModalOpen","Button","ConfirmModal","confirmText","dismissText","onConfirm","onDismiss","CHEAT_SHEET_ITEMS","InfluxStartPage","onClickExample","SecretFormField","LegacyForms","httpModes","versions","InfluxQL","ConfigEditor","maxSeries","updateDatasourcePluginResetOption","selected","onOptionsChange","copy","access","user","renderInflux2x","secureJsonFields","secureJsonData","organization","onUpdateDatasourceJsonDataOption","isConfigured","token","labelWidth","inputWidth","onReset","onResetToken","onUpdateDatasourceSecureJsonDataOption","defaultBucket","renderInflux1x","InfoBox","onUpdateDatasourceOption","onResetPassword","defaultValue","onUpdateDatasourceJsonDataOptionSelect","onVersionChanged","Alert","severity","DataSourceHttpSettings","showAccessOptions","dataSourceConfig","defaultUrl","InlineField","event","setState","updateDatasourcePluginJsonDataOption","isFinite","VariableQueryEditor","onRefresh","InfluxAnnotationsQueryCtrl","plugin","DataSourcePlugin","setConfigEditor","setQueryEditor","display","flexGrow","setAnnotationQueryCtrl","setVariableQueryEditor","setQueryEditorHelp","ref","useRef"],"sourceRoot":""}