{"version":3,"file":"NewDataSourcePage.1f65f885c5a67f13d9d6.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/Card/Card.tsx","webpack://grafana/./public/app/features/plugins/components/PluginsErrorsInfo.tsx","webpack://grafana/./public/app/features/datasources/NewDataSourcePage.tsx","webpack://grafana/./public/app/features/plugins/admin/state/selectors.ts","webpack://grafana/./public/app/features/plugins/admin/state/hooks.ts"],"sourcesContent":["import React from 'react';\nimport { cx } from '@emotion/css';\n\nexport interface CardProps {\n  logoUrl?: string;\n  logoAlt?: string;\n  title: string;\n  description?: string;\n  labels?: React.ReactNode;\n  actions?: React.ReactNode;\n  onClick?: () => void;\n  ariaLabel?: string;\n  className?: string;\n}\n\nexport const Card: React.FC<CardProps> = ({\n  logoUrl,\n  logoAlt,\n  title,\n  description,\n  labels,\n  actions,\n  onClick,\n  ariaLabel,\n  className,\n}) => {\n  const mainClassName = cx('add-data-source-item', className);\n\n  return (\n    <div className={mainClassName} onClick={onClick} aria-label={ariaLabel}>\n      {logoUrl && <img className=\"add-data-source-item-logo\" src={logoUrl} alt={logoAlt ?? ''} />}\n      <div className=\"add-data-source-item-text-wrapper\">\n        <span className=\"add-data-source-item-text\">{title}</span>\n        {description && <span className=\"add-data-source-item-desc\">{description}</span>}\n        {labels && <div className=\"add-data-source-item-badge\">{labels}</div>}\n      </div>\n      {actions && <div className=\"add-data-source-item-actions\">{actions}</div>}\n    </div>\n  );\n};\n","import React from 'react';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { HorizontalGroup, InfoBox, List, PluginSignatureBadge, useTheme } from '@grafana/ui';\nimport { useGetErrors, useFetchStatus } from '../admin/state/hooks';\nimport { PluginErrorCode, PluginSignatureStatus } from '@grafana/data';\nimport { css } from '@emotion/css';\n\nexport function PluginsErrorsInfo(): React.ReactElement | null {\n  const errors = useGetErrors();\n  const { isLoading } = useFetchStatus();\n  const theme = useTheme();\n\n  if (isLoading || errors.length === 0) {\n    return null;\n  }\n\n  return (\n    <InfoBox\n      aria-label={selectors.pages.PluginsList.signatureErrorNotice}\n      severity=\"warning\"\n      urlTitle=\"Read more about plugin signing\"\n      url=\"https://grafana.com/docs/grafana/latest/plugins/plugin-signatures/\"\n    >\n      <div>\n        <p>\n          Unsigned plugins were found during plugin initialization. Grafana Labs cannot guarantee the integrity of these\n          plugins. We recommend only using signed plugins.\n        </p>\n        The following plugins are disabled and not shown in the list below:\n        <List\n          items={errors}\n          className={css`\n            list-style-type: circle;\n          `}\n          renderItem={(error) => (\n            <div\n              className={css`\n                margin-top: ${theme.spacing.sm};\n              `}\n            >\n              <HorizontalGroup spacing=\"sm\" justify=\"flex-start\" align=\"center\">\n                <strong>{error.pluginId}</strong>\n                <PluginSignatureBadge\n                  status={mapPluginErrorCodeToSignatureStatus(error.errorCode)}\n                  className={css`\n                    margin-top: 0;\n                  `}\n                />\n              </HorizontalGroup>\n            </div>\n          )}\n        />\n      </div>\n    </InfoBox>\n  );\n}\n\nfunction mapPluginErrorCodeToSignatureStatus(code: PluginErrorCode) {\n  switch (code) {\n    case PluginErrorCode.invalidSignature:\n      return PluginSignatureStatus.invalid;\n    case PluginErrorCode.missingSignature:\n      return PluginSignatureStatus.missing;\n    case PluginErrorCode.modifiedSignature:\n      return PluginSignatureStatus.modified;\n    default:\n      return PluginSignatureStatus.missing;\n  }\n}\n","import React, { FC, PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { DataSourcePluginMeta, NavModel } from '@grafana/data';\nimport { Button, LinkButton, List, PluginSignatureBadge, FilterInput } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport Page from 'app/core/components/Page/Page';\nimport { StoreState } from 'app/types';\nimport { addDataSource, loadDataSourcePlugins } from './state/actions';\nimport { getDataSourcePlugins } from './state/selectors';\nimport { setDataSourceTypeSearchQuery } from './state/reducers';\nimport { Card } from 'app/core/components/Card/Card';\nimport { PluginsErrorsInfo } from '../plugins/components/PluginsErrorsInfo';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(),\n    plugins: getDataSourcePlugins(state.dataSources),\n    searchQuery: state.dataSources.dataSourceTypeSearchQuery,\n    categories: state.dataSources.categories,\n    isLoading: state.dataSources.isLoadingDataSources,\n  };\n}\n\nconst mapDispatchToProps = {\n  addDataSource,\n  loadDataSourcePlugins,\n  setDataSourceTypeSearchQuery,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype Props = ConnectedProps<typeof connector>;\n\nclass NewDataSourcePage extends PureComponent<Props> {\n  componentDidMount() {\n    this.props.loadDataSourcePlugins();\n  }\n\n  onDataSourceTypeClicked = (plugin: DataSourcePluginMeta) => {\n    this.props.addDataSource(plugin);\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setDataSourceTypeSearchQuery(value);\n  };\n\n  renderPlugins(plugins: DataSourcePluginMeta[]) {\n    if (!plugins || !plugins.length) {\n      return null;\n    }\n\n    return (\n      <List\n        items={plugins}\n        getItemKey={(item) => item.id.toString()}\n        renderItem={(item) => (\n          <DataSourceTypeCard\n            plugin={item}\n            onClick={() => this.onDataSourceTypeClicked(item)}\n            onLearnMoreClick={this.onLearnMoreClick}\n          />\n        )}\n      />\n    );\n  }\n\n  onLearnMoreClick = (evt: React.SyntheticEvent<HTMLElement>) => {\n    evt.stopPropagation();\n  };\n\n  renderCategories() {\n    const { categories } = this.props;\n\n    return (\n      <>\n        {categories.map((category) => (\n          <div className=\"add-data-source-category\" key={category.id}>\n            <div className=\"add-data-source-category__header\">{category.title}</div>\n            {this.renderPlugins(category.plugins)}\n          </div>\n        ))}\n        <div className=\"add-data-source-more\">\n          <LinkButton\n            variant=\"secondary\"\n            href=\"https://grafana.com/plugins?type=datasource&utm_source=grafana_add_ds\"\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            Find more data source plugins on grafana.com\n          </LinkButton>\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    const { navModel, isLoading, searchQuery, plugins } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <FilterInput value={searchQuery} onChange={this.onSearchQueryChange} placeholder=\"Filter by name or type\" />\n            <div className=\"page-action-bar__spacer\" />\n            <LinkButton href=\"datasources\" fill=\"outline\" variant=\"secondary\" icon=\"arrow-left\">\n              Cancel\n            </LinkButton>\n          </div>\n          {!searchQuery && <PluginsErrorsInfo />}\n          <div>\n            {searchQuery && this.renderPlugins(plugins)}\n            {!searchQuery && this.renderCategories()}\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\ninterface DataSourceTypeCardProps {\n  plugin: DataSourcePluginMeta;\n  onClick: () => void;\n  onLearnMoreClick: (evt: React.SyntheticEvent<HTMLElement>) => void;\n}\n\nconst DataSourceTypeCard: FC<DataSourceTypeCardProps> = (props) => {\n  const { plugin, onLearnMoreClick } = props;\n  const isPhantom = plugin.module === 'phantom';\n  const onClick = !isPhantom && !plugin.unlicensed ? props.onClick : () => {};\n  // find first plugin info link\n  const learnMoreLink = plugin.info?.links?.length > 0 ? plugin.info.links[0] : null;\n\n  return (\n    <Card\n      title={plugin.name}\n      description={plugin.info.description}\n      ariaLabel={selectors.pages.AddDataSource.dataSourcePlugins(plugin.name)}\n      logoUrl={plugin.info.logos.small}\n      actions={\n        <>\n          {learnMoreLink && (\n            <LinkButton\n              variant=\"secondary\"\n              href={`${learnMoreLink.url}?utm_source=grafana_add_ds`}\n              target=\"_blank\"\n              rel=\"noopener\"\n              onClick={onLearnMoreClick}\n              icon=\"external-link-alt\"\n            >\n              {learnMoreLink.name}\n            </LinkButton>\n          )}\n          {!isPhantom && <Button disabled={plugin.unlicensed}>Select</Button>}\n        </>\n      }\n      labels={!isPhantom && <PluginSignatureBadge status={plugin.signature} />}\n      className={isPhantom ? 'add-data-source-item--phantom' : ''}\n      onClick={onClick}\n      aria-label={selectors.pages.AddDataSource.dataSourcePlugins(plugin.name)}\n    />\n  );\n};\n\nexport function getNavModel(): NavModel {\n  const main = {\n    icon: 'database',\n    id: 'datasource-new',\n    text: 'Add data source',\n    href: 'datasources/new',\n    subTitle: 'Choose a data source type',\n  };\n\n  return {\n    main: main,\n    node: main,\n  };\n}\n\nexport default connector(NewDataSourcePage);\n","import { createSelector } from '@reduxjs/toolkit';\nimport { PluginError, PluginErrorCode } from '@grafana/data';\nimport { RequestStatus, PluginCatalogStoreState } from '../types';\nimport { pluginsAdapter } from './reducer';\n\nexport const selectRoot = (state: PluginCatalogStoreState) => state.plugins;\n\nexport const selectItems = createSelector(selectRoot, ({ items }) => items);\n\nexport const selectDisplayMode = createSelector(selectRoot, ({ settings }) => settings.displayMode);\n\nexport const { selectAll, selectById } = pluginsAdapter.getSelectors(selectItems);\n\nconst selectInstalled = (filterBy: string) =>\n  createSelector(selectAll, (plugins) =>\n    plugins.filter((plugin) => (filterBy === 'installed' ? plugin.isInstalled : !plugin.isCore))\n  );\n\nconst findByInstallAndType = (filterBy: string, filterByType: string) =>\n  createSelector(selectInstalled(filterBy), (plugins) =>\n    plugins.filter((plugin) => filterByType === 'all' || plugin.type === filterByType)\n  );\n\nconst findByKeyword = (searchBy: string) =>\n  createSelector(selectAll, (plugins) => {\n    if (searchBy === '') {\n      return [];\n    }\n\n    return plugins.filter((plugin) => {\n      const fields: String[] = [];\n      if (plugin.name) {\n        fields.push(plugin.name.toLowerCase());\n      }\n\n      if (plugin.orgName) {\n        fields.push(plugin.orgName.toLowerCase());\n      }\n\n      return fields.some((f) => f.includes(searchBy.toLowerCase()));\n    });\n  });\n\nexport const find = (searchBy: string, filterBy: string, filterByType: string) =>\n  createSelector(\n    findByInstallAndType(filterBy, filterByType),\n    findByKeyword(searchBy),\n    (filteredPlugins, searchedPlugins) => {\n      return searchBy === '' ? filteredPlugins : searchedPlugins;\n    }\n  );\n\nexport const selectPluginErrors = createSelector(selectAll, (plugins) =>\n  plugins\n    ? plugins\n        .filter((p) => Boolean(p.error))\n        .map(\n          (p): PluginError => ({\n            pluginId: p.id,\n            errorCode: p!.error as PluginErrorCode,\n          })\n        )\n    : []\n);\n\n// The following selectors are used to get information about the outstanding or completed plugins-related network requests.\nexport const selectRequest = (actionType: string) =>\n  createSelector(selectRoot, ({ requests = {} }) => requests[actionType]);\n\nexport const selectIsRequestPending = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request?.status === RequestStatus.Pending);\n\nexport const selectRequestError = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) =>\n    request?.status === RequestStatus.Rejected ? request?.error : null\n  );\n\nexport const selectIsRequestNotFetched = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request === undefined);\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { PluginError } from '@grafana/data';\nimport { setDisplayMode } from './reducer';\nimport { fetchAll, fetchDetails, fetchRemotePlugins, install, uninstall } from './actions';\nimport { CatalogPlugin, PluginCatalogStoreState, PluginListDisplayMode } from '../types';\nimport {\n  find,\n  selectAll,\n  selectById,\n  selectIsRequestPending,\n  selectRequestError,\n  selectIsRequestNotFetched,\n  selectDisplayMode,\n  selectPluginErrors,\n} from './selectors';\nimport { sortPlugins, Sorters } from '../helpers';\n\ntype Filters = {\n  query?: string;\n  filterBy?: string;\n  filterByType?: string;\n  sortBy?: Sorters;\n};\n\nexport const useGetAllWithFilters = ({\n  query = '',\n  filterBy = 'installed',\n  filterByType = 'all',\n  sortBy = Sorters.nameAsc,\n}: Filters) => {\n  useFetchAll();\n\n  const filtered = useSelector(find(query, filterBy, filterByType));\n  const { isLoading, error } = useFetchStatus();\n  const sortedAndFiltered = sortPlugins(filtered, sortBy);\n\n  return {\n    isLoading,\n    error,\n    plugins: sortedAndFiltered,\n  };\n};\n\nexport const useGetAll = (): CatalogPlugin[] => {\n  useFetchAll();\n\n  return useSelector(selectAll);\n};\n\nexport const useGetSingle = (id: string): CatalogPlugin | undefined => {\n  useFetchAll();\n  useFetchDetails(id);\n\n  return useSelector((state: PluginCatalogStoreState) => selectById(state, id));\n};\n\nexport const useGetErrors = (): PluginError[] => {\n  useFetchAll();\n\n  return useSelector(selectPluginErrors);\n};\n\nexport const useInstall = () => {\n  const dispatch = useDispatch();\n  return (id: string, version?: string, isUpdating?: boolean) => dispatch(install({ id, version, isUpdating }));\n};\n\nexport const useUninstall = () => {\n  const dispatch = useDispatch();\n\n  return (id: string) => dispatch(uninstall(id));\n};\n\nexport const useIsRemotePluginsAvailable = () => {\n  const error = useSelector(selectRequestError(fetchRemotePlugins.typePrefix));\n  return error === null;\n};\n\nexport const useFetchStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending(fetchAll.typePrefix));\n  const error = useSelector(selectRequestError(fetchAll.typePrefix));\n\n  return { isLoading, error };\n};\n\nexport const useFetchDetailsStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending(fetchDetails.typePrefix));\n  const error = useSelector(selectRequestError(fetchDetails.typePrefix));\n\n  return { isLoading, error };\n};\n\nexport const useInstallStatus = () => {\n  const isInstalling = useSelector(selectIsRequestPending(install.typePrefix));\n  const error = useSelector(selectRequestError(install.typePrefix));\n\n  return { isInstalling, error };\n};\n\nexport const useUninstallStatus = () => {\n  const isUninstalling = useSelector(selectIsRequestPending(uninstall.typePrefix));\n  const error = useSelector(selectRequestError(uninstall.typePrefix));\n\n  return { isUninstalling, error };\n};\n\n// Only fetches in case they were not fetched yet\nexport const useFetchAll = () => {\n  const dispatch = useDispatch();\n  const isNotFetched = useSelector(selectIsRequestNotFetched(fetchAll.typePrefix));\n\n  useEffect(() => {\n    isNotFetched && dispatch(fetchAll());\n  }, []); // eslint-disable-line\n};\n\nexport const useFetchDetails = (id: string) => {\n  const dispatch = useDispatch();\n  const plugin = useSelector((state: PluginCatalogStoreState) => selectById(state, id));\n  const isNotFetching = !useSelector(selectIsRequestPending(fetchDetails.typePrefix));\n  const shouldFetch = isNotFetching && plugin && !plugin.details;\n\n  useEffect(() => {\n    shouldFetch && dispatch(fetchDetails(id));\n  }, [plugin]); // eslint-disable-line\n};\n\nexport const useDisplayMode = () => {\n  const dispatch = useDispatch();\n  const displayMode = useSelector(selectDisplayMode);\n\n  return {\n    displayMode,\n    setDisplayMode: (v: PluginListDisplayMode) => dispatch(setDisplayMode(v)),\n  };\n};\n"],"names":["Card","logoUrl","logoAlt","title","description","labels","actions","onClick","ariaLabel","className","mainClassName","cx","src","alt","PluginsErrorsInfo","errors","useGetErrors","isLoading","useFetchStatus","theme","useTheme","length","InfoBox","selectors","severity","urlTitle","url","List","items","css","renderItem","error","spacing","sm","HorizontalGroup","justify","align","pluginId","PluginSignatureBadge","status","mapPluginErrorCodeToSignatureStatus","errorCode","code","PluginErrorCode","PluginSignatureStatus","mapDispatchToProps","addDataSource","loadDataSourcePlugins","setDataSourceTypeSearchQuery","connector","connect","state","navModel","getNavModel","plugins","getDataSourcePlugins","dataSources","searchQuery","dataSourceTypeSearchQuery","categories","isLoadingDataSources","NewDataSourcePage","PureComponent","plugin","this","props","value","evt","stopPropagation","componentDidMount","renderPlugins","getItemKey","item","id","toString","DataSourceTypeCard","onDataSourceTypeClicked","onLearnMoreClick","renderCategories","map","category","LinkButton","variant","href","target","rel","render","Page","FilterInput","onChange","onSearchQueryChange","placeholder","fill","icon","isPhantom","module","unlicensed","learnMoreLink","info","links","name","logos","small","Button","disabled","signature","main","text","subTitle","node","selectRoot","selectItems","createSelector","selectDisplayMode","settings","displayMode","selectAll","selectById","pluginsAdapter","findByInstallAndType","filterBy","filterByType","filter","isInstalled","isCore","selectInstalled","type","find","searchBy","fields","push","toLowerCase","orgName","some","f","includes","findByKeyword","filteredPlugins","searchedPlugins","selectPluginErrors","p","Boolean","selectRequest","actionType","requests","selectIsRequestPending","request","RequestStatus","selectRequestError","useGetAllWithFilters","query","sortBy","Sorters","useFetchAll","filtered","useSelector","sortPlugins","useGetSingle","useFetchDetails","useInstall","dispatch","useDispatch","version","isUpdating","install","useUninstall","uninstall","useIsRemotePluginsAvailable","fetchRemotePlugins","fetchAll","useFetchDetailsStatus","fetchDetails","useInstallStatus","isInstalling","useUninstallStatus","isUninstalling","isNotFetched","undefined","useEffect","shouldFetch","details","useDisplayMode","setDisplayMode","v"],"sourceRoot":""}