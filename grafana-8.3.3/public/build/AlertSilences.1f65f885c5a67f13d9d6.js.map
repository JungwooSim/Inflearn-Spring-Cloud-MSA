{"version":3,"file":"AlertSilences.1f65f885c5a67f13d9d6.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useCleanup.ts","webpack://grafana/./public/app/core/hooks/useQueryParams.ts","webpack://grafana/./public/app/features/alerting/unified/components/silences/NoSilencesCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencesFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilenceStateTag.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionButton.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencedAlertsTableRow.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencedAlertsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilenceDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencesTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/MatchersField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencePeriod.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencesEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/Silences.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/DynamicTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/AmAlertStateTag.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/Matchers.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts","webpack://grafana/./public/app/features/alerting/unified/styles/table.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\n\nexport function useCleanup<T>(stateSelector: StateSelector<T>) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(stateSelector);\n  selectorRef.current = stateSelector;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ stateSelector: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","import { UrlQueryMap } from '@grafana/data';\nimport { locationSearchToObject, locationService } from '@grafana/runtime';\nimport { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport function useQueryParams(): [UrlQueryMap, (values: UrlQueryMap, replace?: boolean) => void] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => locationSearchToObject(search || ''), [search]);\n  const update = useCallback(\n    (values: UrlQueryMap, replace?: boolean) => setImmediate(() => locationService.partial(values, replace)),\n    []\n  );\n  return [queryParams, update];\n}\n","import { CallToActionCard } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport React, { FC } from 'react';\nimport { makeAMLink } from '../../utils/misc';\n\ntype Props = {\n  alertManagerSourceName: string;\n};\n\nexport const NoSilencesSplash: FC<Props> = ({ alertManagerSourceName }) => {\n  if (contextSrv.isEditor) {\n    return (\n      <EmptyListCTA\n        title=\"You haven't created any silences yet\"\n        buttonIcon=\"bell-slash\"\n        buttonLink={makeAMLink('alerting/silence/new', alertManagerSourceName)}\n        buttonTitle=\"New silence\"\n      />\n    );\n  }\n  return <CallToActionCard callToActionElement={<div />} message=\"No silences found.\" />;\n};\n","import React, { FormEvent, useState } from 'react';\nimport { css } from '@emotion/css';\nimport { Label, Icon, Input, Tooltip, RadioButtonGroup, useStyles2, Button, Field } from '@grafana/ui';\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { getSilenceFiltersFromUrlParams } from '../../utils/misc';\nimport { SilenceState } from 'app/plugins/datasource/alertmanager/types';\nimport { parseMatchers } from '../../utils/alertmanager';\nimport { debounce } from 'lodash';\n\nconst stateOptions: SelectableValue[] = Object.entries(SilenceState).map(([key, value]) => ({\n  label: key,\n  value,\n}));\n\nexport const SilencesFilter = () => {\n  const [queryStringKey, setQueryStringKey] = useState(`queryString-${Math.random() * 100}`);\n  const [queryParams, setQueryParams] = useQueryParams();\n  const { queryString, silenceState } = getSilenceFiltersFromUrlParams(queryParams);\n  const styles = useStyles2(getStyles);\n\n  const handleQueryStringChange = debounce((e: FormEvent<HTMLInputElement>) => {\n    const target = e.target as HTMLInputElement;\n    setQueryParams({ queryString: target.value || null });\n  }, 400);\n\n  const handleSilenceStateChange = (state: string) => {\n    setQueryParams({ silenceState: state });\n  };\n\n  const clearFilters = () => {\n    setQueryParams({\n      queryString: null,\n      silenceState: null,\n    });\n    setTimeout(() => setQueryStringKey(''));\n  };\n\n  const inputInvalid = queryString && queryString.length > 3 ? parseMatchers(queryString).length === 0 : false;\n\n  return (\n    <div className={styles.flexRow}>\n      <Field\n        className={styles.rowChild}\n        label={\n          <span className={styles.fieldLabel}>\n            <Tooltip\n              content={\n                <div>\n                  Filter silences by matchers using a comma separated list of matchers, ie:\n                  <pre>{`severity=critical, instance=~cluster-us-.+`}</pre>\n                </div>\n              }\n            >\n              <Icon name=\"info-circle\" />\n            </Tooltip>{' '}\n            Search by matchers\n          </span>\n        }\n        invalid={inputInvalid}\n        error={inputInvalid ? 'Query must use valid matcher syntax' : null}\n      >\n        <Input\n          key={queryStringKey}\n          className={styles.searchInput}\n          prefix={<Icon name=\"search\" />}\n          onChange={handleQueryStringChange}\n          defaultValue={queryString ?? ''}\n          placeholder=\"Search\"\n          data-testid=\"search-query-input\"\n        />\n      </Field>\n\n      <div className={styles.rowChild}>\n        <Label>State</Label>\n        <RadioButtonGroup options={stateOptions} value={silenceState} onChange={handleSilenceStateChange} />\n      </div>\n      {(queryString || silenceState) && (\n        <div className={styles.rowChild}>\n          <Button variant=\"secondary\" icon=\"times\" onClick={clearFilters}>\n            Clear filters\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  searchInput: css`\n    width: 360px;\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end;\n    padding-bottom: ${theme.spacing(2)};\n    border-bottom: 1px solid ${theme.colors.border.strong};\n  `,\n  rowChild: css`\n    margin-right: ${theme.spacing(1)};\n    margin-bottom: 0;\n    max-height: 52px;\n  `,\n  fieldLabel: css`\n    font-size: 12px;\n    font-weight: 500;\n  `,\n});\n","import { SilenceState } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC } from 'react';\nimport { State, StateTag } from '../StateTag';\n\nconst silenceStateToState: Record<SilenceState, State> = {\n  [SilenceState.Active]: 'good',\n  [SilenceState.Expired]: 'neutral',\n  [SilenceState.Pending]: 'neutral',\n};\n\ninterface Props {\n  state: SilenceState;\n}\n\nexport const SilenceStateTag: FC<Props> = ({ state }) => (\n  <StateTag state={silenceStateToState[state]}>{state}</StateTag>\n);\n","import { Button, ButtonProps } from '@grafana/ui/src/components/Button';\nimport React, { FC } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\nimport { useStyles } from '@grafana/ui';\n\ntype Props = Omit<ButtonProps, 'variant' | 'size'>;\n\nexport const ActionButton: FC<Props> = ({ className, ...restProps }) => (\n  <Button variant=\"secondary\" size=\"xs\" className={cx(useStyles(getStyle), className)} {...restProps} />\n);\n\nexport const getStyle = (theme: GrafanaTheme) => css`\n  height: 24px;\n  font-size: ${theme.typography.size.sm};\n`;\n","import { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC, useState } from 'react';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { ActionIcon } from '../rules/ActionIcon';\nimport { getAlertTableStyles } from '../../styles/table';\nimport { useStyles2 } from '@grafana/ui';\nimport { intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { AlertLabels } from '../AlertLabels';\nimport { AmAlertStateTag } from './AmAlertStateTag';\n\ninterface Props {\n  alert: AlertmanagerAlert;\n  className?: string;\n}\n\nexport const SilencedAlertsTableRow: FC<Props> = ({ alert, className }) => {\n  const [isCollapsed, setIsCollapsed] = useState(true);\n  const tableStyles = useStyles2(getAlertTableStyles);\n\n  const duration = intervalToAbbreviatedDurationString({\n    start: new Date(alert.startsAt),\n    end: new Date(alert.endsAt),\n  });\n  const alertName = Object.entries(alert.labels).reduce((name, [labelKey, labelValue]) => {\n    if (labelKey === 'alertname' || labelKey === '__alert_rule_title__') {\n      name = labelValue;\n    }\n    return name;\n  }, '');\n  return (\n    <>\n      <tr className={className}>\n        <td>\n          <CollapseToggle isCollapsed={isCollapsed} onToggle={(collapsed) => setIsCollapsed(collapsed)} />\n        </td>\n        <td>\n          <AmAlertStateTag state={alert.status.state} />\n        </td>\n        <td>for {duration} seconds</td>\n        <td>{alertName}</td>\n        <td className={tableStyles.actionsCell}>\n          <ActionIcon icon=\"chart-line\" to={alert.generatorURL} tooltip=\"View in explorer\" />\n        </td>\n      </tr>\n      {!isCollapsed && (\n        <tr className={className}>\n          <td></td>\n          <td colSpan={5}>\n            <AlertLabels labels={alert.labels} />\n          </td>\n        </tr>\n      )}\n    </>\n  );\n};\n","import { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC } from 'react';\nimport { getAlertTableStyles } from '../../styles/table';\nimport { useStyles2 } from '@grafana/ui';\nimport { SilencedAlertsTableRow } from './SilencedAlertsTableRow';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\n\ninterface Props {\n  silencedAlerts: AlertmanagerAlert[];\n}\n\nconst SilencedAlertsTable: FC<Props> = ({ silencedAlerts }) => {\n  const tableStyles = useStyles2(getAlertTableStyles);\n  const styles = useStyles2(getStyles);\n\n  if (!!silencedAlerts.length) {\n    return (\n      <table className={cx(tableStyles.table, styles.tableMargin)}>\n        <colgroup>\n          <col className={tableStyles.colExpand} />\n          <col className={styles.colState} />\n          <col />\n          <col className={styles.colName} />\n          <col />\n        </colgroup>\n        <thead>\n          <tr>\n            <th></th>\n            <th>State</th>\n            <th></th>\n            <th>Alert name</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {silencedAlerts.map((alert, index) => {\n            return (\n              <SilencedAlertsTableRow\n                key={alert.fingerprint}\n                alert={alert}\n                className={index % 2 === 0 ? tableStyles.evenRow : ''}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  } else {\n    return null;\n  }\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableMargin: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  colState: css`\n    width: 110px;\n  `,\n  colName: css`\n    width: 65%;\n  `,\n});\n\nexport default SilencedAlertsTable;\n","import { css } from '@emotion/css';\nimport { dateMath, GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport React from 'react';\nimport { useStyles2 } from '@grafana/ui';\nimport SilencedAlertsTable from './SilencedAlertsTable';\n\nimport { SilenceTableItem } from './SilencesTable';\n\ninterface Props {\n  silence: SilenceTableItem;\n}\n\nexport const SilenceDetails = ({ silence }: Props) => {\n  const { startsAt, endsAt, comment, createdBy, silencedAlerts } = silence;\n  const styles = useStyles2(getStyles);\n\n  const dateDisplayFormat = 'YYYY-MM-DD HH:mm';\n  const startsAtDate = dateMath.parse(startsAt);\n  const endsAtDate = dateMath.parse(endsAt);\n  const duration = intervalToAbbreviatedDurationString({ start: new Date(startsAt), end: new Date(endsAt) });\n  return (\n    <div className={styles.container}>\n      <div className={styles.title}>Comment</div>\n      <div>{comment}</div>\n      <div className={styles.title}>Schedule</div>\n      <div>{`${startsAtDate?.format(dateDisplayFormat)} - ${endsAtDate?.format(dateDisplayFormat)}`}</div>\n      <div className={styles.title}>Duration</div>\n      <div> {duration}</div>\n      <div className={styles.title}>Created by</div>\n      <div> {createdBy}</div>\n      <div className={styles.title}>Affected alerts</div>\n      <SilencedAlertsTable silencedAlerts={silencedAlerts} />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: grid;\n    grid-template-columns: 1fr 9fr;\n    grid-row-gap: 1rem;\n  `,\n  title: css`\n    color: ${theme.colors.text.primary};\n  `,\n  row: css`\n    margin: ${theme.spacing(1, 0)};\n  `,\n});\n","import React, { FC, useMemo } from 'react';\nimport { GrafanaTheme2, dateMath } from '@grafana/data';\nimport { Icon, useStyles2, Link, Button } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { AlertmanagerAlert, Silence, SilenceState } from 'app/plugins/datasource/alertmanager/types';\nimport { NoSilencesSplash } from './NoSilencesCTA';\nimport { getSilenceFiltersFromUrlParams, makeAMLink } from '../../utils/misc';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { SilencesFilter } from './SilencesFilter';\nimport { parseMatchers } from '../../utils/alertmanager';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { SilenceStateTag } from './SilenceStateTag';\nimport { Matchers } from './Matchers';\nimport { ActionButton } from '../rules/ActionButton';\nimport { ActionIcon } from '../rules/ActionIcon';\nimport { useDispatch } from 'react-redux';\nimport { expireSilenceAction } from '../../state/actions';\nimport { SilenceDetails } from './SilenceDetails';\n\nexport interface SilenceTableItem extends Silence {\n  silencedAlerts: AlertmanagerAlert[];\n}\n\ntype SilenceTableColumnProps = DynamicTableColumnProps<SilenceTableItem>;\ntype SilenceTableItemProps = DynamicTableItemProps<SilenceTableItem>;\ninterface Props {\n  silences: Silence[];\n  alertManagerAlerts: AlertmanagerAlert[];\n  alertManagerSourceName: string;\n}\n\nconst SilencesTable: FC<Props> = ({ silences, alertManagerAlerts, alertManagerSourceName }) => {\n  const styles = useStyles2(getStyles);\n  const [queryParams] = useQueryParams();\n  const filteredSilences = useFilteredSilences(silences);\n\n  const { silenceState } = getSilenceFiltersFromUrlParams(queryParams);\n\n  const showExpiredSilencesBanner =\n    !!filteredSilences.length && (silenceState === undefined || silenceState === SilenceState.Expired);\n\n  const columns = useColumns(alertManagerSourceName);\n\n  const items = useMemo((): SilenceTableItemProps[] => {\n    const findSilencedAlerts = (id: string) => {\n      return alertManagerAlerts.filter((alert) => alert.status.silencedBy.includes(id));\n    };\n    return filteredSilences.map((silence) => {\n      const silencedAlerts = findSilencedAlerts(silence.id);\n      return {\n        id: silence.id,\n        data: { ...silence, silencedAlerts },\n      };\n    });\n  }, [filteredSilences, alertManagerAlerts]);\n\n  return (\n    <div data-testid=\"silences-table\">\n      {!!silences.length && (\n        <>\n          <SilencesFilter />\n          {contextSrv.isEditor && (\n            <div className={styles.topButtonContainer}>\n              <Link href={makeAMLink('/alerting/silence/new', alertManagerSourceName)}>\n                <Button className={styles.addNewSilence} icon=\"plus\">\n                  New Silence\n                </Button>\n              </Link>\n            </div>\n          )}\n          {!!items.length ? (\n            <>\n              <DynamicTable\n                items={items}\n                cols={columns}\n                isExpandable\n                renderExpandedContent={({ data }) => <SilenceDetails silence={data} />}\n              />\n              {showExpiredSilencesBanner && (\n                <div className={styles.callout}>\n                  <Icon className={styles.calloutIcon} name=\"info-circle\" />\n                  <span>Expired silences are automatically deleted after 5 days.</span>\n                </div>\n              )}\n            </>\n          ) : (\n            'No matching silences found'\n          )}\n        </>\n      )}\n      {!silences.length && <NoSilencesSplash alertManagerSourceName={alertManagerSourceName} />}\n    </div>\n  );\n};\n\nconst useFilteredSilences = (silences: Silence[]) => {\n  const [queryParams] = useQueryParams();\n  return useMemo(() => {\n    const { queryString, silenceState } = getSilenceFiltersFromUrlParams(queryParams);\n    const silenceIdsString = queryParams?.silenceIds;\n    return silences.filter((silence) => {\n      if (typeof silenceIdsString === 'string') {\n        const idsIncluded = silenceIdsString.split(',').includes(silence.id);\n        if (!idsIncluded) {\n          return false;\n        }\n      }\n      if (queryString) {\n        const matchers = parseMatchers(queryString);\n        const matchersMatch = matchers.every((matcher) =>\n          silence.matchers?.some(\n            ({ name, value, isEqual, isRegex }) =>\n              matcher.name === name &&\n              matcher.value === value &&\n              matcher.isEqual === isEqual &&\n              matcher.isRegex === isRegex\n          )\n        );\n        if (!matchersMatch) {\n          return false;\n        }\n      }\n      if (silenceState) {\n        const stateMatches = silence.status.state === silenceState;\n        if (!stateMatches) {\n          return false;\n        }\n      }\n      return true;\n    });\n  }, [queryParams, silences]);\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  topButtonContainer: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-end;\n  `,\n  addNewSilence: css`\n    margin: ${theme.spacing(2, 0)};\n  `,\n  callout: css`\n    background-color: ${theme.colors.background.secondary};\n    border-top: 3px solid ${theme.colors.info.border};\n    border-radius: 2px;\n    height: 62px;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-top: ${theme.spacing(2)};\n\n    & > * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  calloutIcon: css`\n    color: ${theme.colors.info.text};\n  `,\n  editButton: css`\n    margin-left: ${theme.spacing(0.5)};\n  `,\n});\n\nfunction useColumns(alertManagerSourceName: string) {\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n  return useMemo((): SilenceTableColumnProps[] => {\n    const handleExpireSilenceClick = (id: string) => {\n      dispatch(expireSilenceAction(alertManagerSourceName, id));\n    };\n    const showActions = contextSrv.isEditor;\n    const columns: SilenceTableColumnProps[] = [\n      {\n        id: 'state',\n        label: 'State',\n        renderCell: function renderStateTag({ data: { status } }) {\n          return <SilenceStateTag state={status.state} />;\n        },\n        size: '88px',\n      },\n      {\n        id: 'matchers',\n        label: 'Matching labels',\n        renderCell: function renderMatchers({ data: { matchers } }) {\n          return <Matchers matchers={matchers || []} />;\n        },\n        size: 9,\n      },\n      {\n        id: 'alerts',\n        label: 'Alerts',\n        renderCell: function renderSilencedAlerts({ data: { silencedAlerts } }) {\n          return <span data-testid=\"alerts\">{silencedAlerts.length}</span>;\n        },\n        size: 1,\n      },\n      {\n        id: 'schedule',\n        label: 'Schedule',\n        renderCell: function renderSchedule({ data: { startsAt, endsAt } }) {\n          const startsAtDate = dateMath.parse(startsAt);\n          const endsAtDate = dateMath.parse(endsAt);\n          const dateDisplayFormat = 'YYYY-MM-DD HH:mm';\n          return (\n            <>\n              {' '}\n              {startsAtDate?.format(dateDisplayFormat)} {'-'}\n              <br />\n              {endsAtDate?.format(dateDisplayFormat)}\n            </>\n          );\n        },\n        size: '150px',\n      },\n    ];\n    if (showActions) {\n      columns.push({\n        id: 'actions',\n        label: 'Actions',\n        renderCell: function renderActions({ data: silence }) {\n          return (\n            <>\n              {silence.status.state === 'expired' ? (\n                <Link href={makeAMLink(`/alerting/silence/${silence.id}/edit`, alertManagerSourceName)}>\n                  <ActionButton icon=\"sync\">Recreate</ActionButton>\n                </Link>\n              ) : (\n                <ActionButton icon=\"bell\" onClick={() => handleExpireSilenceClick(silence.id)}>\n                  Unsilence\n                </ActionButton>\n              )}\n              {silence.status.state !== 'expired' && (\n                <ActionIcon\n                  className={styles.editButton}\n                  to={makeAMLink(`/alerting/silence/${silence.id}/edit`, alertManagerSourceName)}\n                  icon=\"pen\"\n                  tooltip=\"edit\"\n                />\n              )}\n            </>\n          );\n        },\n        size: '140px',\n      });\n    }\n    return columns;\n  }, [alertManagerSourceName, dispatch, styles]);\n}\n\nexport default SilencesTable;\n","import React, { FC } from 'react';\nimport { Button, Field, Input, IconButton, InputControl, useStyles2, Select } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { useFormContext, useFieldArray } from 'react-hook-form';\nimport { SilenceFormFields } from '../../types/silence-form';\nimport { MatcherOperator } from 'app/plugins/datasource/alertmanager/types';\nimport { matcherFieldOptions } from '../../utils/alertmanager';\n\ninterface Props {\n  className?: string;\n}\n\nconst MatchersField: FC<Props> = ({ className }) => {\n  const styles = useStyles2(getStyles);\n  const formApi = useFormContext<SilenceFormFields>();\n  const {\n    control,\n    register,\n    formState: { errors },\n  } = formApi;\n\n  const { fields: matchers = [], append, remove } = useFieldArray<SilenceFormFields>({ name: 'matchers' });\n\n  return (\n    <div className={cx(className, styles.wrapper)}>\n      <Field label=\"Matching labels\" required>\n        <div>\n          <div className={styles.matchers}>\n            {matchers.map((matcher, index) => {\n              return (\n                <div className={styles.row} key={`${matcher.id}`} data-testid=\"matcher\">\n                  <Field\n                    label=\"Label\"\n                    invalid={!!errors?.matchers?.[index]?.name}\n                    error={errors?.matchers?.[index]?.name?.message}\n                  >\n                    <Input\n                      {...register(`matchers.${index}.name` as const, {\n                        required: { value: true, message: 'Required.' },\n                      })}\n                      defaultValue={matcher.name}\n                      placeholder=\"label\"\n                    />\n                  </Field>\n                  <Field label={'Operator'}>\n                    <InputControl\n                      control={control}\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          {...field}\n                          menuShouldPortal\n                          onChange={(value) => onChange(value.value)}\n                          className={styles.matcherOptions}\n                          options={matcherFieldOptions}\n                          aria-label=\"operator\"\n                        />\n                      )}\n                      defaultValue={matcher.operator || matcherFieldOptions[0].value}\n                      name={`matchers.${index}.operator` as const}\n                      rules={{ required: { value: true, message: 'Required.' } }}\n                    />\n                  </Field>\n                  <Field\n                    label=\"Value\"\n                    invalid={!!errors?.matchers?.[index]?.value}\n                    error={errors?.matchers?.[index]?.value?.message}\n                  >\n                    <Input\n                      {...register(`matchers.${index}.value` as const, {\n                        required: { value: true, message: 'Required.' },\n                      })}\n                      defaultValue={matcher.value}\n                      placeholder=\"value\"\n                    />\n                  </Field>\n                  {matchers.length > 1 && (\n                    <IconButton\n                      className={styles.removeButton}\n                      tooltip=\"Remove matcher\"\n                      name={'trash-alt'}\n                      onClick={() => remove(index)}\n                    >\n                      Remove\n                    </IconButton>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n          <Button\n            type=\"button\"\n            icon=\"plus\"\n            variant=\"secondary\"\n            onClick={() => {\n              const newMatcher = { name: '', value: '', operator: MatcherOperator.equal };\n              append(newMatcher);\n            }}\n          >\n            Add matcher\n          </Button>\n        </div>\n      </Field>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      margin-top: ${theme.spacing(2)};\n    `,\n    row: css`\n      display: flex;\n      align-items: flex-start;\n      flex-direction: row;\n      background-color: ${theme.colors.background.secondary};\n      padding: ${theme.spacing(1)} ${theme.spacing(1)} 0 ${theme.spacing(1)};\n      & > * + * {\n        margin-left: ${theme.spacing(2)};\n      }\n    `,\n    removeButton: css`\n      margin-left: ${theme.spacing(1)};\n      margin-top: ${theme.spacing(2.5)};\n    `,\n    matcherOptions: css`\n      min-width: 140px;\n    `,\n    matchers: css`\n      max-width: 585px;\n      margin: ${theme.spacing(1)} 0;\n      padding-top: ${theme.spacing(0.5)};\n    `,\n  };\n};\n\nexport default MatchersField;\n","import { css } from '@emotion/css';\nimport { dateTime, GrafanaTheme } from '@grafana/data';\nimport { Field, TimeRangeInput, useStyles } from '@grafana/ui';\nimport React from 'react';\nimport { useController, useFormContext } from 'react-hook-form';\nimport { SilenceFormFields } from '../../types/silence-form';\n\nexport const SilencePeriod = () => {\n  const { control, getValues } = useFormContext<SilenceFormFields>();\n  const styles = useStyles(getStyles);\n  const {\n    field: { onChange: onChangeStartsAt, value: startsAt },\n    fieldState: { invalid: startsAtInvalid },\n  } = useController({\n    name: 'startsAt',\n    control,\n    rules: {\n      validate: (value) => getValues().endsAt > value,\n    },\n  });\n\n  const {\n    field: { onChange: onChangeEndsAt, value: endsAt },\n    fieldState: { invalid: endsAtInvalid },\n  } = useController({\n    name: 'endsAt',\n    control,\n    rules: {\n      validate: (value) => getValues().startsAt < value,\n    },\n  });\n\n  const {\n    field: { onChange: onChangeTimeZone, value: timeZone },\n  } = useController({\n    name: 'timeZone',\n    control,\n  });\n\n  const invalid = startsAtInvalid || endsAtInvalid;\n\n  const from = dateTime(startsAt);\n  const to = dateTime(endsAt);\n\n  return (\n    <Field\n      className={styles.timeRange}\n      label=\"Silence start and end\"\n      error={invalid ? 'To is before or the same as from' : ''}\n      invalid={invalid}\n    >\n      <TimeRangeInput\n        value={{\n          from,\n          to,\n          raw: {\n            from,\n            to,\n          },\n        }}\n        timeZone={timeZone}\n        onChange={(newValue) => {\n          onChangeStartsAt(dateTime(newValue.from));\n          onChangeEndsAt(dateTime(newValue.to));\n        }}\n        onChangeTimeZone={(newValue) => onChangeTimeZone(newValue)}\n        hideTimeZone={false}\n        hideQuickRanges={true}\n        placeholder={'Select time range'}\n      />\n    </Field>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  timeRange: css`\n    width: 400px;\n  `,\n});\n","import { MatcherOperator, Silence, SilenceCreatePayload } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC, useMemo, useState } from 'react';\nimport { Button, Field, FieldSet, Input, LinkButton, TextArea, useStyles2 } from '@grafana/ui';\nimport {\n  DefaultTimeZone,\n  parseDuration,\n  intervalToAbbreviatedDurationString,\n  addDurationToDate,\n  dateTime,\n  isValidDate,\n  UrlQueryMap,\n  GrafanaTheme2,\n} from '@grafana/data';\nimport { useDebounce } from 'react-use';\nimport { config } from '@grafana/runtime';\nimport { pickBy } from 'lodash';\nimport MatchersField from './MatchersField';\nimport { useForm, FormProvider } from 'react-hook-form';\nimport { SilenceFormFields } from '../../types/silence-form';\nimport { useDispatch } from 'react-redux';\nimport { createOrUpdateSilenceAction } from '../../state/actions';\nimport { SilencePeriod } from './SilencePeriod';\nimport { css, cx } from '@emotion/css';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { makeAMLink } from '../../utils/misc';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { parseQueryParamMatchers } from '../../utils/matchers';\nimport { matcherToMatcherField, matcherFieldToMatcher } from '../../utils/alertmanager';\n\ninterface Props {\n  silence?: Silence;\n  alertManagerSourceName: string;\n}\n\nconst defaultsFromQuery = (queryParams: UrlQueryMap): Partial<SilenceFormFields> => {\n  const defaults: Partial<SilenceFormFields> = {};\n\n  const { matchers, comment } = queryParams;\n\n  if (typeof matchers === 'string') {\n    const formMatchers = parseQueryParamMatchers(matchers);\n    if (formMatchers.length) {\n      defaults.matchers = formMatchers.map(matcherToMatcherField);\n    }\n  }\n\n  if (typeof comment === 'string') {\n    defaults.comment = comment;\n  }\n\n  return defaults;\n};\n\nconst getDefaultFormValues = (queryParams: UrlQueryMap, silence?: Silence): SilenceFormFields => {\n  const now = new Date();\n  if (silence) {\n    const isExpired = Date.parse(silence.endsAt) < Date.now();\n    const interval = isExpired\n      ? {\n          start: now,\n          end: addDurationToDate(now, { hours: 2 }),\n        }\n      : { start: new Date(silence.startsAt), end: new Date(silence.endsAt) };\n    return {\n      id: silence.id,\n      startsAt: interval.start.toISOString(),\n      endsAt: interval.end.toISOString(),\n      comment: silence.comment,\n      createdBy: silence.createdBy,\n      duration: intervalToAbbreviatedDurationString(interval),\n      isRegex: false,\n      matchers: silence.matchers?.map(matcherToMatcherField) || [],\n      matcherName: '',\n      matcherValue: '',\n      timeZone: DefaultTimeZone,\n    };\n  } else {\n    const endsAt = addDurationToDate(now, { hours: 2 }); // Default time period is now + 2h\n    return {\n      id: '',\n      startsAt: now.toISOString(),\n      endsAt: endsAt.toISOString(),\n      comment: '',\n      createdBy: config.bootData.user.name,\n      duration: '2h',\n      isRegex: false,\n      matchers: [{ name: '', value: '', operator: MatcherOperator.equal }],\n      matcherName: '',\n      matcherValue: '',\n      timeZone: DefaultTimeZone,\n      ...defaultsFromQuery(queryParams),\n    };\n  }\n};\n\nexport const SilencesEditor: FC<Props> = ({ silence, alertManagerSourceName }) => {\n  const [queryParams] = useQueryParams();\n  const defaultValues = useMemo(() => getDefaultFormValues(queryParams, silence), [silence, queryParams]);\n  const formAPI = useForm({ defaultValues });\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n\n  const { loading } = useUnifiedAlertingSelector((state) => state.updateSilence);\n\n  useCleanup((state) => state.unifiedAlerting.updateSilence);\n\n  const { register, handleSubmit, formState, watch, setValue, clearErrors } = formAPI;\n\n  const onSubmit = (data: SilenceFormFields) => {\n    const { id, startsAt, endsAt, comment, createdBy, matchers: matchersFields } = data;\n    const matchers = matchersFields.map(matcherFieldToMatcher);\n    const payload = pickBy(\n      {\n        id,\n        startsAt,\n        endsAt,\n        comment,\n        createdBy,\n        matchers,\n      },\n      (value) => !!value\n    ) as SilenceCreatePayload;\n    dispatch(\n      createOrUpdateSilenceAction({\n        alertManagerSourceName,\n        payload,\n        exitOnSave: true,\n        successMessage: `Silence ${payload.id ? 'updated' : 'created'}`,\n      })\n    );\n  };\n\n  const duration = watch('duration');\n  const startsAt = watch('startsAt');\n  const endsAt = watch('endsAt');\n\n  // Keep duration and endsAt in sync\n  const [prevDuration, setPrevDuration] = useState(duration);\n  useDebounce(\n    () => {\n      if (isValidDate(startsAt) && isValidDate(endsAt)) {\n        if (duration !== prevDuration) {\n          setValue('endsAt', dateTime(addDurationToDate(new Date(startsAt), parseDuration(duration))).toISOString());\n          setPrevDuration(duration);\n        } else {\n          const startValue = new Date(startsAt).valueOf();\n          const endValue = new Date(endsAt).valueOf();\n          if (endValue > startValue) {\n            const nextDuration = intervalToAbbreviatedDurationString({\n              start: new Date(startsAt),\n              end: new Date(endsAt),\n            });\n            setValue('duration', nextDuration);\n            setPrevDuration(nextDuration);\n          }\n        }\n      }\n    },\n    700,\n    [clearErrors, duration, endsAt, prevDuration, setValue, startsAt]\n  );\n\n  return (\n    <FormProvider {...formAPI}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <FieldSet label={`${silence ? 'Recreate silence' : 'Create silence'}`}>\n          <div className={styles.flexRow}>\n            <SilencePeriod />\n            <Field\n              label=\"Duration\"\n              invalid={!!formState.errors.duration}\n              error={\n                formState.errors.duration &&\n                (formState.errors.duration.type === 'required' ? 'Required field' : formState.errors.duration.message)\n              }\n            >\n              <Input\n                className={styles.createdBy}\n                {...register('duration', {\n                  validate: (value) =>\n                    Object.keys(parseDuration(value)).length === 0\n                      ? 'Invalid duration. Valid example: 1d 4h (Available units: y, M, w, d, h, m, s)'\n                      : undefined,\n                })}\n                id=\"duration\"\n              />\n            </Field>\n          </div>\n\n          <MatchersField />\n          <Field\n            className={cx(styles.field, styles.textArea)}\n            label=\"Comment\"\n            required\n            error={formState.errors.comment?.message}\n            invalid={!!formState.errors.comment}\n          >\n            <TextArea\n              {...register('comment', { required: { value: true, message: 'Required.' } })}\n              placeholder=\"Details about the silence\"\n            />\n          </Field>\n          <Field\n            className={cx(styles.field, styles.createdBy)}\n            label=\"Created by\"\n            required\n            error={formState.errors.createdBy?.message}\n            invalid={!!formState.errors.createdBy}\n          >\n            <Input {...register('createdBy', { required: { value: true, message: 'Required.' } })} placeholder=\"User\" />\n          </Field>\n        </FieldSet>\n        <div className={styles.flexRow}>\n          {loading && (\n            <Button disabled={true} icon=\"fa fa-spinner\" variant=\"primary\">\n              Saving...\n            </Button>\n          )}\n          {!loading && <Button type=\"submit\">Submit</Button>}\n          <LinkButton\n            href={makeAMLink('alerting/silences', alertManagerSourceName)}\n            variant={'secondary'}\n            fill=\"outline\"\n          >\n            Cancel\n          </LinkButton>\n        </div>\n      </form>\n    </FormProvider>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css`\n    margin: ${theme.spacing(1, 0)};\n  `,\n  textArea: css`\n    width: 600px;\n  `,\n  createdBy: css`\n    width: 200px;\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n\n    & > * {\n      margin-right: ${theme.spacing(1)};\n    }\n  `,\n});\n\nexport default SilencesEditor;\n","import React, { FC, useEffect, useCallback } from 'react';\nimport { Alert, LoadingPlaceholder, withErrorBoundary } from '@grafana/ui';\n\nimport { useDispatch } from 'react-redux';\nimport { Redirect, Route, RouteChildrenProps, Switch, useLocation } from 'react-router-dom';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport SilencesTable from './components/silences/SilencesTable';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAmAlertsAction, fetchSilencesAction } from './state/actions';\nimport { SILENCES_POLL_INTERVAL_MS } from './utils/constants';\nimport { AsyncRequestState, initialAsyncRequestState } from './utils/redux';\nimport SilencesEditor from './components/silences/SilencesEditor';\nimport { AlertManagerPicker } from './components/AlertManagerPicker';\nimport { Silence } from 'app/plugins/datasource/alertmanager/types';\n\nconst Silences: FC = () => {\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName();\n  const dispatch = useDispatch();\n  const silences = useUnifiedAlertingSelector((state) => state.silences);\n  const alertsRequests = useUnifiedAlertingSelector((state) => state.amAlerts);\n  const alertsRequest = alertManagerSourceName\n    ? alertsRequests[alertManagerSourceName] || initialAsyncRequestState\n    : undefined;\n\n  const location = useLocation();\n  const isRoot = location.pathname.endsWith('/alerting/silences');\n\n  useEffect(() => {\n    function fetchAll() {\n      if (alertManagerSourceName) {\n        dispatch(fetchSilencesAction(alertManagerSourceName));\n        dispatch(fetchAmAlertsAction(alertManagerSourceName));\n      }\n    }\n    fetchAll();\n    const interval = setInterval(() => fetchAll, SILENCES_POLL_INTERVAL_MS);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [alertManagerSourceName, dispatch]);\n\n  const { result, loading, error }: AsyncRequestState<Silence[]> =\n    (alertManagerSourceName && silences[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const getSilenceById = useCallback((id: string) => result && result.find((silence) => silence.id === id), [result]);\n\n  if (!alertManagerSourceName) {\n    return <Redirect to=\"/alerting/silences\" />;\n  }\n\n  return (\n    <AlertingPageWrapper pageId=\"silences\">\n      <AlertManagerPicker disabled={!isRoot} current={alertManagerSourceName} onChange={setAlertManagerSourceName} />\n      {error && !loading && (\n        <Alert severity=\"error\" title=\"Error loading silences\">\n          {error.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {alertsRequest?.error && !alertsRequest?.loading && (\n        <Alert severity=\"error\" title=\"Error loading Alertmanager alerts\">\n          {alertsRequest.error?.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {loading && <LoadingPlaceholder text=\"loading silences...\" />}\n      {result && !error && (\n        <Switch>\n          <Route exact path=\"/alerting/silences\">\n            <SilencesTable\n              silences={result}\n              alertManagerAlerts={alertsRequest?.result ?? []}\n              alertManagerSourceName={alertManagerSourceName}\n            />\n          </Route>\n          <Route exact path=\"/alerting/silence/new\">\n            <SilencesEditor alertManagerSourceName={alertManagerSourceName} />\n          </Route>\n          <Route exact path=\"/alerting/silence/:id/edit\">\n            {({ match }: RouteChildrenProps<{ id: string }>) => {\n              return (\n                match?.params.id && (\n                  <SilencesEditor\n                    silence={getSilenceById(match.params.id)}\n                    alertManagerSourceName={alertManagerSourceName}\n                  />\n                )\n              );\n            }}\n          </Route>\n        </Switch>\n      )}\n    </AlertingPageWrapper>\n  );\n};\n\nexport default withErrorBoundary(Silences, { style: 'page' });\n","import React, { FC } from 'react';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper: FC<Props> = ({ children, pageId, isLoading }) => {\n  const navModel = getNavModel(\n    useSelector((state: StoreState) => state.navIndex),\n    pageId\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import React, { ReactNode, useState } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconButton, useStyles2 } from '@grafana/ui';\n\nexport interface DynamicTableColumnProps<T = unknown> {\n  id: string | number;\n  label: string;\n\n  renderCell: (item: DynamicTableItemProps<T>, index: number) => ReactNode;\n  size?: number | string;\n}\n\nexport interface DynamicTableItemProps<T = unknown> {\n  id: string | number;\n  data: T;\n  renderExpandedContent?: () => ReactNode;\n}\n\nexport interface DynamicTableProps<T = unknown> {\n  cols: Array<DynamicTableColumnProps<T>>;\n  items: Array<DynamicTableItemProps<T>>;\n\n  isExpandable?: boolean;\n\n  // provide these to manually control expanded status\n  onCollapse?: (item: DynamicTableItemProps<T>) => void;\n  onExpand?: (item: DynamicTableItemProps<T>) => void;\n  isExpanded?: (item: DynamicTableItemProps<T>) => boolean;\n\n  renderExpandedContent?: (\n    item: DynamicTableItemProps<T>,\n    index: number,\n    items: Array<DynamicTableItemProps<T>>\n  ) => ReactNode;\n  testIdGenerator?: (item: DynamicTableItemProps<T>, index: number) => string;\n  renderPrefixHeader?: () => ReactNode;\n  renderPrefixCell?: (\n    item: DynamicTableItemProps<T>,\n    index: number,\n    items: Array<DynamicTableItemProps<T>>\n  ) => ReactNode;\n}\n\nexport const DynamicTable = <T extends object>({\n  cols,\n  items,\n  isExpandable = false,\n  onCollapse,\n  onExpand,\n  isExpanded,\n  renderExpandedContent,\n  testIdGenerator,\n\n  // render a cell BEFORE expand icon for header/ each row.\n  // currently use by RuleList to render guidelines\n  renderPrefixCell,\n  renderPrefixHeader,\n}: DynamicTableProps<T>) => {\n  if ((onCollapse || onExpand || isExpanded) && !(onCollapse && onExpand && isExpanded)) {\n    throw new Error('either all of onCollapse, onExpand, isExpanded must be provided, or none');\n  }\n  if ((isExpandable || renderExpandedContent) && !(isExpandable && renderExpandedContent)) {\n    throw new Error('either both isExpanded and renderExpandedContent must be provided, or neither');\n  }\n  const styles = useStyles2(getStyles(cols, isExpandable, !!renderPrefixHeader));\n\n  const [expandedIds, setExpandedIds] = useState<Array<DynamicTableItemProps['id']>>([]);\n\n  const toggleExpanded = (item: DynamicTableItemProps<T>) => {\n    if (isExpanded && onCollapse && onExpand) {\n      isExpanded(item) ? onCollapse(item) : onExpand(item);\n    } else {\n      setExpandedIds(\n        expandedIds.includes(item.id) ? expandedIds.filter((itemId) => itemId !== item.id) : [...expandedIds, item.id]\n      );\n    }\n  };\n  return (\n    <div className={styles.container} data-testid=\"dynamic-table\">\n      <div className={styles.row} data-testid=\"header\">\n        {renderPrefixHeader && renderPrefixHeader()}\n        {isExpandable && <div className={styles.cell} />}\n        {cols.map((col) => (\n          <div className={styles.cell} key={col.id}>\n            {col.label}\n          </div>\n        ))}\n      </div>\n\n      {items.map((item, index) => {\n        const isItemExpanded = isExpanded ? isExpanded(item) : expandedIds.includes(item.id);\n        return (\n          <div className={styles.row} key={item.id} data-testid={testIdGenerator?.(item, index) ?? 'row'}>\n            {renderPrefixCell && renderPrefixCell(item, index, items)}\n            {isExpandable && (\n              <div className={cx(styles.cell, styles.expandCell)}>\n                <IconButton\n                  aria-label={`${isItemExpanded ? 'Collapse' : 'Expand'} row`}\n                  size=\"xl\"\n                  data-testid=\"collapse-toggle\"\n                  className={styles.expandButton}\n                  name={isItemExpanded ? 'angle-down' : 'angle-right'}\n                  onClick={() => toggleExpanded(item)}\n                  type=\"button\"\n                />\n              </div>\n            )}\n            {cols.map((col) => (\n              <div className={cx(styles.cell, styles.bodyCell)} data-column={col.label} key={`${item.id}-${col.id}`}>\n                {col.renderCell(item, index)}\n              </div>\n            ))}\n            {isItemExpanded && renderExpandedContent && (\n              <div className={styles.expandedContentRow} data-testid=\"expanded-content\">\n                {renderExpandedContent(item, index, items)}\n              </div>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nconst getStyles = <T extends unknown>(\n  cols: Array<DynamicTableColumnProps<T>>,\n  isExpandable: boolean,\n  hasPrefixCell: boolean\n) => {\n  const sizes = cols.map((col) => {\n    if (!col.size) {\n      return 'auto';\n    }\n\n    if (typeof col.size === 'number') {\n      return `${col.size}fr`;\n    }\n\n    return col.size;\n  });\n\n  if (isExpandable) {\n    sizes.unshift('calc(1em + 16px)');\n  }\n\n  if (hasPrefixCell) {\n    sizes.unshift('0');\n  }\n\n  return (theme: GrafanaTheme2) => ({\n    container: css`\n      border: 1px solid ${theme.colors.border.strong};\n      border-radius: 2px;\n      color: ${theme.colors.text.secondary};\n    `,\n    row: css`\n      display: grid;\n      grid-template-columns: ${sizes.join(' ')};\n      grid-template-rows: 1fr auto;\n\n      &:nth-child(2n + 1) {\n        background-color: ${theme.colors.background.secondary};\n      }\n\n      &:nth-child(2n) {\n        background-color: ${theme.colors.background.primary};\n      }\n\n      ${theme.breakpoints.down('sm')} {\n        grid-template-columns: auto 1fr;\n        grid-template-areas: 'left right';\n        padding: 0 ${theme.spacing(0.5)};\n\n        &:first-child {\n          display: none;\n        }\n\n        ${hasPrefixCell\n          ? `\n            & > *:first-child {\n              display: none;\n            }\n          `\n          : ''}\n      }\n    `,\n    cell: css`\n      align-items: center;\n      padding: ${theme.spacing(1)};\n\n      ${theme.breakpoints.down('sm')} {\n        padding: ${theme.spacing(1)} 0;\n        grid-template-columns: 1fr;\n      }\n    `,\n    bodyCell: css`\n      overflow: hidden;\n      word-break: break-all;\n      ${theme.breakpoints.down('sm')} {\n        grid-column-end: right;\n        grid-column-start: right;\n\n        &::before {\n          content: attr(data-column);\n          display: block;\n          color: ${theme.colors.text.primary};\n        }\n      }\n    `,\n    expandCell: css`\n      justify-content: center;\n\n      ${theme.breakpoints.down('sm')} {\n        align-items: start;\n        grid-area: left;\n      }\n    `,\n    expandedContentRow: css`\n      grid-column-end: ${sizes.length + 1};\n      grid-column-start: ${hasPrefixCell ? 3 : 2};\n      grid-row: 2;\n      padding: 0 ${theme.spacing(3)} 0 ${theme.spacing(1)};\n      position: relative;\n\n      ${theme.breakpoints.down('sm')} {\n        grid-column-start: 2;\n        border-top: 1px solid ${theme.colors.border.strong};\n        grid-row: auto;\n        padding: ${theme.spacing(1)} 0 0 0;\n      }\n    `,\n    expandButton: css`\n      margin-right: 0;\n      display: block;\n    `,\n  });\n};\n","import { Icon, IconName, useStyles, Tooltip } from '@grafana/ui';\nimport { PopoverContent } from '@grafana/ui/src/components/Tooltip/Tooltip';\nimport { TooltipPlacement } from '@grafana/ui/src/components/Tooltip/PopoverController';\nimport React, { FC } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { Link } from 'react-router-dom';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon: FC<Props> = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}) => {\n  const iconEl = (\n    <Icon role=\"button\" className={cx(useStyles(getStyle), className)} onClick={onClick} name={icon} {...rest} />\n  );\n\n  const ariaLabel = typeof tooltip === 'string' ? tooltip : undefined;\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {(() => {\n        if (to) {\n          return (\n            <Link aria-label={ariaLabel} to={to} target={target}>\n              {iconEl}\n            </Link>\n          );\n        }\n        return iconEl;\n      })()}\n    </Tooltip>\n  );\n};\n\nexport const getStyle = () => css`\n  cursor: pointer;\n`;\n","import { AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC } from 'react';\nimport { State, StateTag } from '../StateTag';\n\nconst alertStateToState: Record<AlertState, State> = {\n  [AlertState.Active]: 'bad',\n  [AlertState.Unprocessed]: 'neutral',\n  [AlertState.Suppressed]: 'info',\n};\n\ninterface Props {\n  state: AlertState;\n}\n\nexport const AmAlertStateTag: FC<Props> = ({ state }) => <StateTag state={alertStateToState[state]}>{state}</StateTag>;\n","import React, { useCallback } from 'react';\nimport { GrafanaTheme } from '@grafana/data';\nimport { useStyles } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { Matcher } from 'app/plugins/datasource/alertmanager/types';\nimport { AlertLabel } from '../AlertLabel';\nimport { matcherToOperator } from '../../utils/alertmanager';\n\ntype MatchersProps = { matchers: Matcher[]; onRemoveLabel?(index: number): void };\n\nexport const Matchers = ({ matchers, onRemoveLabel }: MatchersProps) => {\n  const styles = useStyles(getStyles);\n\n  const removeLabel = useCallback(\n    (index: number) => {\n      if (!!onRemoveLabel) {\n        onRemoveLabel(index);\n      }\n    },\n    [onRemoveLabel]\n  );\n\n  return (\n    <div className={styles.wrapper}>\n      {matchers.map((matcher, index) => {\n        const { name, value } = matcher;\n        return (\n          <AlertLabel\n            key={`${name}-${value}-${index}`}\n            labelKey={name}\n            value={value}\n            operator={matcherToOperator(matcher)}\n            onRemoveLabel={!!onRemoveLabel ? () => removeLabel(index) : undefined}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  wrapper: css`\n    & > * {\n      margin-top: ${theme.spacing.xs};\n      margin-right: ${theme.spacing.xs};\n    }\n    padding-bottom: ${theme.spacing.xs};\n  `,\n});\n","import { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\nimport { useCallback } from 'react';\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { getAlertManagerDataSources, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction isAlertManagerSource(alertManagerSourceName: string): boolean {\n  return (\n    alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME ||\n    !!getAlertManagerDataSources().find((ds) => ds.name === alertManagerSourceName)\n  );\n}\n\n/* this will return am name either from query params or from local storage or a default (grafana).\n *\n * fallbackUrl - if provided, will redirect to this url if alertmanager provided in query no longer\n */\nexport function useAlertManagerSourceName(): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerSource(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerSource(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerSource(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  return [GRAFANA_RULES_SOURCE_NAME, update];\n}\n","import { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\n\nexport const getAlertTableStyles = (theme: GrafanaTheme2) => ({\n  table: css`\n    width: 100%;\n    border-radius: ${theme.shape.borderRadius()};\n    border: solid 1px ${theme.colors.border.weak};\n    background-color: ${theme.colors.background.secondary};\n\n    th {\n      padding: ${theme.spacing(1)};\n    }\n\n    td {\n      padding: 0 ${theme.spacing(1)};\n    }\n\n    tr {\n      height: 38px;\n    }\n  `,\n  evenRow: css`\n    background-color: ${theme.colors.background.primary};\n  `,\n  colExpand: css`\n    width: 36px;\n  `,\n  actionsCell: css`\n    text-align: right;\n    width: 1%;\n    white-space: nowrap;\n\n    & > * + * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n});\n"],"names":["useCleanup","stateSelector","dispatch","useDispatch","selectorRef","useRef","current","useEffect","cleanUpAction","useQueryParams","search","useLocation","useMemo","locationSearchToObject","useCallback","values","replace","setImmediate","locationService","NoSilencesSplash","alertManagerSourceName","contextSrv","EmptyListCTA","title","buttonIcon","buttonLink","makeAMLink","buttonTitle","CallToActionCard","callToActionElement","message","stateOptions","Object","entries","SilenceState","map","key","value","label","SilencesFilter","queryStringKey","setQueryStringKey","useState","Math","random","queryParams","setQueryParams","queryString","silenceState","getSilenceFiltersFromUrlParams","styles","useStyles2","getStyles","handleQueryStringChange","debounce","e","target","inputInvalid","length","parseMatchers","className","flexRow","Field","rowChild","fieldLabel","Tooltip","content","Icon","name","invalid","error","Input","searchInput","prefix","onChange","defaultValue","placeholder","Label","RadioButtonGroup","options","state","Button","variant","icon","onClick","setTimeout","theme","css","spacing","colors","border","strong","silenceStateToState","SilenceStateTag","StateTag","ActionButton","restProps","size","cx","useStyles","getStyle","typography","sm","SilencedAlertsTableRow","alert","isCollapsed","setIsCollapsed","tableStyles","getAlertTableStyles","duration","intervalToAbbreviatedDurationString","start","Date","startsAt","end","endsAt","alertName","labels","reduce","labelKey","labelValue","CollapseToggle","onToggle","collapsed","AmAlertStateTag","status","actionsCell","ActionIcon","A","to","generatorURL","tooltip","colSpan","AlertLabels","tableMargin","colState","colName","silencedAlerts","table","colExpand","index","evenRow","fingerprint","SilenceDetails","silence","comment","createdBy","dateDisplayFormat","startsAtDate","dateMath","endsAtDate","container","format","text","primary","row","useFilteredSilences","silences","silenceIdsString","silenceIds","filter","split","includes","id","every","matcher","matchers","some","isEqual","isRegex","topButtonContainer","addNewSilence","callout","background","secondary","info","calloutIcon","editButton","alertManagerAlerts","filteredSilences","showExpiredSilencesBanner","undefined","columns","handleExpireSilenceClick","expireSilenceAction","renderCell","data","Matchers","push","Link","href","useColumns","items","silencedBy","DynamicTable","cols","isExpandable","renderExpandedContent","wrapper","removeButton","matcherOptions","formApi","useFormContext","control","register","formState","errors","fields","append","remove","useFieldArray","required","InputControl","render","field","Select","menuShouldPortal","matcherFieldOptions","operator","rules","IconButton","type","newMatcher","MatcherOperator","SilencePeriod","getValues","onChangeStartsAt","fieldState","startsAtInvalid","useController","validate","onChangeEndsAt","endsAtInvalid","onChangeTimeZone","timeZone","from","dateTime","timeRange","TimeRangeInput","raw","newValue","hideTimeZone","hideQuickRanges","getDefaultFormValues","now","interval","parse","addDurationToDate","hours","toISOString","matcherToMatcherField","matcherName","matcherValue","DefaultTimeZone","config","defaults","formMatchers","parseQueryParamMatchers","defaultsFromQuery","textArea","defaultValues","formAPI","useForm","loading","useUnifiedAlertingSelector","updateSilence","unifiedAlerting","handleSubmit","watch","setValue","clearErrors","prevDuration","setPrevDuration","useDebounce","isValidDate","parseDuration","startValue","valueOf","nextDuration","onSubmit","matchersFields","matcherFieldToMatcher","payload","pickBy","createOrUpdateSilenceAction","exitOnSave","successMessage","FieldSet","keys","TextArea","disabled","LinkButton","fill","withErrorBoundary","setAlertManagerSourceName","useAlertManagerSourceName","alertsRequests","amAlerts","alertsRequest","initialAsyncRequestState","isRoot","pathname","endsWith","fetchAll","fetchSilencesAction","fetchAmAlertsAction","setInterval","SILENCES_POLL_INTERVAL_MS","clearInterval","result","getSilenceById","find","AlertingPageWrapper","pageId","AlertManagerPicker","Alert","severity","LoadingPlaceholder","exact","path","match","params","style","children","isLoading","navModel","getNavModel","useSelector","navIndex","onCollapse","onExpand","isExpanded","testIdGenerator","renderPrefixCell","renderPrefixHeader","Error","expandedIds","setExpandedIds","cell","col","item","isItemExpanded","expandCell","expandButton","itemId","toggleExpanded","bodyCell","expandedContentRow","hasPrefixCell","sizes","unshift","join","breakpoints","down","tooltipPlacement","rest","iconEl","role","ariaLabel","placement","alertStateToState","AlertState","onRemoveLabel","removeLabel","matcherToOperator","xs","isAlertManagerSource","GRAFANA_RULES_SOURCE_NAME","getAlertManagerDataSources","ds","updateQueryParams","update","store","ALERTMANAGER_NAME_LOCAL_STORAGE_KEY","ALERTMANAGER_NAME_QUERY_KEY","querySource","storeSource","shape","borderRadius","weak"],"sourceRoot":""}