{"version":3,"file":"DashboardListPage.1f65f885c5a67f13d9d6.js","mappings":"+IAIO,SAASA,EAAcC,GAC5B,MAAMC,EAAQ,CACZC,KAAM,SACNC,GAAI,gBACJC,SAAU,2CACVC,IAAK,GACLC,KAAMN,EAAOO,MACbC,YAAa,CAAC,CAAED,MAAO,aAAcF,IAAK,eAC1CI,SAAU,CACR,CACEC,QAAQ,EACRR,KAAM,OACNC,GAAK,qBAAoBH,EAAOW,MAChCL,KAAM,aACND,IAAKL,EAAOK,OAiClB,OA5BAJ,EAAMQ,SAASG,KAAK,CAClBF,QAAQ,EACRR,KAAM,gBACNC,GAAK,yBAAwBH,EAAOW,MACpCL,KAAM,SACND,IAAM,GAAEL,EAAOK,uBAGbL,EAAOa,UACTZ,EAAMQ,SAASG,KAAK,CAClBF,QAAQ,EACRR,KAAM,OACNC,GAAK,sBAAqBH,EAAOW,MACjCL,KAAM,cACND,IAAM,GAAEL,EAAOK,oBAIfL,EAAOc,SACTb,EAAMQ,SAASG,KAAK,CAClBF,QAAQ,EACRR,KAAM,MACNC,GAAK,mBAAkBH,EAAOW,MAC9BL,KAAM,WACND,IAAM,GAAEL,EAAOK,iBAIZJ,EAGF,SAASc,EAAcC,GAC5B,MAAMC,EAAOlB,EAAc,CACzBI,GAAI,EACJQ,IAAK,UACLJ,MAAO,UACPF,IAAK,MACLS,SAAS,EACTI,SAAS,EACTL,UAAU,EACVM,QAAS,IAKX,OAFAF,EAAKR,SAAUO,GAAUN,QAAS,EAE3B,CACLO,KAAMA,EACNG,KAAMH,EAAKR,SAAUO,I,yiCChDlB,MAAMK,GAA+BC,EAAAA,EAAAA,OAAK,EAAGC,SAAAA,EAAUC,MAAAA,EAAOC,SAAAA,MAAe,MAClF,MAAM,QAAEC,EAAF,MAAWC,IAAUC,EAAAA,EAAAA,IAAwE,KACjG,MAAMjB,EAAMa,EAAMK,OAAOlB,IACnBN,EAAMoB,EAASK,SACrB,OAAKnB,GAAQN,EAAI0B,WAAW,eCvBDpB,CAAAA,GACtBqB,EAAAA,GAAAA,eAA0BrB,GAAKsB,MAAMjC,IAC1C,MAAMuB,GAAWxB,EAAAA,EAAAA,GAAcC,GAG/B,OAFAuB,EAASd,SAAU,GAAGC,QAAS,EAExB,CAAEV,OAAAA,EAAQkC,UAAWX,MDsBrBY,CAAexB,GAAMsB,MAAK,EAAGjC,OAAAA,EAAQkC,UAAAA,MAC1C,MAAME,EAAOC,EAAAA,aAAAA,iBAA8BrC,EAAOK,KAMlD,OAJI+B,IAASX,EAASK,UACpBQ,EAAAA,gBAAAA,KAAqBF,GAGhB,CAAEpC,OAAAA,EAAQuC,aAAc,OAAF,UAAOhB,EAAP,CAAiBN,KAAMiB,QAV7CM,QAAQC,QAAQ,CAAEF,aAAchB,MAYxC,CAACC,EAAMK,OAAOlB,MAEjB,OACE,SAAC+B,EAAA,EAAD,CAAMnB,SAAQ,UAAEI,MAAAA,OAAF,EAAEA,EAAOY,oBAAT,QAAyBhB,EAAvC,UACE,SAACmB,EAAA,WAAD,CAAeC,UAAWjB,EAA1B,UACE,SAACkB,EAAA,EAAD,CAAkB5C,OAAQ2B,MAAAA,OAAF,EAAEA,EAAO3B,gBAMzCqB,EAAkBwB,YAAc,oBAEhC,MAMA,GAAeC,EAAAA,EAAAA,UAN4EC,IAClF,CACLxB,UAAUyB,EAAAA,EAAAA,GAAYD,EAAME,SAAU,wBAI1C,CAAwC5B","sources":["webpack://grafana/./public/app/features/folders/state/navModel.ts","webpack://grafana/./public/app/features/search/components/DashboardListPage.tsx","webpack://grafana/./public/app/features/search/loaders.ts"],"sourcesContent":["import { NavModel, NavModelItem } from '@grafana/data';\n\nimport { FolderDTO } from 'app/types';\n\nexport function buildNavModel(folder: FolderDTO): NavModelItem {\n  const model = {\n    icon: 'folder',\n    id: 'manage-folder',\n    subTitle: 'Manage folder dashboards and permissions',\n    url: '',\n    text: folder.title,\n    breadcrumbs: [{ title: 'Dashboards', url: 'dashboards' }],\n    children: [\n      {\n        active: false,\n        icon: 'apps',\n        id: `folder-dashboards-${folder.uid}`,\n        text: 'Dashboards',\n        url: folder.url,\n      },\n    ],\n  };\n\n  model.children.push({\n    active: false,\n    icon: 'library-panel',\n    id: `folder-library-panels-${folder.uid}`,\n    text: 'Panels',\n    url: `${folder.url}/library-panels`,\n  });\n\n  if (folder.canAdmin) {\n    model.children.push({\n      active: false,\n      icon: 'lock',\n      id: `folder-permissions-${folder.uid}`,\n      text: 'Permissions',\n      url: `${folder.url}/permissions`,\n    });\n  }\n\n  if (folder.canSave) {\n    model.children.push({\n      active: false,\n      icon: 'cog',\n      id: `folder-settings-${folder.uid}`,\n      text: 'Settings',\n      url: `${folder.url}/settings`,\n    });\n  }\n\n  return model;\n}\n\nexport function getLoadingNav(tabIndex: number): NavModel {\n  const main = buildNavModel({\n    id: 1,\n    uid: 'loading',\n    title: 'Loading',\n    url: 'url',\n    canSave: true,\n    canEdit: true,\n    canAdmin: true,\n    version: 0,\n  });\n\n  main.children![tabIndex].active = true;\n\n  return {\n    main: main,\n    node: main.children![tabIndex],\n  };\n}\n","import React, { FC, memo } from 'react';\nimport { useAsync } from 'react-use';\nimport { connect, MapStateToProps } from 'react-redux';\nimport { NavModel, locationUtil } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { FolderDTO, StoreState } from 'app/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport Page from 'app/core/components/Page/Page';\nimport { loadFolderPage } from '../loaders';\nimport ManageDashboards from './ManageDashboards';\nimport { GrafanaRouteComponentProps } from '../../../core/navigation/types';\n\nexport interface DashboardListPageRouteParams {\n  uid?: string;\n  slug?: string;\n}\n\ninterface DashboardListPageConnectedProps {\n  navModel: NavModel;\n}\ninterface Props extends GrafanaRouteComponentProps<DashboardListPageRouteParams>, DashboardListPageConnectedProps {}\n\nexport const DashboardListPage: FC<Props> = memo(({ navModel, match, location }) => {\n  const { loading, value } = useAsync<() => Promise<{ folder?: FolderDTO; pageNavModel: NavModel }>>(() => {\n    const uid = match.params.uid;\n    const url = location.pathname;\n    if (!uid || !url.startsWith('/dashboards')) {\n      return Promise.resolve({ pageNavModel: navModel });\n    }\n\n    return loadFolderPage(uid!).then(({ folder, folderNav }) => {\n      const path = locationUtil.stripBaseFromUrl(folder.url);\n\n      if (path !== location.pathname) {\n        locationService.push(path);\n      }\n\n      return { folder, pageNavModel: { ...navModel, main: folderNav } };\n    });\n  }, [match.params.uid]);\n\n  return (\n    <Page navModel={value?.pageNavModel ?? navModel}>\n      <Page.Contents isLoading={loading}>\n        <ManageDashboards folder={value?.folder} />\n      </Page.Contents>\n    </Page>\n  );\n});\n\nDashboardListPage.displayName = 'DashboardListPage';\n\nconst mapStateToProps: MapStateToProps<DashboardListPageConnectedProps, {}, StoreState> = (state) => {\n  return {\n    navModel: getNavModel(state.navIndex, 'manage-dashboards'),\n  };\n};\n\nexport default connect(mapStateToProps)(DashboardListPage);\n","import { backendSrv } from 'app/core/services/backend_srv';\nimport { buildNavModel } from '../folders/state/navModel';\n\nexport const loadFolderPage = (uid: string) => {\n  return backendSrv.getFolderByUid(uid).then((folder) => {\n    const navModel = buildNavModel(folder);\n    navModel.children![0].active = true;\n\n    return { folder, folderNav: navModel };\n  });\n};\n"],"names":["buildNavModel","folder","model","icon","id","subTitle","url","text","title","breadcrumbs","children","active","uid","push","canAdmin","canSave","getLoadingNav","tabIndex","main","canEdit","version","node","DashboardListPage","memo","navModel","match","location","loading","value","useAsync","params","pathname","startsWith","backendSrv","then","folderNav","loadFolderPage","path","locationUtil","locationService","pageNavModel","Promise","resolve","Page","isLoading","ManageDashboards","displayName","connect","state","getNavModel","navIndex"],"sourceRoot":""}