{"version":3,"file":"AlertingAdmin.1f65f885c5a67f13d9d6.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useQueryParams.ts","webpack://grafana/./public/app/features/alerting/unified/components/admin/AlertmanagerConfig.tsx","webpack://grafana/./public/app/features/alerting/unified/components/admin/AddAlertManagerModal.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useExternalAmSelector.ts","webpack://grafana/./public/app/features/alerting/unified/components/admin/ExternalAlertmanagers.tsx","webpack://grafana/./public/app/features/alerting/unified/Admin.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts"],"sourcesContent":["import { UrlQueryMap } from '@grafana/data';\nimport { locationSearchToObject, locationService } from '@grafana/runtime';\nimport { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport function useQueryParams(): [UrlQueryMap, (values: UrlQueryMap, replace?: boolean) => void] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => locationSearchToObject(search || ''), [search]);\n  const update = useCallback(\n    (values: UrlQueryMap, replace?: boolean) => setImmediate(() => locationService.partial(values, replace)),\n    []\n  );\n  return [queryParams, update];\n}\n","import React, { useEffect, useState, useMemo } from 'react';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, ConfirmModal, TextArea, HorizontalGroup, Field, Form, useStyles2 } from '@grafana/ui';\nimport { useAlertManagerSourceName } from '../../hooks/useAlertManagerSourceName';\nimport { AlertManagerPicker } from '../AlertManagerPicker';\nimport { GRAFANA_RULES_SOURCE_NAME, isVanillaPrometheusAlertManagerDataSource } from '../../utils/datasource';\nimport { useDispatch } from 'react-redux';\nimport {\n  deleteAlertManagerConfigAction,\n  fetchAlertManagerConfigAction,\n  updateAlertManagerConfigAction,\n} from '../../state/actions';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { initialAsyncRequestState } from '../../utils/redux';\n\ninterface FormValues {\n  configJSON: string;\n}\n\nexport default function AlertmanagerConfig(): JSX.Element {\n  const dispatch = useDispatch();\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName();\n  const [showConfirmDeleteAMConfig, setShowConfirmDeleteAMConfig] = useState(false);\n  const { loading: isDeleting } = useUnifiedAlertingSelector((state) => state.deleteAMConfig);\n  const { loading: isSaving } = useUnifiedAlertingSelector((state) => state.saveAMConfig);\n  const readOnly = alertManagerSourceName ? isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName) : false;\n  const styles = useStyles2(getStyles);\n\n  const configRequests = useUnifiedAlertingSelector((state) => state.amConfigs);\n\n  const { result: config, loading: isLoadingConfig, error: loadingError } =\n    (alertManagerSourceName && configRequests[alertManagerSourceName]) || initialAsyncRequestState;\n\n  useEffect(() => {\n    if (alertManagerSourceName) {\n      dispatch(fetchAlertManagerConfigAction(alertManagerSourceName));\n    }\n  }, [alertManagerSourceName, dispatch]);\n\n  const resetConfig = () => {\n    if (alertManagerSourceName) {\n      dispatch(deleteAlertManagerConfigAction(alertManagerSourceName));\n    }\n    setShowConfirmDeleteAMConfig(false);\n  };\n\n  const defaultValues = useMemo(\n    (): FormValues => ({\n      configJSON: config ? JSON.stringify(config, null, 2) : '',\n    }),\n    [config]\n  );\n\n  const loading = isDeleting || isLoadingConfig || isSaving;\n\n  const onSubmit = (values: FormValues) => {\n    if (alertManagerSourceName && config) {\n      dispatch(\n        updateAlertManagerConfigAction({\n          newConfig: JSON.parse(values.configJSON),\n          oldConfig: config,\n          alertManagerSourceName,\n          successMessage: 'Alertmanager configuration updated.',\n          refetch: true,\n        })\n      );\n    }\n  };\n\n  return (\n    <div className={styles.container}>\n      <AlertManagerPicker current={alertManagerSourceName} onChange={setAlertManagerSourceName} />\n      {loadingError && !loading && (\n        <Alert severity=\"error\" title=\"Error loading Alertmanager configuration\">\n          {loadingError.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {isDeleting && alertManagerSourceName !== GRAFANA_RULES_SOURCE_NAME && (\n        <Alert severity=\"info\" title=\"Resetting Alertmanager configuration\">\n          It might take a while...\n        </Alert>\n      )}\n      {alertManagerSourceName && config && (\n        <Form defaultValues={defaultValues} onSubmit={onSubmit} key={defaultValues.configJSON}>\n          {({ register, errors }) => (\n            <>\n              {!readOnly && (\n                <Field\n                  disabled={loading}\n                  label=\"Configuration\"\n                  invalid={!!errors.configJSON}\n                  error={errors.configJSON?.message}\n                >\n                  <TextArea\n                    {...register('configJSON', {\n                      required: { value: true, message: 'Required.' },\n                      validate: (v) => {\n                        try {\n                          JSON.parse(v);\n                          return true;\n                        } catch (e) {\n                          return e.message;\n                        }\n                      },\n                    })}\n                    id=\"configuration\"\n                    rows={25}\n                  />\n                </Field>\n              )}\n              {readOnly && (\n                <Field label=\"Configuration\">\n                  <pre data-testid=\"readonly-config\">{defaultValues.configJSON}</pre>\n                </Field>\n              )}\n              {!readOnly && (\n                <HorizontalGroup>\n                  <Button type=\"submit\" variant=\"primary\" disabled={loading}>\n                    Save\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    disabled={loading}\n                    variant=\"destructive\"\n                    onClick={() => setShowConfirmDeleteAMConfig(true)}\n                  >\n                    Reset configuration\n                  </Button>\n                </HorizontalGroup>\n              )}\n              {!!showConfirmDeleteAMConfig && (\n                <ConfirmModal\n                  isOpen={true}\n                  title=\"Reset Alertmanager configuration\"\n                  body={`Are you sure you want to reset configuration ${\n                    alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME\n                      ? 'for the Grafana Alertmanager'\n                      : `for \"${alertManagerSourceName}\"`\n                  }? Contact points and notification policies will be reset to their defaults.`}\n                  confirmText=\"Yes, reset configuration\"\n                  onConfirm={resetConfig}\n                  onDismiss={() => setShowConfirmDeleteAMConfig(false)}\n                />\n              )}\n            </>\n          )}\n        </Form>\n      )}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n});\n","import React, { FC, useMemo } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { useDispatch } from 'react-redux';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Field, FieldArray, Form, Icon, Input, Modal, useStyles2 } from '@grafana/ui';\nimport { addExternalAlertmanagersAction } from '../../state/actions';\nimport { AlertmanagerUrl } from 'app/plugins/datasource/alertmanager/types';\n\ninterface Props {\n  onClose: () => void;\n  alertmanagers: AlertmanagerUrl[];\n}\n\nexport const AddAlertManagerModal: FC<Props> = ({ alertmanagers, onClose }) => {\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  const defaultValues: Record<string, AlertmanagerUrl[]> = useMemo(\n    () => ({\n      alertmanagers: alertmanagers,\n    }),\n    [alertmanagers]\n  );\n\n  const modalTitle = (\n    <div className={styles.modalTitle}>\n      <Icon name=\"bell\" className={styles.modalIcon} />\n      <h3>Add Alertmanager</h3>\n    </div>\n  );\n\n  const onSubmit = (values: Record<string, AlertmanagerUrl[]>) => {\n    dispatch(addExternalAlertmanagersAction(values.alertmanagers.map((am) => cleanAlertmanagerUrl(am.url))));\n    onClose();\n  };\n\n  return (\n    <Modal title={modalTitle} isOpen={true} onDismiss={onClose} className={styles.modal}>\n      <div className={styles.description}>\n        We use a service discovery method to find existing Alertmanagers for a given URL.\n      </div>\n      <Form onSubmit={onSubmit} defaultValues={defaultValues}>\n        {({ register, control, errors }) => (\n          <div>\n            <FieldArray control={control} name=\"alertmanagers\">\n              {({ fields, append, remove }) => (\n                <div className={styles.fieldArray}>\n                  <div className={styles.bold}>Source url</div>\n                  <div className={styles.muted}>\n                    Authentication can be done via URL (e.g. user:password@myalertmanager.com) and only the Alertmanager\n                    v2 API is supported. The suffix is added internally, there is no need to specify it.\n                  </div>\n                  {fields.map((field, index) => {\n                    return (\n                      <Field\n                        invalid={!!errors?.alertmanagers?.[index]}\n                        error=\"Field is required\"\n                        key={`${field.id}-${index}`}\n                      >\n                        <Input\n                          className={styles.input}\n                          defaultValue={field.url}\n                          {...register(`alertmanagers.${index}.url`, { required: true })}\n                          placeholder=\"http://localhost:9093\"\n                          addonAfter={\n                            <Button\n                              aria-label=\"Remove alertmanager\"\n                              type=\"button\"\n                              onClick={() => remove(index)}\n                              variant=\"destructive\"\n                              className={styles.destroyInputRow}\n                            >\n                              <Icon name=\"trash-alt\" />\n                            </Button>\n                          }\n                        />\n                      </Field>\n                    );\n                  })}\n                  <Button type=\"button\" variant=\"secondary\" onClick={() => append({ url: '' })}>\n                    Add URL\n                  </Button>\n                </div>\n              )}\n            </FieldArray>\n            <div>\n              <Button onSubmit={() => onSubmit}>Add Alertmanagers</Button>\n            </div>\n          </div>\n        )}\n      </Form>\n    </Modal>\n  );\n};\n\nfunction cleanAlertmanagerUrl(url: string): string {\n  return url.replace(/\\/$/, '').replace(/\\/api\\/v[1|2]\\/alerts/i, '');\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const muted = css`\n    color: ${theme.colors.text.secondary};\n  `;\n  return {\n    description: cx(\n      css`\n        margin-bottom: ${theme.spacing(2)};\n      `,\n      muted\n    ),\n    muted: muted,\n    bold: css`\n      font-weight: ${theme.typography.fontWeightBold};\n    `,\n    modal: css``,\n    modalIcon: cx(\n      muted,\n      css`\n        margin-right: ${theme.spacing(1)};\n      `\n    ),\n    modalTitle: css`\n      display: flex;\n    `,\n    input: css`\n      margin-bottom: ${theme.spacing(1)};\n      margin-right: ${theme.spacing(1)};\n    `,\n    inputRow: css`\n      display: flex;\n    `,\n    destroyInputRow: css`\n      padding: ${theme.spacing(1)};\n    `,\n    fieldArray: css`\n      margin-bottom: ${theme.spacing(4)};\n    `,\n  };\n};\n","import { useSelector } from 'react-redux';\nimport { StoreState } from '../../../../types';\n\nconst SUFFIX_REGEX = /\\/api\\/v[1|2]\\/alerts/i;\ntype AlertmanagerConfig = { url: string; status: string; actualUrl: string };\n\nexport function useExternalAmSelector(): AlertmanagerConfig[] | undefined {\n  const discoveredAlertmanagers = useSelector(\n    (state: StoreState) => state.unifiedAlerting.externalAlertmanagers.discoveredAlertmanagers.result?.data\n  );\n  const alertmanagerConfig = useSelector(\n    (state: StoreState) => state.unifiedAlerting.externalAlertmanagers.alertmanagerConfig.result?.alertmanagers\n  );\n\n  if (!discoveredAlertmanagers || !alertmanagerConfig) {\n    return [];\n  }\n\n  const enabledAlertmanagers: AlertmanagerConfig[] = [];\n  const droppedAlertmanagers: AlertmanagerConfig[] = discoveredAlertmanagers?.droppedAlertManagers.map((am) => ({\n    url: am.url.replace(SUFFIX_REGEX, ''),\n    status: 'dropped',\n    actualUrl: am.url,\n  }));\n\n  for (const url of alertmanagerConfig) {\n    if (discoveredAlertmanagers.activeAlertManagers.length === 0) {\n      enabledAlertmanagers.push({\n        url: url,\n        status: 'pending',\n        actualUrl: '',\n      });\n    } else {\n      let found = false;\n      for (const activeAM of discoveredAlertmanagers.activeAlertManagers) {\n        if (activeAM.url === `${url}/api/v2/alerts`) {\n          found = true;\n          enabledAlertmanagers.push({\n            url: activeAM.url.replace(SUFFIX_REGEX, ''),\n            status: 'active',\n            actualUrl: activeAM.url,\n          });\n        }\n      }\n      if (!found) {\n        enabledAlertmanagers.push({\n          url: url,\n          status: 'pending',\n          actualUrl: '',\n        });\n      }\n    }\n  }\n\n  return [...enabledAlertmanagers, ...droppedAlertmanagers];\n}\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, ConfirmModal, HorizontalGroup, Icon, Tooltip, useStyles2 } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { AddAlertManagerModal } from './AddAlertManagerModal';\nimport {\n  addExternalAlertmanagersAction,\n  fetchExternalAlertmanagersAction,\n  fetchExternalAlertmanagersConfigAction,\n} from '../../state/actions';\nimport { useExternalAmSelector } from '../../hooks/useExternalAmSelector';\n\nexport const ExternalAlertmanagers = () => {\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  const [modalState, setModalState] = useState({ open: false, payload: [{ url: '' }] });\n  const [deleteModalState, setDeleteModalState] = useState({ open: false, index: 0 });\n  const externalAlertManagers = useExternalAmSelector();\n\n  useEffect(() => {\n    dispatch(fetchExternalAlertmanagersAction());\n    dispatch(fetchExternalAlertmanagersConfigAction());\n    const interval = setInterval(() => dispatch(fetchExternalAlertmanagersAction()), 5000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [dispatch]);\n\n  const onDelete = useCallback(\n    (index: number) => {\n      // to delete we need to filter the alertmanager from the list and repost\n      const newList = (externalAlertManagers ?? [])\n        .filter((am, i) => i !== index)\n        .map((am) => {\n          return am.url;\n        });\n      dispatch(addExternalAlertmanagersAction(newList));\n      setDeleteModalState({ open: false, index: 0 });\n    },\n    [externalAlertManagers, dispatch]\n  );\n\n  const onEdit = useCallback(() => {\n    const ams = externalAlertManagers ? [...externalAlertManagers] : [{ url: '' }];\n    setModalState((state) => ({\n      ...state,\n      open: true,\n      payload: ams,\n    }));\n  }, [setModalState, externalAlertManagers]);\n\n  const onOpenModal = useCallback(() => {\n    setModalState((state) => {\n      const ams = externalAlertManagers ? [...externalAlertManagers, { url: '' }] : [{ url: '' }];\n      return {\n        ...state,\n        open: true,\n        payload: ams,\n      };\n    });\n  }, [externalAlertManagers]);\n\n  const onCloseModal = useCallback(() => {\n    setModalState((state) => ({\n      ...state,\n      open: false,\n    }));\n  }, [setModalState]);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'green';\n\n      case 'pending':\n        return 'yellow';\n\n      default:\n        return 'red';\n    }\n  };\n\n  const noAlertmanagers = externalAlertManagers?.length === 0;\n\n  return (\n    <div>\n      <h4>External Alertmanagers</h4>\n      <div className={styles.muted}>\n        You can have your Grafana managed alerts be delivered to one or many external Alertmanager(s) in addition to the\n        internal Alertmanager by specifying their URLs below.\n      </div>\n      <div className={styles.actions}>\n        {!noAlertmanagers && (\n          <Button type=\"button\" onClick={onOpenModal}>\n            Add Alertmanager\n          </Button>\n        )}\n      </div>\n      {noAlertmanagers ? (\n        <EmptyListCTA\n          title=\"You have not added any external alertmanagers\"\n          onClick={onOpenModal}\n          buttonTitle=\"Add Alertmanager\"\n          buttonIcon=\"bell-slash\"\n        />\n      ) : (\n        <table className=\"filter-table form-inline filter-table--hover\">\n          <thead>\n            <tr>\n              <th>Url</th>\n              <th>Status</th>\n              <th style={{ width: '2%' }}>Action</th>\n            </tr>\n          </thead>\n          <tbody>\n            {externalAlertManagers?.map((am, index) => {\n              return (\n                <tr key={index}>\n                  <td>\n                    <span className={styles.url}>{am.url}</span>\n                    {am.actualUrl ? (\n                      <Tooltip content={`Discovered ${am.actualUrl} from ${am.url}`} theme=\"info\">\n                        <Icon name=\"info-circle\" />\n                      </Tooltip>\n                    ) : null}\n                  </td>\n                  <td>\n                    <Icon name=\"heart\" style={{ color: getStatusColor(am.status) }} title={am.status} />\n                  </td>\n                  <td>\n                    <HorizontalGroup>\n                      <Button variant=\"secondary\" type=\"button\" onClick={onEdit} aria-label=\"Edit alertmanager\">\n                        <Icon name=\"pen\" />\n                      </Button>\n                      <Button\n                        variant=\"destructive\"\n                        aria-label=\"Remove alertmanager\"\n                        type=\"button\"\n                        onClick={() => setDeleteModalState({ open: true, index })}\n                      >\n                        <Icon name=\"trash-alt\" />\n                      </Button>\n                    </HorizontalGroup>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n      <ConfirmModal\n        isOpen={deleteModalState.open}\n        title=\"Remove Alertmanager\"\n        body=\"Are you sure you want to remove this Alertmanager\"\n        confirmText=\"Remove\"\n        onConfirm={() => onDelete(deleteModalState.index)}\n        onDismiss={() => setDeleteModalState({ open: false, index: 0 })}\n      />\n      {modalState.open && <AddAlertManagerModal onClose={onCloseModal} alertmanagers={modalState.payload} />}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  url: css`\n    margin-right: ${theme.spacing(1)};\n  `,\n  muted: css`\n    color: ${theme.colors.text.secondary};\n  `,\n  actions: css`\n    margin-top: ${theme.spacing(2)};\n    display: flex;\n    justify-content: flex-end;\n  `,\n  table: css``,\n});\n","import React from 'react';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport AlertmanagerConfig from './components/admin/AlertmanagerConfig';\nimport { ExternalAlertmanagers } from './components/admin/ExternalAlertmanagers';\n\nexport default function Admin(): JSX.Element {\n  return (\n    <AlertingPageWrapper pageId=\"alerting-admin\">\n      <AlertmanagerConfig test-id=\"admin-alertmanagerconfig\" />\n      <ExternalAlertmanagers test-id=\"admin-externalalertmanagers\" />\n    </AlertingPageWrapper>\n  );\n}\n","import React, { FC } from 'react';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper: FC<Props> = ({ children, pageId, isLoading }) => {\n  const navModel = getNavModel(\n    useSelector((state: StoreState) => state.navIndex),\n    pageId\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\nimport { useCallback } from 'react';\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { getAlertManagerDataSources, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction isAlertManagerSource(alertManagerSourceName: string): boolean {\n  return (\n    alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME ||\n    !!getAlertManagerDataSources().find((ds) => ds.name === alertManagerSourceName)\n  );\n}\n\n/* this will return am name either from query params or from local storage or a default (grafana).\n *\n * fallbackUrl - if provided, will redirect to this url if alertmanager provided in query no longer\n */\nexport function useAlertManagerSourceName(): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerSource(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerSource(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerSource(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  return [GRAFANA_RULES_SOURCE_NAME, update];\n}\n"],"names":["useQueryParams","search","useLocation","useMemo","locationSearchToObject","useCallback","values","replace","setImmediate","locationService","AlertmanagerConfig","dispatch","useDispatch","alertManagerSourceName","setAlertManagerSourceName","useAlertManagerSourceName","showConfirmDeleteAMConfig","setShowConfirmDeleteAMConfig","useState","loading","isDeleting","useUnifiedAlertingSelector","state","deleteAMConfig","isSaving","saveAMConfig","readOnly","isVanillaPrometheusAlertManagerDataSource","styles","useStyles2","getStyles","configRequests","amConfigs","result","config","isLoadingConfig","error","loadingError","initialAsyncRequestState","useEffect","fetchAlertManagerConfigAction","resetConfig","deleteAlertManagerConfigAction","defaultValues","configJSON","JSON","stringify","className","container","AlertManagerPicker","current","onChange","Alert","severity","title","message","GRAFANA_RULES_SOURCE_NAME","Form","onSubmit","updateAlertManagerConfigAction","newConfig","parse","oldConfig","successMessage","refetch","register","errors","Field","disabled","label","invalid","TextArea","required","value","validate","v","e","id","rows","HorizontalGroup","Button","type","variant","onClick","ConfirmModal","isOpen","body","confirmText","onConfirm","onDismiss","theme","css","spacing","AddAlertManagerModal","alertmanagers","onClose","modalTitle","Icon","name","modalIcon","addExternalAlertmanagersAction","map","am","url","Modal","modal","description","control","FieldArray","fields","append","remove","fieldArray","bold","muted","field","index","Input","input","defaultValue","placeholder","addonAfter","destroyInputRow","colors","text","secondary","cx","typography","fontWeightBold","inputRow","SUFFIX_REGEX","ExternalAlertmanagers","modalState","setModalState","open","payload","deleteModalState","setDeleteModalState","externalAlertManagers","discoveredAlertmanagers","useSelector","unifiedAlerting","externalAlertmanagers","data","alertmanagerConfig","enabledAlertmanagers","droppedAlertmanagers","droppedAlertManagers","status","actualUrl","activeAlertManagers","length","push","found","activeAM","useExternalAmSelector","fetchExternalAlertmanagersAction","fetchExternalAlertmanagersConfigAction","interval","setInterval","clearInterval","onDelete","newList","filter","i","onEdit","ams","onOpenModal","onCloseModal","getStatusColor","noAlertmanagers","actions","EmptyListCTA","buttonTitle","buttonIcon","style","width","Tooltip","content","color","table","Admin","AlertingPageWrapper","pageId","children","isLoading","navModel","getNavModel","navIndex","isAlertManagerSource","getAlertManagerDataSources","find","ds","queryParams","updateQueryParams","update","store","ALERTMANAGER_NAME_LOCAL_STORAGE_KEY","ALERTMANAGER_NAME_QUERY_KEY","querySource","undefined","storeSource"],"sourceRoot":""}