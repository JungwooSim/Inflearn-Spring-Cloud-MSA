{"version":3,"file":"7948.1f65f885c5a67f13d9d6.js","mappings":"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","sources":["webpack://grafana/./public/app/features/canvas/elements/icon.tsx","webpack://grafana/./public/app/features/canvas/elements/notFound.tsx","webpack://grafana/./public/app/features/canvas/types.ts","webpack://grafana/./public/app/features/canvas/elements/textBox.tsx","webpack://grafana/./public/app/features/canvas/registry.ts","webpack://grafana/./public/app/features/canvas/runtime/element.tsx","webpack://grafana/./public/app/features/canvas/runtime/group.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/utils.ts","webpack://grafana/./public/app/plugins/panel/canvas/editor/LayerElementListEditor.tsx","webpack://grafana/./public/app/plugins/panel/canvas/types.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-ca2705900f/3/opt/drone/yarncache/react-use-npm-17.2.4-c702db5427-3c885c3798.zip/node_modules/react-use/esm/useIsomorphicLayoutEffect.js","webpack://grafana/./.yarn/__virtual__/react-use-virtual-ca2705900f/3/opt/drone/yarncache/react-use-npm-17.2.4-c702db5427-3c885c3798.zip/node_modules/react-use/esm/useObservable.js"],"sourcesContent":["import React, { CSSProperties } from 'react';\n\nimport { CanvasElementItem, CanvasElementProps } from '../element';\nimport {\n  ColorDimensionConfig,\n  ResourceDimensionConfig,\n  ResourceDimensionMode,\n  getPublicOrAbsoluteUrl,\n} from 'app/features/dimensions';\nimport { ColorDimensionEditor, ResourceDimensionEditor } from 'app/features/dimensions/editors';\nimport SVG from 'react-inlinesvg';\nimport { css } from '@emotion/css';\nimport { isString } from 'lodash';\nimport { LineConfig } from '../types';\nimport { DimensionContext } from 'app/features/dimensions/context';\n\nexport interface IconConfig {\n  path?: ResourceDimensionConfig;\n  fill?: ColorDimensionConfig;\n  stroke?: LineConfig;\n}\n\ninterface IconData {\n  path: string;\n  fill: string;\n  strokeColor?: string;\n  stroke?: number;\n}\n\n// When a stoke is defined, we want the path to be in page units\nconst svgStrokePathClass = css`\n  path {\n    vector-effect: non-scaling-stroke;\n  }\n`;\n\nexport function IconDisplay(props: CanvasElementProps) {\n  const { width, height, data } = props;\n  if (!data?.path) {\n    return null;\n  }\n\n  const svgStyle: CSSProperties = {\n    fill: data?.fill,\n    stroke: data?.strokeColor,\n    strokeWidth: data?.stroke,\n  };\n\n  return (\n    <SVG\n      src={data.path}\n      width={width}\n      height={height}\n      style={svgStyle}\n      className={svgStyle.strokeWidth ? svgStrokePathClass : undefined}\n    />\n  );\n}\n\nexport const iconItem: CanvasElementItem<IconConfig, IconData> = {\n  id: 'icon',\n  name: 'Icon',\n  description: 'SVG Icon display',\n\n  display: IconDisplay,\n\n  getNewOptions: (options) => ({\n    placement: {\n      width: 50,\n      height: 50,\n    },\n    ...options,\n    config: {\n      path: {\n        mode: ResourceDimensionMode.Fixed,\n        fixed: 'img/icons/unicons/question-circle.svg',\n      },\n      fill: { fixed: '#FFF899' },\n    },\n  }),\n\n  // Called when data changes\n  prepareData: (ctx: DimensionContext, cfg: IconConfig) => {\n    let path: string | undefined = undefined;\n    if (cfg.path) {\n      path = ctx.getResource(cfg.path).value();\n    }\n    if (!path || !isString(path)) {\n      path = getPublicOrAbsoluteUrl('img/icons/unicons/question-circle.svg');\n    }\n\n    const data: IconData = {\n      path,\n      fill: cfg.fill ? ctx.getColor(cfg.fill).value() : '#CCC',\n    };\n\n    if (cfg.stroke?.width && cfg.stroke.color) {\n      if (cfg.stroke.width > 0) {\n        data.stroke = cfg.stroke?.width;\n        data.strokeColor = ctx.getColor(cfg.stroke.color).value();\n      }\n    }\n    return data;\n  },\n\n  // Heatmap overlay options\n  registerOptionsUI: (builder) => {\n    const category = ['Icon'];\n    builder\n      .addCustomEditor({\n        category,\n        id: 'iconSelector',\n        path: 'config.path',\n        name: 'SVG Path',\n        editor: ResourceDimensionEditor,\n        settings: {\n          resourceType: 'icon',\n        },\n      })\n      .addCustomEditor({\n        category,\n        id: 'config.fill',\n        path: 'config.fill',\n        name: 'Fill color',\n        editor: ColorDimensionEditor,\n        settings: {},\n        defaultValue: {\n          // Configured values\n          fixed: 'grey',\n        },\n      })\n      .addSliderInput({\n        category,\n        path: 'config.stroke.width',\n        name: 'Stroke',\n        defaultValue: 0,\n        settings: {\n          min: 0,\n          max: 10,\n        },\n      })\n      .addCustomEditor({\n        category,\n        id: 'config.stroke.color',\n        path: 'config.stroke.color',\n        name: 'Stroke color',\n        editor: ColorDimensionEditor,\n        settings: {},\n        defaultValue: {\n          // Configured values\n          fixed: 'grey',\n        },\n        showIf: (cfg) => Boolean(cfg?.config?.stroke?.width),\n      });\n  },\n};\n","import React, { PureComponent } from 'react';\n\nimport { CanvasElementItem, CanvasElementProps } from '../element';\n\ninterface NotFoundConfig {\n  orig?: any;\n}\n\nclass NotFoundDisplay extends PureComponent<CanvasElementProps<NotFoundConfig>> {\n  render() {\n    const { config } = this.props;\n    return (\n      <div>\n        <h3>NOT FOUND:</h3>\n        <pre>{JSON.stringify(config, null, 2)}</pre>\n      </div>\n    );\n  }\n}\n\nexport const notFoundItem: CanvasElementItem<NotFoundConfig> = {\n  id: 'not-found',\n  name: 'Not found',\n  description: 'Display when element type is not found in the registry',\n\n  display: NotFoundDisplay,\n\n  defaultSize: {\n    width: 100,\n    height: 100,\n  },\n\n  getNewOptions: () => ({\n    config: {},\n  }),\n};\n","import { ColorDimensionConfig, ResourceDimensionConfig } from 'app/features/dimensions/types';\n\nexport interface Placement {\n  top?: number;\n  left?: number;\n  right?: number;\n  bottom?: number;\n\n  width?: number;\n  height?: number;\n}\n\nexport interface Anchor {\n  top?: boolean;\n  left?: boolean;\n  right?: boolean;\n  bottom?: boolean;\n}\n\nexport enum BackgroundImageSize {\n  Original = 'original',\n  Contain = 'contain',\n  Cover = 'cover',\n  Fill = 'fill',\n  Tile = 'tile',\n}\n\nexport interface BackgroundConfig {\n  color?: ColorDimensionConfig;\n  image?: ResourceDimensionConfig;\n  size?: BackgroundImageSize;\n}\n\nexport interface LineConfig {\n  color?: ColorDimensionConfig;\n  width?: number;\n}\n","import React, { PureComponent } from 'react';\nimport { ColorDimensionEditor } from 'app/features/dimensions/editors/ColorDimensionEditor';\nimport { TextDimensionEditor } from 'app/features/dimensions/editors/TextDimensionEditor';\nimport { ColorDimensionConfig, TextDimensionConfig } from 'app/features/dimensions/types';\n\nimport { CanvasElementItem, CanvasElementProps } from '../element';\nimport { css } from '@emotion/css';\nimport { stylesFactory } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from 'app/core/config';\nimport { DimensionContext } from 'app/features/dimensions/context';\n\nexport enum Align {\n  Left = 'left',\n  Center = 'center',\n  Right = 'right',\n}\n\nexport enum VAlign {\n  Top = 'top',\n  Middle = 'middle',\n  Bottom = 'bottom',\n}\n\ninterface TextBoxData {\n  text?: string;\n  color?: string;\n  size?: number; // 0 or missing will \"auto size\"\n  align: Align;\n  valign: VAlign;\n}\n\ninterface TextBoxConfig {\n  text?: TextDimensionConfig;\n  color?: ColorDimensionConfig;\n  size?: number; // 0 or missing will \"auto size\"\n  align: Align;\n  valign: VAlign;\n}\n\nclass TextBoxDisplay extends PureComponent<CanvasElementProps<TextBoxConfig, TextBoxData>> {\n  render() {\n    const { data } = this.props;\n    const styles = getStyles(config.theme2, data);\n    return (\n      <div className={styles.container}>\n        <span className={styles.span}>{data?.text}</span>\n      </div>\n    );\n  }\n}\nconst getStyles = stylesFactory((theme: GrafanaTheme2, data) => ({\n  container: css`\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    display: table;\n  `,\n  span: css`\n    display: table-cell;\n    vertical-align: ${data.valign};\n    text-align: ${data.align};\n    font-size: ${data?.size}px;\n    color: ${data?.color};\n  `,\n}));\nexport const textBoxItem: CanvasElementItem<TextBoxConfig, TextBoxData> = {\n  id: 'text-box',\n  name: 'Text',\n  description: 'Text box',\n\n  display: TextBoxDisplay,\n\n  defaultSize: {\n    width: 240,\n    height: 160,\n  },\n\n  getNewOptions: (options) => ({\n    background: {\n      color: {\n        fixed: 'grey',\n      },\n    },\n    ...options,\n    config: {\n      align: Align.Left,\n      valign: VAlign.Middle,\n    },\n  }),\n\n  // Called when data changes\n  prepareData: (ctx: DimensionContext, cfg: TextBoxConfig) => {\n    const data: TextBoxData = {\n      text: cfg.text ? ctx.getText(cfg.text).value() : '',\n      align: cfg.align ?? Align.Center,\n      valign: cfg.valign ?? VAlign.Middle,\n      size: cfg.size,\n    };\n\n    if (cfg.color) {\n      data.color = ctx.getColor(cfg.color).value();\n    }\n\n    return data;\n  },\n\n  // Heatmap overlay options\n  registerOptionsUI: (builder) => {\n    const category = ['Text box'];\n    builder\n      .addCustomEditor({\n        category,\n        id: 'textSelector',\n        path: 'config.text',\n        name: 'Text',\n        editor: TextDimensionEditor,\n      })\n      .addCustomEditor({\n        category,\n        id: 'config.color',\n        path: 'config.color',\n        name: 'Text color',\n        editor: ColorDimensionEditor,\n        settings: {},\n        defaultValue: {},\n      })\n      .addRadio({\n        category,\n        path: 'config.align',\n        name: 'Align text',\n        settings: {\n          options: [\n            { value: Align.Left, label: 'Left' },\n            { value: Align.Center, label: 'Center' },\n            { value: Align.Right, label: 'Right' },\n          ],\n        },\n        defaultValue: Align.Left,\n      })\n      .addRadio({\n        category,\n        path: 'config.valign',\n        name: 'Vertical align',\n        settings: {\n          options: [\n            { value: VAlign.Top, label: 'Top' },\n            { value: VAlign.Middle, label: 'Middle' },\n            { value: VAlign.Bottom, label: 'Bottom' },\n          ],\n        },\n        defaultValue: VAlign.Middle,\n      })\n      .addNumberInput({\n        category,\n        path: 'config.size',\n        name: 'Text size',\n        settings: {\n          placeholder: 'Auto',\n        },\n      });\n  },\n};\n","import { Registry } from '@grafana/data';\nimport { CanvasElementItem, CanvasElementOptions } from './element';\nimport { iconItem } from './elements/icon';\nimport { textBoxItem } from './elements/textBox';\n\nexport const DEFAULT_CANVAS_ELEMENT_CONFIG: CanvasElementOptions = {\n  type: iconItem.id,\n  ...iconItem.getNewOptions(),\n};\n\nexport const canvasElementRegistry = new Registry<CanvasElementItem>(() => [\n  iconItem, // default for now\n  textBoxItem,\n]);\n","import React, { CSSProperties } from 'react';\nimport { OnDrag, OnResize } from 'react-moveable/declaration/types';\n\nimport {\n  BackgroundImageSize,\n  CanvasElementItem,\n  CanvasElementOptions,\n  canvasElementRegistry,\n  Placement,\n  Anchor,\n} from 'app/features/canvas';\nimport { DimensionContext } from 'app/features/dimensions';\nimport { notFoundItem } from 'app/features/canvas/elements/notFound';\nimport { GroupState } from './group';\n\nlet counter = 0;\n\nexport class ElementState {\n  readonly UID = counter++;\n\n  revId = 0;\n  sizeStyle: CSSProperties = {};\n  dataStyle: CSSProperties = {};\n\n  // Filled in by ref\n  div?: HTMLDivElement;\n\n  // Calculated\n  width = 100;\n  height = 100;\n  data?: any; // depends on the type\n\n  // From options, but always set and always valid\n  anchor: Anchor;\n  placement: Placement;\n\n  constructor(public item: CanvasElementItem, public options: CanvasElementOptions, public parent?: GroupState) {\n    if (!options) {\n      this.options = { type: item.id };\n    }\n    this.anchor = options.anchor ?? {};\n    this.placement = options.placement ?? {};\n    options.anchor = this.anchor;\n    options.placement = this.placement;\n  }\n\n  validatePlacement() {\n    const { anchor, placement } = this;\n    if (!(anchor.left || anchor.right)) {\n      anchor.left = true;\n    }\n    if (!(anchor.top || anchor.bottom)) {\n      anchor.top = true;\n    }\n\n    const w = placement.width ?? 100; // this.div ? this.div.clientWidth : this.width;\n    const h = placement.height ?? 100; // this.div ? this.div.clientHeight : this.height;\n\n    if (anchor.top) {\n      if (!placement.top) {\n        placement.top = 0;\n      }\n      if (anchor.bottom) {\n        delete placement.height;\n      } else {\n        placement.height = h;\n        delete placement.bottom;\n      }\n    } else if (anchor.bottom) {\n      if (!placement.bottom) {\n        placement.bottom = 0;\n      }\n      placement.height = h;\n      delete placement.top;\n    }\n\n    if (anchor.left) {\n      if (!placement.left) {\n        placement.left = 0;\n      }\n      if (anchor.right) {\n        delete placement.width;\n      } else {\n        placement.width = w;\n        delete placement.right;\n      }\n    } else if (anchor.right) {\n      if (!placement.right) {\n        placement.right = 0;\n      }\n      placement.width = w;\n      delete placement.left;\n    }\n\n    this.width = w;\n    this.height = h;\n\n    this.options.anchor = this.anchor;\n    this.options.placement = this.placement;\n\n    // console.log('validate', this.UID, this.item.id, this.placement, this.anchor);\n  }\n\n  // The parent size, need to set our own size based on offsets\n  updateSize(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n    this.validatePlacement();\n\n    // Update the CSS position\n    this.sizeStyle = {\n      ...this.options.placement,\n      position: 'absolute',\n    };\n  }\n\n  updateData(ctx: DimensionContext) {\n    if (this.item.prepareData) {\n      this.data = this.item.prepareData(ctx, this.options.config);\n      this.revId++; // rerender\n    }\n\n    const { background, border } = this.options;\n    const css: CSSProperties = {};\n    if (background) {\n      if (background.color) {\n        const color = ctx.getColor(background.color);\n        css.backgroundColor = color.value();\n      }\n      if (background.image) {\n        const image = ctx.getResource(background.image);\n        if (image) {\n          const v = image.value();\n          if (v) {\n            css.backgroundImage = `url(\"${v}\")`;\n            switch (background.size ?? BackgroundImageSize.Contain) {\n              case BackgroundImageSize.Contain:\n                css.backgroundSize = 'contain';\n                css.backgroundRepeat = 'no-repeat';\n                break;\n              case BackgroundImageSize.Cover:\n                css.backgroundSize = 'cover';\n                css.backgroundRepeat = 'no-repeat';\n                break;\n              case BackgroundImageSize.Original:\n                css.backgroundRepeat = 'no-repeat';\n                break;\n              case BackgroundImageSize.Tile:\n                css.backgroundRepeat = 'repeat';\n                break;\n              case BackgroundImageSize.Fill:\n                css.backgroundSize = '100% 100%';\n                break;\n            }\n          }\n        }\n      }\n    }\n\n    if (border && border.color && border.width) {\n      const color = ctx.getColor(border.color);\n      css.borderWidth = border.width;\n      css.borderStyle = 'solid';\n      css.borderColor = color.value();\n\n      // Move the image to inside the border\n      if (css.backgroundImage) {\n        css.backgroundOrigin = 'padding-box';\n      }\n    }\n\n    this.dataStyle = css;\n  }\n\n  /** Recursively visit all nodes */\n  visit(visitor: (v: ElementState) => void) {\n    visitor(this);\n  }\n\n  onChange(options: CanvasElementOptions) {\n    if (this.item.id !== options.type) {\n      this.item = canvasElementRegistry.getIfExists(options.type) ?? notFoundItem;\n    }\n\n    this.revId++;\n    this.options = { ...options };\n    let trav = this.parent;\n    while (trav) {\n      if (trav.isRoot()) {\n        trav.scene.save();\n        break;\n      }\n      trav.revId++;\n      trav = trav.parent;\n    }\n  }\n\n  getSaveModel() {\n    return { ...this.options };\n  }\n\n  initElement = (target: HTMLDivElement) => {\n    this.div = target;\n  };\n\n  applyDrag = (event: OnDrag) => {\n    const { placement, anchor } = this;\n\n    const deltaX = event.delta[0];\n    const deltaY = event.delta[1];\n\n    const style = event.target.style;\n    if (anchor.top) {\n      placement.top! += deltaY;\n      style.top = `${placement.top}px`;\n    }\n    if (anchor.bottom) {\n      placement.bottom! -= deltaY;\n      style.bottom = `${placement.bottom}px`;\n    }\n    if (anchor.left) {\n      placement.left! += deltaX;\n      style.left = `${placement.left}px`;\n    }\n    if (anchor.right) {\n      placement.right! -= deltaX;\n      style.right = `${placement.right}px`;\n    }\n  };\n\n  // kinda like:\n  // https://github.com/grafana/grafana-edge-app/blob/main/src/panels/draw/WrapItem.tsx#L44\n  applyResize = (event: OnResize) => {\n    const { placement, anchor } = this;\n\n    const style = event.target.style;\n    const deltaX = event.delta[0];\n    const deltaY = event.delta[1];\n    const dirLR = event.direction[0];\n    const dirTB = event.direction[1];\n    if (dirLR === 1) {\n      // RIGHT\n      if (anchor.right) {\n        placement.right! -= deltaX;\n        style.right = `${placement.right}px`;\n        if (!anchor.left) {\n          placement.width = event.width;\n          style.width = `${placement.width}px`;\n        }\n      } else {\n        placement.width! = event.width;\n        style.width = `${placement.width}px`;\n      }\n    } else if (dirLR === -1) {\n      // LEFT\n      if (anchor.left) {\n        placement.left! -= deltaX;\n        placement.width! = event.width;\n        style.left = `${placement.left}px`;\n        style.width = `${placement.width}px`;\n      } else {\n        placement.width! += deltaX;\n        style.width = `${placement.width}px`;\n      }\n    }\n\n    if (dirTB === -1) {\n      // TOP\n      if (anchor.top) {\n        placement.top! -= deltaY;\n        placement.height = event.height;\n        style.top = `${placement.top}px`;\n        style.height = `${placement.height}px`;\n      } else {\n        placement.height = event.height;\n        style.height = `${placement.height}px`;\n      }\n    } else if (dirTB === 1) {\n      // BOTTOM\n      if (anchor.bottom) {\n        placement.bottom! -= deltaY;\n        placement.height! = event.height;\n        style.bottom = `${placement.bottom}px`;\n        style.height = `${placement.height}px`;\n      } else {\n        placement.height! = event.height;\n        style.height = `${placement.height}px`;\n      }\n    }\n\n    this.width = event.width;\n    this.height = event.height;\n  };\n\n  render() {\n    const { item } = this;\n    return (\n      <div key={`${this.UID}`} style={{ ...this.sizeStyle, ...this.dataStyle }} ref={this.initElement}>\n        <item.display\n          key={`${this.UID}/${this.revId}`}\n          config={this.options.config}\n          width={this.width}\n          height={this.height}\n          data={this.data}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { CanvasGroupOptions, canvasElementRegistry } from 'app/features/canvas';\nimport { DimensionContext } from 'app/features/dimensions';\nimport { notFoundItem } from 'app/features/canvas/elements/notFound';\nimport { ElementState } from './element';\nimport { CanvasElementItem } from '../element';\nimport { LayerActionID } from 'app/plugins/panel/canvas/types';\nimport { cloneDeep } from 'lodash';\nimport { Scene } from './scene';\nimport { RootElement } from './root';\n\nexport const groupItemDummy: CanvasElementItem = {\n  id: 'group',\n  name: 'Group',\n  description: 'Group',\n\n  getNewOptions: () => ({\n    config: {},\n  }),\n\n  // eslint-disable-next-line react/display-name\n  display: () => {\n    return <div>GROUP!</div>;\n  },\n};\n\nexport class GroupState extends ElementState {\n  elements: ElementState[] = [];\n  scene: Scene;\n\n  constructor(public options: CanvasGroupOptions, scene: Scene, public parent?: GroupState) {\n    super(groupItemDummy, options, parent);\n\n    this.scene = scene;\n\n    // mutate options object\n    let { elements } = this.options;\n    if (!elements) {\n      this.options.elements = elements = [];\n    }\n\n    for (const c of elements) {\n      if (c.type === 'group') {\n        this.elements.push(new GroupState(c as CanvasGroupOptions, scene, this));\n      } else {\n        const item = canvasElementRegistry.getIfExists(c.type) ?? notFoundItem;\n        this.elements.push(new ElementState(item, c, this));\n      }\n    }\n  }\n\n  isRoot(): this is RootElement {\n    return false;\n  }\n\n  // The parent size, need to set our own size based on offsets\n  updateSize(width: number, height: number) {\n    super.updateSize(width, height);\n    if (!this.parent) {\n      this.width = width;\n      this.height = height;\n      this.sizeStyle.width = width;\n      this.sizeStyle.height = height;\n    }\n\n    // Update children with calculated size\n    for (const elem of this.elements) {\n      elem.updateSize(this.width, this.height);\n    }\n\n    // The group forced to full width (for now)\n    this.sizeStyle.width = width;\n    this.sizeStyle.height = height;\n    this.sizeStyle.position = 'absolute';\n  }\n\n  updateData(ctx: DimensionContext) {\n    super.updateData(ctx);\n    for (const elem of this.elements) {\n      elem.updateData(ctx);\n    }\n  }\n\n  // used in the layer editor\n  reorder(startIndex: number, endIndex: number) {\n    const result = Array.from(this.elements);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    this.elements = result;\n\n    this.reinitializeMoveable();\n  }\n\n  reinitializeMoveable() {\n    // Need to first clear current selection and then re-init moveable with slight delay\n    this.scene.clearCurrentSelection();\n    setTimeout(() => this.scene.initMoveable(true), 100);\n  }\n\n  // ??? or should this be on the element directly?\n  // are actions scoped to layers?\n  doAction = (action: LayerActionID, element: ElementState) => {\n    switch (action) {\n      case LayerActionID.Delete:\n        this.elements = this.elements.filter((e) => e !== element);\n        this.scene.save();\n        this.reinitializeMoveable();\n        break;\n      case LayerActionID.Duplicate:\n        if (element.item.id === 'group') {\n          console.log('Can not duplicate groups (yet)', action, element);\n          return;\n        }\n        const opts = cloneDeep(element.options);\n        if (element.anchor.top) {\n          opts.placement!.top! += 10;\n        }\n        if (element.anchor.left) {\n          opts.placement!.left! += 10;\n        }\n        if (element.anchor.bottom) {\n          opts.placement!.bottom! += 10;\n        }\n        if (element.anchor.right) {\n          opts.placement!.right! += 10;\n        }\n\n        const copy = new ElementState(element.item, opts, this);\n        copy.updateSize(element.width, element.height);\n        copy.updateData(this.scene.context);\n        this.elements.push(copy);\n        this.scene.save();\n        this.reinitializeMoveable();\n        break;\n      default:\n        console.log('DO action', action, element);\n        return;\n    }\n  };\n\n  render() {\n    return (\n      <div key={`${this.UID}/${this.revId}`} style={{ ...this.sizeStyle, ...this.dataStyle }}>\n        {this.elements.map((v) => v.render())}\n      </div>\n    );\n  }\n\n  /** Recursively visit all nodes */\n  visit(visitor: (v: ElementState) => void) {\n    super.visit(visitor);\n    for (const e of this.elements) {\n      visitor(e);\n    }\n  }\n\n  getSaveModel() {\n    return {\n      ...this.options,\n      elements: this.elements.map((v) => v.getSaveModel()),\n    };\n  }\n}\n","import { omit } from 'lodash';\nimport { FieldConfigSource, PanelPlugin } from '@grafana/data';\nimport { PanelModel } from '../../state/PanelModel';\nimport { DisplayMode } from './types';\nimport { GRID_CELL_HEIGHT, GRID_CELL_VMARGIN, GRID_COLUMN_COUNT } from 'app/core/constants';\n\nexport function calculatePanelSize(mode: DisplayMode, width: number, height: number, panel: PanelModel) {\n  if (mode === DisplayMode.Fill) {\n    return { width, height };\n  }\n  const panelPadding = 8 * 6;\n  const sidebarWidth = 60;\n\n  const colWidth = (window.innerWidth - sidebarWidth - GRID_CELL_VMARGIN * 4) / GRID_COLUMN_COUNT;\n  const pWidth = colWidth * panel.gridPos.w;\n  const pHeight = GRID_CELL_HEIGHT * panel.gridPos.h + panelPadding;\n  const scale = Math.min(width / pWidth, height / pHeight);\n\n  if (pWidth <= width && pHeight <= height) {\n    return {\n      width: pWidth,\n      height: pHeight,\n    };\n  }\n\n  return {\n    width: pWidth * scale,\n    height: pHeight * scale,\n  };\n}\n\nexport function supportsDataQuery(plugin: PanelPlugin | undefined | null): boolean {\n  return plugin?.meta.skipDataQuery === false;\n}\n\nexport const updateDefaultFieldConfigValue = (\n  config: FieldConfigSource,\n  name: string,\n  value: any,\n  isCustom?: boolean\n) => {\n  let defaults = { ...config.defaults };\n  const remove = value == null || value === '';\n\n  if (isCustom) {\n    if (defaults.custom) {\n      if (remove) {\n        defaults.custom = omit(defaults.custom, name);\n      } else {\n        defaults.custom = setOptionImmutably(defaults.custom, name, value);\n      }\n    } else if (!remove) {\n      defaults.custom = setOptionImmutably(defaults.custom, name, value);\n    }\n  } else if (remove) {\n    defaults = omit(defaults, name);\n  } else {\n    defaults = setOptionImmutably(defaults, name, value);\n  }\n\n  return {\n    ...config,\n    defaults,\n  };\n};\n\nexport function setOptionImmutably<T extends object>(options: T, path: string | string[], value: any): T {\n  const splat = !Array.isArray(path) ? path.split('.') : path;\n\n  const key = splat.shift()!;\n  if (key.endsWith(']')) {\n    const idx = key.lastIndexOf('[');\n    const index = +key.substring(idx + 1, key.length - 1);\n    const propKey = key.substr(0, idx);\n    let current = (options as Record<string, any>)[propKey];\n    const arr = Array.isArray(current) ? [...current] : [];\n    if (splat.length) {\n      current = arr[index];\n      if (current == null || typeof current !== 'object') {\n        current = {};\n      }\n      value = setOptionImmutably(current, splat, value);\n    }\n    arr[index] = value;\n    return { ...options, [propKey]: arr };\n  }\n\n  if (!splat.length) {\n    return { ...options, [key]: value };\n  }\n\n  let current = (options as Record<string, any>)[key];\n\n  if (current == null || typeof current !== 'object') {\n    current = {};\n  }\n\n  return { ...options, [key]: setOptionImmutably(current, splat, value) };\n}\n","import React, { PureComponent } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { Button, HorizontalGroup, Icon, IconButton, stylesFactory, ValuePicker } from '@grafana/ui';\nimport { AppEvents, GrafanaTheme, SelectableValue, StandardEditorProps } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\n\nimport { PanelOptions } from '../models.gen';\nimport { LayerActionID } from '../types';\nimport { CanvasElementOptions, canvasElementRegistry } from 'app/features/canvas';\nimport appEvents from 'app/core/app_events';\nimport { ElementState } from 'app/features/canvas/runtime/element';\nimport { notFoundItem } from 'app/features/canvas/elements/notFound';\nimport { GroupState } from 'app/features/canvas/runtime/group';\nimport { LayerEditorProps } from './layerEditor';\nimport { SelectionParams } from 'app/features/canvas/runtime/scene';\nimport { ShowConfirmModalEvent } from 'app/types/events';\n\ntype Props = StandardEditorProps<any, LayerEditorProps, PanelOptions>;\n\nexport class LayerElementListEditor extends PureComponent<Props> {\n  style = getLayerDragStyles(config.theme);\n\n  getScene = () => {\n    const { settings } = this.props.item;\n    if (!settings?.layer) {\n      return;\n    }\n    return settings.layer.scene;\n  };\n\n  onAddItem = (sel: SelectableValue<string>) => {\n    const { settings } = this.props.item;\n    if (!settings?.layer) {\n      return;\n    }\n    const { layer } = settings;\n\n    const item = canvasElementRegistry.getIfExists(sel.value) ?? notFoundItem;\n    const newElementOptions = item.getNewOptions() as CanvasElementOptions;\n    newElementOptions.type = item.id;\n    const newElement = new ElementState(item, newElementOptions, layer);\n    newElement.updateSize(newElement.width, newElement.height);\n    newElement.updateData(layer.scene.context);\n    layer.elements.push(newElement);\n    layer.scene.save();\n\n    layer.reinitializeMoveable();\n  };\n\n  onSelect = (item: any) => {\n    const { settings } = this.props.item;\n\n    if (settings?.scene) {\n      try {\n        let selection: SelectionParams = { targets: [] };\n        if (item instanceof GroupState) {\n          const targetElements: HTMLDivElement[] = [];\n          item.elements.forEach((element: ElementState) => {\n            targetElements.push(element.div!);\n          });\n\n          selection.targets = targetElements;\n          selection.group = item;\n          settings.scene.select(selection);\n        } else if (item instanceof ElementState) {\n          const targetElement = [item?.div!];\n          selection.targets = targetElement;\n          settings.scene.select(selection);\n        }\n      } catch (error) {\n        appEvents.emit(AppEvents.alertError, ['Unable to select element, try selecting element in panel instead']);\n      }\n    }\n  };\n\n  onClearSelection = () => {\n    const { settings } = this.props.item;\n\n    if (!settings?.layer) {\n      return;\n    }\n\n    const { layer } = settings;\n\n    layer.scene.clearCurrentSelection();\n  };\n\n  getRowStyle = (sel: boolean) => {\n    return sel ? `${this.style.row} ${this.style.sel}` : this.style.row;\n  };\n\n  onDragEnd = (result: DropResult) => {\n    if (!result.destination) {\n      return;\n    }\n\n    const { settings } = this.props.item;\n    if (!settings?.layer) {\n      return;\n    }\n\n    const { layer } = settings;\n\n    const count = layer.elements.length - 1;\n    const src = (result.source.index - count) * -1;\n    const dst = (result.destination.index - count) * -1;\n\n    layer.reorder(src, dst);\n  };\n\n  goUpLayer = () => {\n    const settings = this.props.item.settings;\n\n    if (!settings?.layer || !settings?.scene) {\n      return;\n    }\n\n    const { scene, layer } = settings;\n\n    if (layer.parent) {\n      scene.updateCurrentLayer(layer.parent);\n    }\n  };\n\n  private decoupleGroup = () => {\n    const settings = this.props.item.settings;\n\n    if (!settings?.layer) {\n      return;\n    }\n\n    const { layer } = settings;\n\n    layer.elements.forEach((element: ElementState) => {\n      layer.parent?.doAction(LayerActionID.Duplicate, element);\n    });\n    this.deleteGroup();\n  };\n\n  private onDecoupleGroup = () => {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Decouple group',\n        text: `Are you sure you want to decouple this group?`,\n        text2: 'This will remove the group and push nested elements in the next level up.',\n        confirmText: 'Yes',\n        yesText: 'Decouple',\n        onConfirm: async () => {\n          this.decoupleGroup();\n        },\n      })\n    );\n  };\n\n  private deleteGroup = () => {\n    const settings = this.props.item.settings;\n\n    if (!settings?.layer) {\n      return;\n    }\n\n    const { layer } = settings;\n\n    layer.parent?.doAction(LayerActionID.Delete, layer);\n    this.goUpLayer();\n  };\n\n  private onGroupSelection = () => {\n    const scene = this.getScene();\n    if (scene) {\n      scene.groupSelection();\n    } else {\n      console.warn('no scene!');\n    }\n  };\n\n  private onDeleteGroup = () => {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete group',\n        text: `Are you sure you want to delete this group?`,\n        text2: 'This will delete the group and all nested elements.',\n        icon: 'trash-alt',\n        confirmText: 'Delete',\n        yesText: 'Delete',\n        onConfirm: async () => {\n          this.deleteGroup();\n        },\n      })\n    );\n  };\n\n  render() {\n    const settings = this.props.item.settings;\n    if (!settings) {\n      return <div>No settings</div>;\n    }\n    const layer = settings.layer;\n    if (!layer) {\n      return <div>Missing layer?</div>;\n    }\n\n    const styles = this.style;\n    const selection: number[] = settings.selected ? settings.selected.map((v) => v.UID) : [];\n    return (\n      <>\n        {!layer.isRoot() && (\n          <>\n            <Button icon=\"angle-up\" size=\"sm\" variant=\"secondary\" onClick={this.goUpLayer}>\n              Go Up Level\n            </Button>\n            <Button size=\"sm\" variant=\"secondary\" onClick={() => this.onSelect(layer)}>\n              Select Group\n            </Button>\n            <Button size=\"sm\" variant=\"secondary\" onClick={() => this.onDecoupleGroup()}>\n              Decouple Group\n            </Button>\n            <Button size=\"sm\" variant=\"secondary\" onClick={() => this.onDeleteGroup()}>\n              Delete Group\n            </Button>\n          </>\n        )}\n        <DragDropContext onDragEnd={this.onDragEnd}>\n          <Droppable droppableId=\"droppable\">\n            {(provided, snapshot) => (\n              <div {...provided.droppableProps} ref={provided.innerRef}>\n                {(() => {\n                  // reverse order\n                  const rows: any = [];\n                  for (let i = layer.elements.length - 1; i >= 0; i--) {\n                    const element = layer.elements[i];\n                    rows.push(\n                      <Draggable key={element.UID} draggableId={`${element.UID}`} index={rows.length}>\n                        {(provided, snapshot) => (\n                          <div\n                            className={this.getRowStyle(selection.includes(element.UID))}\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            onMouseDown={() => this.onSelect(element)}\n                          >\n                            <span className={styles.typeWrapper}>{element.item.name}</span>\n                            <div className={styles.textWrapper}>\n                              &nbsp; {element.UID} ({i})\n                            </div>\n\n                            {element.item.id !== 'group' && (\n                              <>\n                                <IconButton\n                                  name=\"copy\"\n                                  title={'Duplicate'}\n                                  className={styles.actionIcon}\n                                  onClick={() => layer.doAction(LayerActionID.Duplicate, element)}\n                                  surface=\"header\"\n                                />\n\n                                <IconButton\n                                  name=\"trash-alt\"\n                                  title={'Remove'}\n                                  className={cx(styles.actionIcon, styles.dragIcon)}\n                                  onClick={() => layer.doAction(LayerActionID.Delete, element)}\n                                  surface=\"header\"\n                                />\n                                <Icon\n                                  title=\"Drag and drop to reorder\"\n                                  name=\"draggabledots\"\n                                  size=\"lg\"\n                                  className={styles.dragIcon}\n                                />\n                              </>\n                            )}\n                          </div>\n                        )}\n                      </Draggable>\n                    );\n                  }\n                  return rows;\n                })()}\n\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n        <br />\n\n        <HorizontalGroup>\n          <ValuePicker\n            icon=\"plus\"\n            label=\"Add item\"\n            variant=\"secondary\"\n            options={canvasElementRegistry.selectOptions().options}\n            onChange={this.onAddItem}\n            isFullWidth={false}\n          />\n          {selection.length > 0 && (\n            <Button size=\"sm\" variant=\"secondary\" onClick={this.onClearSelection}>\n              Clear Selection\n            </Button>\n          )}\n          {selection.length > 1 && (\n            <Button size=\"sm\" variant=\"secondary\" onClick={this.onGroupSelection}>\n              Group items\n            </Button>\n          )}\n        </HorizontalGroup>\n      </>\n    );\n  }\n}\n\nexport const getLayerDragStyles = stylesFactory((theme: GrafanaTheme) => ({\n  wrapper: css`\n    margin-bottom: ${theme.spacing.md};\n  `,\n  row: css`\n    padding: ${theme.spacing.xs} ${theme.spacing.sm};\n    border-radius: ${theme.border.radius.sm};\n    background: ${theme.colors.bg2};\n    min-height: ${theme.spacing.formInputHeight}px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: 3px;\n    cursor: pointer;\n\n    border: 1px solid ${theme.colors.formInputBorder};\n    &:hover {\n      border: 1px solid ${theme.colors.formInputBorderHover};\n    }\n  `,\n  sel: css`\n    border: 1px solid ${theme.colors.formInputBorderActive};\n    &:hover {\n      border: 1px solid ${theme.colors.formInputBorderActive};\n    }\n  `,\n  dragIcon: css`\n    cursor: drag;\n  `,\n  actionIcon: css`\n    color: ${theme.colors.textWeak};\n    &:hover {\n      color: ${theme.colors.text};\n    }\n  `,\n  typeWrapper: css`\n    color: ${theme.colors.textBlue};\n    margin-right: 5px;\n  `,\n  textWrapper: css`\n    display: flex;\n    align-items: center;\n    flex-grow: 1;\n    overflow: hidden;\n    margin-right: ${theme.spacing.sm};\n  `,\n}));\n","export enum LayerActionID {\n  Delete = 'delete',\n  Duplicate = 'duplicate',\n  MoveTop = 'move-top',\n  MoveBottom = 'move-bottom',\n}\n","import { useEffect, useLayoutEffect } from 'react';\nimport { isBrowser } from './misc/util';\nvar useIsomorphicLayoutEffect = isBrowser ? useLayoutEffect : useEffect;\nexport default useIsomorphicLayoutEffect;\n","import { useState } from 'react';\nimport useIsomorphicLayoutEffect from './useIsomorphicLayoutEffect';\nfunction useObservable(observable$, initialValue) {\n    var _a = useState(initialValue), value = _a[0], update = _a[1];\n    useIsomorphicLayoutEffect(function () {\n        var s = observable$.subscribe(update);\n        return function () { return s.unsubscribe(); };\n    }, [observable$]);\n    return value;\n}\nexport default useObservable;\n"],"names":["svgStrokePathClass","css","iconItem","id","name","description","display","props","width","height","data","path","svgStyle","fill","stroke","strokeColor","strokeWidth","src","style","className","undefined","getNewOptions","options","placement","config","mode","ResourceDimensionMode","fixed","prepareData","ctx","cfg","getResource","value","isString","getPublicOrAbsoluteUrl","getColor","color","registerOptionsUI","builder","category","addCustomEditor","editor","ResourceDimensionEditor","settings","resourceType","ColorDimensionEditor","defaultValue","addSliderInput","min","max","showIf","Boolean","NotFoundDisplay","PureComponent","render","this","JSON","stringify","notFoundItem","defaultSize","BackgroundImageSize","Align","VAlign","TextBoxDisplay","styles","getStyles","container","span","text","stylesFactory","theme","valign","align","size","textBoxItem","background","Left","Middle","getText","Center","TextDimensionEditor","addRadio","label","Right","Top","Bottom","addNumberInput","placeholder","DEFAULT_CANVAS_ELEMENT_CONFIG","type","canvasElementRegistry","Registry","counter","ElementState","constructor","item","parent","target","div","event","anchor","deltaX","delta","deltaY","top","bottom","left","right","dirLR","direction","dirTB","validatePlacement","w","h","updateSize","sizeStyle","position","updateData","revId","border","backgroundColor","image","v","backgroundImage","backgroundSize","backgroundRepeat","borderWidth","borderStyle","borderColor","backgroundOrigin","dataStyle","visit","visitor","onChange","trav","isRoot","scene","save","getSaveModel","ref","initElement","UID","groupItemDummy","GroupState","super","action","element","LayerActionID","elements","filter","e","reinitializeMoveable","console","log","opts","cloneDeep","copy","context","push","c","elem","reorder","startIndex","endIndex","result","Array","from","removed","splice","clearCurrentSelection","setTimeout","initMoveable","map","calculatePanelSize","panel","DisplayMode","pWidth","window","innerWidth","GRID_CELL_VMARGIN","GRID_COLUMN_COUNT","gridPos","pHeight","GRID_CELL_HEIGHT","scale","Math","supportsDataQuery","plugin","meta","skipDataQuery","updateDefaultFieldConfigValue","isCustom","defaults","remove","custom","omit","setOptionImmutably","splat","isArray","split","key","shift","endsWith","idx","lastIndexOf","index","substring","length","propKey","substr","current","arr","LayerElementListEditor","getLayerDragStyles","layer","sel","newElementOptions","newElement","selection","targets","targetElements","forEach","group","select","targetElement","error","appEvents","AppEvents","row","destination","count","source","dst","updateCurrentLayer","doAction","deleteGroup","ShowConfirmModalEvent","title","text2","confirmText","yesText","onConfirm","async","decoupleGroup","goUpLayer","getScene","groupSelection","warn","icon","selected","Button","variant","onClick","onSelect","onDecoupleGroup","onDeleteGroup","onDragEnd","droppableId","provided","snapshot","droppableProps","innerRef","rows","i","draggableId","getRowStyle","includes","draggableProps","dragHandleProps","onMouseDown","typeWrapper","textWrapper","IconButton","actionIcon","surface","cx","dragIcon","Icon","HorizontalGroup","ValuePicker","onAddItem","isFullWidth","onClearSelection","onGroupSelection","wrapper","spacing","md","xs","sm","radius","colors","bg2","formInputHeight","formInputBorder","formInputBorderHover","formInputBorderActive","textWeak","textBlue","useLayoutEffect","useEffect","observable$","initialValue","_a","useState","update","s","subscribe","unsubscribe"],"sourceRoot":""}