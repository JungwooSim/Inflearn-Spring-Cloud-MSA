{"version":3,"file":"mysqlPlugin.1f65f885c5a67f13d9d6.js","mappings":"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","sources":["webpack://grafana/./public/app/angular/components/sql_part/sql_part.ts","webpack://grafana/./public/app/features/datasources/utils/passwordHandlers.ts","webpack://grafana/./public/app/plugins/datasource/mysql/mysql_query_model.ts","webpack://grafana/./public/app/plugins/datasource/mysql/response_parser.ts","webpack://grafana/./public/app/plugins/datasource/mysql/datasource.ts","webpack://grafana/./public/app/plugins/datasource/mysql/meta_query.ts","webpack://grafana/./public/app/plugins/datasource/mysql/sql_part.ts","webpack://grafana/./public/app/plugins/datasource/mysql/query_ctrl.ts","webpack://grafana/./public/app/plugins/datasource/mysql/module.ts"],"sourcesContent":["import { clone } from 'lodash';\n\nexport class SqlPartDef {\n  type: string;\n  style: string;\n  label: string;\n  params: any[];\n  defaultParams: any[];\n  wrapOpen: string;\n  wrapClose: string;\n  separator: string;\n\n  constructor(options: any) {\n    this.type = options.type;\n    if (options.label) {\n      this.label = options.label;\n    } else {\n      this.label = this.type[0].toUpperCase() + this.type.substring(1) + ':';\n    }\n    this.style = options.style;\n    if (this.style === 'function') {\n      this.wrapOpen = '(';\n      this.wrapClose = ')';\n      this.separator = ', ';\n    } else {\n      this.wrapOpen = ' ';\n      this.wrapClose = ' ';\n      this.separator = ' ';\n    }\n    this.params = options.params;\n    this.defaultParams = options.defaultParams;\n  }\n}\n\nexport class SqlPart {\n  part: any;\n  def: SqlPartDef;\n  params: any[];\n  label: string;\n  name: string;\n  datatype: string;\n\n  constructor(part: any, def: any) {\n    this.part = part;\n    this.def = def;\n    if (!this.def) {\n      throw { message: 'Could not find sql part ' + part.type };\n    }\n\n    this.datatype = part.datatype;\n\n    if (part.name) {\n      this.name = part.name;\n      this.label = def.label + ' ' + part.name;\n    } else {\n      this.name = '';\n      this.label = def.label;\n    }\n\n    part.params = part.params || clone(this.def.defaultParams);\n    this.params = part.params;\n  }\n\n  updateParam(strValue: string, index: number) {\n    // handle optional parameters\n    if (strValue === '' && this.def.params[index].optional) {\n      this.params.splice(index, 1);\n    } else {\n      this.params[index] = strValue;\n    }\n\n    this.part.params = this.params;\n  }\n}\n","/**\n * Set of handlers for secure password field in Angular components. They handle backward compatibility with\n * passwords stored in plain text fields.\n */\n\nimport { SyntheticEvent } from 'react';\n\nexport enum PasswordFieldEnum {\n  Password = 'password',\n  BasicAuthPassword = 'basicAuthPassword',\n}\n\n/**\n * Basic shape for settings controllers in at the moment mostly angular data source plugins.\n */\nexport type Ctrl = {\n  current: {\n    secureJsonFields: {\n      [key: string]: boolean;\n    };\n    secureJsonData?: {\n      [key: string]: string;\n    };\n    password?: string;\n    basicAuthPassword?: string;\n  };\n};\n\nexport const createResetHandler = (ctrl: Ctrl, field: PasswordFieldEnum) => (\n  event: SyntheticEvent<HTMLInputElement>\n) => {\n  event.preventDefault();\n  // Reset also normal plain text password to remove it and only save it in secureJsonData.\n  ctrl.current[field] = undefined;\n  ctrl.current.secureJsonFields[field] = false;\n  ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n  ctrl.current.secureJsonData[field] = '';\n};\n\nexport const createChangeHandler = (ctrl: any, field: PasswordFieldEnum) => (\n  event: SyntheticEvent<HTMLInputElement>\n) => {\n  ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n  ctrl.current.secureJsonData[field] = event.currentTarget.value;\n};\n","import { find, map } from 'lodash';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { ScopedVars } from '@grafana/data';\n\nexport default class MySQLQueryModel {\n  target: any;\n  templateSrv: any;\n  scopedVars: any;\n\n  /** @ngInject */\n  constructor(target: any, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.format = target.format || 'time_series';\n    target.timeColumn = target.timeColumn || 'time';\n    target.metricColumn = target.metricColumn || 'none';\n\n    target.group = target.group || [];\n    target.where = target.where || [{ type: 'macro', name: '$__timeFilter', params: [] }];\n    target.select = target.select || [[{ type: 'column', params: ['value'] }]];\n\n    // handle pre query gui panels gracefully\n    if (!('rawQuery' in this.target)) {\n      if ('rawSql' in target) {\n        // pre query gui panel\n        target.rawQuery = true;\n      } else {\n        // new panel\n        target.rawQuery = false;\n      }\n    }\n\n    // give interpolateQueryStr access to this\n    this.interpolateQueryStr = this.interpolateQueryStr.bind(this);\n  }\n\n  // remove identifier quoting from identifier to use in metadata queries\n  unquoteIdentifier(value: string) {\n    if (value[0] === '\"' && value[value.length - 1] === '\"') {\n      return value.substring(1, value.length - 1).replace(/\"\"/g, '\"');\n    } else {\n      return value;\n    }\n  }\n\n  quoteIdentifier(value: string) {\n    return '\"' + value.replace(/\"/g, '\"\"') + '\"';\n  }\n\n  quoteLiteral(value: string) {\n    return \"'\" + value.replace(/'/g, \"''\") + \"'\";\n  }\n\n  escapeLiteral(value: any) {\n    return String(value).replace(/'/g, \"''\");\n  }\n\n  hasTimeGroup() {\n    return find(this.target.group, (g: any) => g.type === 'time');\n  }\n\n  hasMetricColumn() {\n    return this.target.metricColumn !== 'none';\n  }\n\n  interpolateQueryStr(value: string, variable: { multi: any; includeAll: any }, defaultFormatFn: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return this.escapeLiteral(value);\n    }\n\n    if (typeof value === 'string') {\n      return this.quoteLiteral(value);\n    }\n\n    const escapedValues = map(value, this.quoteLiteral);\n    return escapedValues.join(',');\n  }\n\n  render(interpolate?: boolean) {\n    const target = this.target;\n\n    // new query with no table set yet\n    if (!this.target.rawQuery && !('table' in this.target)) {\n      return '';\n    }\n\n    if (!target.rawQuery) {\n      target.rawSql = this.buildQuery();\n    }\n\n    if (interpolate) {\n      return this.templateSrv.replace(target.rawSql, this.scopedVars, this.interpolateQueryStr);\n    } else {\n      return target.rawSql;\n    }\n  }\n\n  hasUnixEpochTimecolumn() {\n    return ['int', 'bigint', 'double'].indexOf(this.target.timeColumnType) > -1;\n  }\n\n  buildTimeColumn(alias = true) {\n    const timeGroup = this.hasTimeGroup();\n    let query;\n    let macro = '$__timeGroup';\n\n    if (timeGroup) {\n      let args;\n      if (timeGroup.params.length > 1 && timeGroup.params[1] !== 'none') {\n        args = timeGroup.params.join(',');\n      } else {\n        args = timeGroup.params[0];\n      }\n      if (this.hasUnixEpochTimecolumn()) {\n        macro = '$__unixEpochGroup';\n      }\n      if (alias) {\n        macro += 'Alias';\n      }\n      query = macro + '(' + this.target.timeColumn + ',' + args + ')';\n    } else {\n      query = this.target.timeColumn;\n      if (alias) {\n        query += ' AS \"time\"';\n      }\n    }\n\n    return query;\n  }\n\n  buildMetricColumn() {\n    if (this.hasMetricColumn()) {\n      return this.target.metricColumn + ' AS metric';\n    }\n\n    return '';\n  }\n\n  buildValueColumns() {\n    let query = '';\n    for (const column of this.target.select) {\n      query += ',\\n  ' + this.buildValueColumn(column);\n    }\n\n    return query;\n  }\n\n  buildValueColumn(column: any) {\n    let query = '';\n\n    const columnName: any = find(column, (g: any) => g.type === 'column');\n    query = columnName.params[0];\n\n    const aggregate: any = find(column, (g: any) => g.type === 'aggregate');\n\n    if (aggregate) {\n      const func = aggregate.params[0];\n      query = func + '(' + query + ')';\n    }\n\n    const alias: any = find(column, (g: any) => g.type === 'alias');\n    if (alias) {\n      query += ' AS ' + this.quoteIdentifier(alias.params[0]);\n    }\n\n    return query;\n  }\n\n  buildWhereClause() {\n    let query = '';\n    const conditions = map(this.target.where, (tag, index) => {\n      switch (tag.type) {\n        case 'macro':\n          return tag.name + '(' + this.target.timeColumn + ')';\n          break;\n        case 'expression':\n          return tag.params.join(' ');\n          break;\n      }\n    });\n\n    if (conditions.length > 0) {\n      query = '\\nWHERE\\n  ' + conditions.join(' AND\\n  ');\n    }\n\n    return query;\n  }\n\n  buildGroupClause() {\n    let query = '';\n    let groupSection = '';\n\n    for (let i = 0; i < this.target.group.length; i++) {\n      const part = this.target.group[i];\n      if (i > 0) {\n        groupSection += ', ';\n      }\n      if (part.type === 'time') {\n        groupSection += '1';\n      } else {\n        groupSection += part.params[0];\n      }\n    }\n\n    if (groupSection.length) {\n      query = '\\nGROUP BY ' + groupSection;\n      if (this.hasMetricColumn()) {\n        query += ',2';\n      }\n    }\n    return query;\n  }\n\n  buildQuery() {\n    let query = 'SELECT';\n\n    query += '\\n  ' + this.buildTimeColumn();\n    if (this.hasMetricColumn()) {\n      query += ',\\n  ' + this.buildMetricColumn();\n    }\n    query += this.buildValueColumns();\n\n    query += '\\nFROM ' + this.target.table;\n\n    query += this.buildWhereClause();\n    query += this.buildGroupClause();\n\n    query += '\\nORDER BY ' + this.buildTimeColumn(false);\n\n    return query;\n  }\n}\n","import { AnnotationEvent, DataFrame, MetricFindValue } from '@grafana/data';\nimport { BackendDataSourceResponse, FetchResponse, toDataQueryResponse } from '@grafana/runtime';\n\nexport default class ResponseParser {\n  transformMetricFindResponse(raw: FetchResponse<BackendDataSourceResponse>): MetricFindValue[] {\n    const frames = toDataQueryResponse(raw).data as DataFrame[];\n\n    if (!frames || !frames.length) {\n      return [];\n    }\n\n    const frame = frames[0];\n\n    const values: MetricFindValue[] = [];\n    const textField = frame.fields.find((f) => f.name === '__text');\n    const valueField = frame.fields.find((f) => f.name === '__value');\n\n    if (textField && valueField) {\n      for (let i = 0; i < textField.values.length; i++) {\n        values.push({ text: '' + textField.values.get(i), value: '' + valueField.values.get(i) });\n      }\n    } else {\n      values.push(\n        ...frame.fields\n          .flatMap((f) => f.values.toArray())\n          .map((v) => ({\n            text: v,\n          }))\n      );\n    }\n\n    return Array.from(new Set(values.map((v) => v.text))).map((text) => ({\n      text,\n      value: values.find((v) => v.text === text)?.value,\n    }));\n  }\n\n  async transformAnnotationResponse(options: any, data: BackendDataSourceResponse): Promise<AnnotationEvent[]> {\n    const frames = toDataQueryResponse({ data: data }).data as DataFrame[];\n    if (!frames || !frames.length) {\n      return [];\n    }\n    const frame = frames[0];\n    const timeField = frame.fields.find((f) => f.name === 'time' || f.name === 'time_sec');\n\n    if (!timeField) {\n      throw new Error('Missing mandatory time column (with time column alias) in annotation query');\n    }\n\n    if (frame.fields.find((f) => f.name === 'title')) {\n      throw new Error('The title column for annotations is deprecated, now only a column named text is returned');\n    }\n\n    const timeEndField = frame.fields.find((f) => f.name === 'timeend');\n    const textField = frame.fields.find((f) => f.name === 'text');\n    const tagsField = frame.fields.find((f) => f.name === 'tags');\n\n    const list: AnnotationEvent[] = [];\n    for (let i = 0; i < frame.length; i++) {\n      const timeEnd = timeEndField && timeEndField.values.get(i) ? Math.floor(timeEndField.values.get(i)) : undefined;\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(timeField.values.get(i)),\n        timeEnd,\n        text: textField && textField.values.get(i) ? textField.values.get(i) : '',\n        tags:\n          tagsField && tagsField.values.get(i)\n            ? tagsField.values\n                .get(i)\n                .trim()\n                .split(/\\s*,\\s*/)\n            : [],\n      });\n    }\n\n    return list;\n  }\n}\n","import { map as _map } from 'lodash';\nimport { lastValueFrom, of } from 'rxjs';\nimport { catchError, map, mapTo } from 'rxjs/operators';\nimport { BackendDataSourceResponse, DataSourceWithBackend, FetchResponse, getBackendSrv } from '@grafana/runtime';\nimport { AnnotationEvent, DataSourceInstanceSettings, MetricFindValue, ScopedVars } from '@grafana/data';\n\nimport MySQLQueryModel from 'app/plugins/datasource/mysql/mysql_query_model';\nimport ResponseParser from './response_parser';\nimport { MySQLOptions, MySQLQuery, MysqlQueryForInterpolation } from './types';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { getSearchFilterScopedVar } from '../../../features/variables/utils';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { toTestingStatus } from '@grafana/runtime/src/utils/queryResponse';\n\nexport class MysqlDatasource extends DataSourceWithBackend<MySQLQuery, MySQLOptions> {\n  id: any;\n  name: any;\n  responseParser: ResponseParser;\n  queryModel: MySQLQueryModel;\n  interval: string;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<MySQLOptions>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super(instanceSettings);\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.responseParser = new ResponseParser();\n    this.queryModel = new MySQLQueryModel({});\n    const settingsData = instanceSettings.jsonData || ({} as MySQLOptions);\n    this.interval = settingsData.timeInterval || '1m';\n  }\n\n  interpolateVariable = (value: string | string[] | number, variable: any) => {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        const result = this.queryModel.quoteLiteral(value);\n        return result;\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _map(value, (v: any) => {\n      return this.queryModel.quoteLiteral(v);\n    });\n    return quotedValues.join(',');\n  };\n\n  interpolateVariablesInQueries(\n    queries: MysqlQueryForInterpolation[],\n    scopedVars: ScopedVars\n  ): MysqlQueryForInterpolation[] {\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map((query) => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.getRef(),\n          rawSql: this.templateSrv.replace(query.rawSql, scopedVars, this.interpolateVariable),\n          rawQuery: true,\n        };\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  filterQuery(query: MySQLQuery): boolean {\n    return !query.hide;\n  }\n\n  applyTemplateVariables(target: MySQLQuery, scopedVars: ScopedVars): Record<string, any> {\n    const queryModel = new MySQLQueryModel(target, this.templateSrv, scopedVars);\n    return {\n      refId: target.refId,\n      datasource: this.getRef(),\n      rawSql: queryModel.render(this.interpolateVariable as any),\n      format: target.format,\n    };\n  }\n\n  async annotationQuery(options: any): Promise<AnnotationEvent[]> {\n    if (!options.annotation.rawQuery) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasource: this.getRef(),\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return lastValueFrom(\n      getBackendSrv()\n        .fetch<BackendDataSourceResponse>({\n          url: '/api/ds/query',\n          method: 'POST',\n          data: {\n            from: options.range.from.valueOf().toString(),\n            to: options.range.to.valueOf().toString(),\n            queries: [query],\n          },\n          requestId: options.annotation.name,\n        })\n        .pipe(\n          map(\n            async (res: FetchResponse<BackendDataSourceResponse>) =>\n              await this.responseParser.transformAnnotationResponse(options, res.data)\n          )\n        )\n    );\n  }\n\n  metricFindQuery(query: string, optionalOptions: any): Promise<MetricFindValue[]> {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const rawSql = this.templateSrv.replace(\n      query,\n      getSearchFilterScopedVar({ query, wildcardChar: '%', options: optionalOptions }),\n      this.interpolateVariable\n    );\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasource: this.getRef(),\n      rawSql,\n      format: 'table',\n    };\n\n    const range = this.timeSrv.timeRange();\n\n    return lastValueFrom(\n      getBackendSrv()\n        .fetch<BackendDataSourceResponse>({\n          url: '/api/ds/query',\n          method: 'POST',\n          data: {\n            from: range.from.valueOf().toString(),\n            to: range.to.valueOf().toString(),\n            queries: [interpolatedQuery],\n          },\n          requestId: refId,\n        })\n        .pipe(\n          map((rsp) => {\n            return this.responseParser.transformMetricFindResponse(rsp);\n          }),\n          catchError((err) => {\n            return of([]);\n          })\n        )\n    );\n  }\n\n  testDatasource(): Promise<any> {\n    return lastValueFrom(\n      getBackendSrv()\n        .fetch({\n          url: '/api/ds/query',\n          method: 'POST',\n          data: {\n            from: '5m',\n            to: 'now',\n            queries: [\n              {\n                refId: 'A',\n                intervalMs: 1,\n                maxDataPoints: 1,\n                datasource: this.getRef(),\n                rawSql: 'SELECT 1',\n                format: 'table',\n              },\n            ],\n          },\n        })\n        .pipe(\n          mapTo({ status: 'success', message: 'Database Connection OK' }),\n          catchError((err) => {\n            return of(toTestingStatus(err));\n          })\n        )\n    );\n  }\n\n  targetContainsTemplate(target: any) {\n    let rawSql = '';\n\n    if (target.rawQuery) {\n      rawSql = target.rawSql;\n    } else {\n      const query = new MySQLQueryModel(target);\n      rawSql = query.buildQuery();\n    }\n\n    rawSql = rawSql.replace('$__', '');\n\n    return this.templateSrv.variableExists(rawSql);\n  }\n}\n","export class MysqlMetaQuery {\n  constructor(private target: any, private queryModel: any) {}\n\n  getOperators(datatype: string) {\n    switch (datatype) {\n      case 'double':\n      case 'float': {\n        return ['=', '!=', '<', '<=', '>', '>='];\n      }\n      case 'text':\n      case 'tinytext':\n      case 'mediumtext':\n      case 'longtext':\n      case 'varchar':\n      case 'char': {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN', 'LIKE', 'NOT LIKE'];\n      }\n      default: {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN'];\n      }\n    }\n  }\n\n  // quote identifier as literal to use in metadata queries\n  quoteIdentAsLiteral(value: string) {\n    return this.queryModel.quoteLiteral(this.queryModel.unquoteIdentifier(value));\n  }\n\n  findMetricTable() {\n    // query that returns first table found that has a timestamp(tz) column and a float column\n    const query = `\n  SELECT\n    table_name as table_name,\n    ( SELECT\n        column_name as column_name\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN ('timestamp', 'datetime')\n      ORDER BY ordinal_position LIMIT 1\n    ) AS time_column,\n    ( SELECT\n        column_name AS column_name\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN('float', 'int', 'bigint')\n      ORDER BY ordinal_position LIMIT 1\n    ) AS value_column\n  FROM information_schema.tables t\n  WHERE\n    t.table_schema = database() AND\n    EXISTS\n    ( SELECT 1\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN ('timestamp', 'datetime')\n    ) AND\n    EXISTS\n    ( SELECT 1\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN('float', 'int', 'bigint')\n    )\n  LIMIT 1\n;`;\n    return query;\n  }\n\n  buildTableConstraint(table: string) {\n    let query = '';\n\n    // check for schema qualified table\n    if (table.includes('.')) {\n      const parts = table.split('.');\n      query = 'table_schema = ' + this.quoteIdentAsLiteral(parts[0]);\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(parts[1]);\n      return query;\n    } else {\n      query = 'table_schema = database() AND table_name = ' + this.quoteIdentAsLiteral(table);\n\n      return query;\n    }\n  }\n\n  buildTableQuery() {\n    return 'SELECT table_name FROM information_schema.tables WHERE table_schema = database() ORDER BY table_name';\n  }\n\n  buildColumnQuery(type?: string) {\n    let query = 'SELECT column_name FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n\n    switch (type) {\n      case 'time': {\n        query += \" AND data_type IN ('timestamp','datetime','bigint','int','double','float')\";\n        break;\n      }\n      case 'metric': {\n        query += \" AND data_type IN ('text','tinytext','mediumtext','longtext','varchar','char')\";\n        break;\n      }\n      case 'value': {\n        query += \" AND data_type IN ('bigint','int','smallint','mediumint','tinyint','double','decimal','float')\";\n        query += ' AND column_name <> ' + this.quoteIdentAsLiteral(this.target.timeColumn);\n        break;\n      }\n      case 'group': {\n        query += \" AND data_type IN ('text','tinytext','mediumtext','longtext','varchar','char')\";\n        break;\n      }\n    }\n\n    query += ' ORDER BY column_name';\n\n    return query;\n  }\n\n  buildValueQuery(column: string) {\n    let query = 'SELECT DISTINCT QUOTE(' + column + ')';\n    query += ' FROM ' + this.target.table;\n    query += ' WHERE $__timeFilter(' + this.target.timeColumn + ')';\n    query += ' ORDER BY 1 LIMIT 100';\n    return query;\n  }\n\n  buildDatatypeQuery(column: string) {\n    let query = `\nSELECT data_type\nFROM information_schema.columns\nWHERE `;\n    query += ' table_name = ' + this.quoteIdentAsLiteral(this.target.table);\n    query += ' AND column_name = ' + this.quoteIdentAsLiteral(column);\n    return query;\n  }\n}\n","import { SqlPartDef, SqlPart } from 'app/angular/components/sql_part/sql_part';\n\nconst index: any[] = [];\n\nfunction createPart(part: any): any {\n  const def = index[part.type];\n  if (!def) {\n    return null;\n  }\n\n  return new SqlPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new SqlPartDef(options);\n}\n\nregister({\n  type: 'column',\n  style: 'label',\n  params: [{ type: 'column', dynamicLookup: true }],\n  defaultParams: ['value'],\n});\n\nregister({\n  type: 'expression',\n  style: 'expression',\n  label: 'Expr:',\n  params: [\n    { name: 'left', type: 'string', dynamicLookup: true },\n    { name: 'op', type: 'string', dynamicLookup: true },\n    { name: 'right', type: 'string', dynamicLookup: true },\n  ],\n  defaultParams: ['value', '=', 'value'],\n});\n\nregister({\n  type: 'macro',\n  style: 'label',\n  label: 'Macro:',\n  params: [],\n  defaultParams: [],\n});\n\nregister({\n  type: 'aggregate',\n  style: 'label',\n  params: [\n    {\n      name: 'name',\n      type: 'string',\n      options: ['avg', 'count', 'min', 'max', 'sum', 'stddev', 'variance'],\n    },\n  ],\n  defaultParams: ['avg'],\n});\n\nregister({\n  type: 'alias',\n  style: 'label',\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n});\n\nregister({\n  type: 'time',\n  style: 'function',\n  label: 'time',\n  params: [\n    {\n      name: 'interval',\n      type: 'interval',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'NULL', 'previous', '0'],\n    },\n  ],\n  defaultParams: ['$__interval', 'none'],\n});\n\nexport default {\n  create: createPart,\n};\n","import { clone, filter, find, findIndex, indexOf, map } from 'lodash';\nimport appEvents from 'app/core/app_events';\nimport { MysqlMetaQuery } from './meta_query';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { SqlPart } from 'app/angular/components/sql_part/sql_part';\nimport MySQLQueryModel from './mysql_query_model';\nimport sqlPart from './sql_part';\nimport { auto } from 'angular';\nimport { PanelEvents, QueryResultMeta } from '@grafana/data';\nimport { VariableWithMultiSupport } from 'app/features/variables/types';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { ShowConfirmModalEvent } from '../../../types/events';\n\nconst defaultQuery = `SELECT\n  UNIX_TIMESTAMP(<time_column>) as time_sec,\n  <value column> as value,\n  <series name column> as metric\nFROM <table name>\nWHERE $__timeFilter(time_column)\nORDER BY <time_column> ASC\n`;\n\nexport class MysqlQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  formats: any[];\n  lastQueryError?: string;\n  showHelp!: boolean;\n\n  queryModel: MySQLQueryModel;\n  metaBuilder: MysqlMetaQuery;\n  lastQueryMeta?: QueryResultMeta;\n  tableSegment: any;\n  whereAdd: any;\n  timeColumnSegment: any;\n  metricColumnSegment: any;\n  selectMenu: any[] = [];\n  selectParts: SqlPart[][] = [];\n  groupParts: SqlPart[] = [];\n  whereParts: SqlPart[] = [];\n  groupAdd: any;\n\n  /** @ngInject */\n  constructor(\n    $scope: any,\n    $injector: auto.IInjectorService,\n    private templateSrv: TemplateSrv,\n    private uiSegmentSrv: any\n  ) {\n    super($scope, $injector);\n\n    this.target = this.target;\n    this.queryModel = new MySQLQueryModel(this.target, templateSrv, this.panel.scopedVars);\n    this.metaBuilder = new MysqlMetaQuery(this.target, this.queryModel);\n    this.updateProjection();\n\n    this.formats = [\n      { text: 'Time series', value: 'time_series' },\n      { text: 'Table', value: 'table' },\n    ];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n        this.target.rawQuery = true;\n      } else {\n        this.target.rawSql = defaultQuery;\n        this.datasource.metricFindQuery(this.metaBuilder.findMetricTable()).then((result: any) => {\n          if (result.length > 0) {\n            this.target.table = result[0].text;\n            let segment = this.uiSegmentSrv.newSegment(this.target.table);\n            this.tableSegment.html = segment.html;\n            this.tableSegment.value = segment.value;\n\n            this.target.timeColumn = result[1].text;\n            segment = this.uiSegmentSrv.newSegment(this.target.timeColumn);\n            this.timeColumnSegment.html = segment.html;\n            this.timeColumnSegment.value = segment.value;\n\n            this.target.timeColumnType = 'timestamp';\n            this.target.select = [[{ type: 'column', params: [result[2].text] }]];\n            this.updateProjection();\n            this.updateRawSqlAndRefresh();\n          }\n        });\n      }\n    }\n\n    if (!this.target.table) {\n      this.tableSegment = uiSegmentSrv.newSegment({ value: 'select table', fake: true });\n    } else {\n      this.tableSegment = uiSegmentSrv.newSegment(this.target.table);\n    }\n\n    this.timeColumnSegment = uiSegmentSrv.newSegment(this.target.timeColumn);\n    this.metricColumnSegment = uiSegmentSrv.newSegment(this.target.metricColumn);\n\n    this.buildSelectMenu();\n    this.whereAdd = this.uiSegmentSrv.newPlusButton();\n    this.groupAdd = this.uiSegmentSrv.newPlusButton();\n\n    this.panelCtrl.events.on(PanelEvents.dataReceived, this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on(PanelEvents.dataError, this.onDataError.bind(this), $scope);\n  }\n\n  updateRawSqlAndRefresh() {\n    if (!this.target.rawQuery) {\n      this.target.rawSql = this.queryModel.buildQuery();\n    }\n\n    this.panelCtrl.refresh();\n  }\n\n  updateProjection() {\n    this.selectParts = map(this.target.select, (parts: any) => {\n      return map(parts, sqlPart.create).filter((n) => n);\n    });\n    this.whereParts = map(this.target.where, sqlPart.create).filter((n) => n);\n    this.groupParts = map(this.target.group, sqlPart.create).filter((n) => n);\n  }\n\n  updatePersistedParts() {\n    this.target.select = map(this.selectParts, (selectParts) => {\n      return map(selectParts, (part: any) => {\n        return { type: part.def.type, datatype: part.datatype, params: part.params };\n      });\n    });\n    this.target.where = map(this.whereParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, name: part.name, params: part.params };\n    });\n    this.target.group = map(this.groupParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, params: part.params };\n    });\n  }\n\n  buildSelectMenu() {\n    const aggregates = {\n      text: 'Aggregate Functions',\n      value: 'aggregate',\n      submenu: [\n        { text: 'Average', value: 'avg' },\n        { text: 'Count', value: 'count' },\n        { text: 'Maximum', value: 'max' },\n        { text: 'Minimum', value: 'min' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Standard deviation', value: 'stddev' },\n        { text: 'Variance', value: 'variance' },\n      ],\n    };\n\n    this.selectMenu.push(aggregates);\n    this.selectMenu.push({ text: 'Alias', value: 'alias' });\n    this.selectMenu.push({ text: 'Column', value: 'column' });\n  }\n\n  toggleEditorMode() {\n    if (this.target.rawQuery) {\n      appEvents.publish(\n        new ShowConfirmModalEvent({\n          title: 'Warning',\n          text2: 'Switching to query builder may overwrite your raw SQL.',\n          icon: 'exclamation-triangle',\n          yesText: 'Switch',\n          onConfirm: () => {\n            // This could be called from React, so wrap in $evalAsync.\n            // Will then either run as part of the current digest cycle or trigger a new one.\n            this.$scope.$evalAsync(() => {\n              this.target.rawQuery = !this.target.rawQuery;\n            });\n          },\n        })\n      );\n    } else {\n      // This could be called from React, so wrap in $evalAsync.\n      // Will then either run as part of the current digest cycle or trigger a new one.\n      this.$scope.$evalAsync(() => {\n        this.target.rawQuery = !this.target.rawQuery;\n      });\n    }\n  }\n\n  resetPlusButton(button: { html: any; value: any }) {\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    button.html = plusButton.html;\n    button.value = plusButton.value;\n  }\n\n  getTableSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildTableQuery())\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  tableChanged() {\n    this.target.table = this.tableSegment.value;\n    this.target.where = [];\n    this.target.group = [];\n    this.updateProjection();\n\n    const segment = this.uiSegmentSrv.newSegment('none');\n    this.metricColumnSegment.html = segment.html;\n    this.metricColumnSegment.value = segment.value;\n    this.target.metricColumn = 'none';\n\n    const task1 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('time')).then((result: any) => {\n      // check if time column is still valid\n      if (result.length > 0 && !find(result, (r: any) => r.text === this.target.timeColumn)) {\n        const segment = this.uiSegmentSrv.newSegment(result[0].text);\n        this.timeColumnSegment.html = segment.html;\n        this.timeColumnSegment.value = segment.value;\n      }\n      return this.timeColumnChanged(false);\n    });\n    const task2 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('value')).then((result: any) => {\n      if (result.length > 0) {\n        this.target.select = [[{ type: 'column', params: [result[0].text] }]];\n        this.updateProjection();\n      }\n    });\n\n    Promise.all([task1, task2]).then(() => {\n      this.updateRawSqlAndRefresh();\n    });\n  }\n\n  getTimeColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('time'))\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  timeColumnChanged(refresh?: boolean) {\n    this.target.timeColumn = this.timeColumnSegment.value;\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildDatatypeQuery(this.target.timeColumn))\n      .then((result: any) => {\n        if (result.length === 1) {\n          if (this.target.timeColumnType !== result[0].text) {\n            this.target.timeColumnType = result[0].text;\n          }\n          let partModel;\n          if (this.queryModel.hasUnixEpochTimecolumn()) {\n            partModel = sqlPart.create({ type: 'macro', name: '$__unixEpochFilter', params: [] });\n          } else {\n            partModel = sqlPart.create({ type: 'macro', name: '$__timeFilter', params: [] });\n          }\n\n          if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n            // replace current macro\n            this.whereParts[0] = partModel;\n          } else {\n            this.whereParts.splice(0, 0, partModel);\n          }\n        }\n\n        this.updatePersistedParts();\n        if (refresh !== false) {\n          this.updateRawSqlAndRefresh();\n        }\n      });\n  }\n\n  getMetricColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('metric'))\n      .then(this.transformToSegments({ addNone: true }))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  metricColumnChanged() {\n    this.target.metricColumn = this.metricColumnSegment.value;\n    this.updateRawSqlAndRefresh();\n  }\n\n  onDataReceived(dataList: any) {\n    this.lastQueryError = undefined;\n    this.lastQueryMeta = dataList[0]?.meta;\n  }\n\n  onDataError(err: any) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n\n  transformToSegments(config: any) {\n    return (results: any) => {\n      const segments = map(results, (segment) => {\n        return this.uiSegmentSrv.newSegment({\n          value: segment.text,\n          expandable: segment.expandable,\n        });\n      });\n\n      if (config.addTemplateVars) {\n        for (const variable of this.templateSrv.getVariables()) {\n          let value;\n          value = '$' + variable.name;\n          if (config.templateQuoter && ((variable as unknown) as VariableWithMultiSupport).multi === false) {\n            value = config.templateQuoter(value);\n          }\n\n          segments.unshift(\n            this.uiSegmentSrv.newSegment({\n              type: 'template',\n              value: value,\n              expandable: true,\n            })\n          );\n        }\n      }\n\n      if (config.addNone) {\n        segments.unshift(this.uiSegmentSrv.newSegment({ type: 'template', value: 'none', expandable: true }));\n      }\n\n      return segments;\n    };\n  }\n\n  findAggregateIndex(selectParts: any) {\n    return findIndex(selectParts, (p: any) => p.def.type === 'aggregate' || p.def.type === 'percentile');\n  }\n\n  findWindowIndex(selectParts: any) {\n    return findIndex(selectParts, (p: any) => p.def.type === 'window' || p.def.type === 'moving_window');\n  }\n\n  addSelectPart(selectParts: any[], item: { value: any }, subItem: { type: any; value: any }) {\n    let partType = item.value;\n    if (subItem && subItem.type) {\n      partType = subItem.type;\n    }\n    let partModel = sqlPart.create({ type: partType });\n    if (subItem) {\n      partModel.params[0] = subItem.value;\n    }\n    let addAlias = false;\n\n    switch (partType) {\n      case 'column':\n        const parts = map(selectParts, (part: any) => {\n          return sqlPart.create({ type: part.def.type, params: clone(part.params) });\n        });\n        this.selectParts.push(parts);\n        break;\n      case 'percentile':\n      case 'aggregate':\n        // add group by if no group by yet\n        if (this.target.group.length === 0) {\n          this.addGroup('time', '$__interval');\n        }\n        const aggIndex = this.findAggregateIndex(selectParts);\n        if (aggIndex !== -1) {\n          // replace current aggregation\n          selectParts[aggIndex] = partModel;\n        } else {\n          selectParts.splice(1, 0, partModel);\n        }\n        if (!find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'moving_window':\n      case 'window':\n        const windowIndex = this.findWindowIndex(selectParts);\n        if (windowIndex !== -1) {\n          // replace current window function\n          selectParts[windowIndex] = partModel;\n        } else {\n          const aggIndex = this.findAggregateIndex(selectParts);\n          if (aggIndex !== -1) {\n            selectParts.splice(aggIndex + 1, 0, partModel);\n          } else {\n            selectParts.splice(1, 0, partModel);\n          }\n        }\n        if (!find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'alias':\n        addAlias = true;\n        break;\n    }\n\n    if (addAlias) {\n      // set initial alias name to column name\n      partModel = sqlPart.create({ type: 'alias', params: [selectParts[0].params[0].replace(/\"/g, '')] });\n      if (selectParts[selectParts.length - 1].def.type === 'alias') {\n        selectParts[selectParts.length - 1] = partModel;\n      } else {\n        selectParts.push(partModel);\n      }\n    }\n\n    this.updatePersistedParts();\n    this.updateRawSqlAndRefresh();\n  }\n\n  removeSelectPart(selectParts: any, part: { def: { type: string } }) {\n    if (part.def.type === 'column') {\n      // remove all parts of column unless its last column\n      if (this.selectParts.length > 1) {\n        const modelsIndex = indexOf(this.selectParts, selectParts);\n        this.selectParts.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  handleSelectPartEvent(selectParts: any, part: { def: any }, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (part.def.type) {\n          // case 'aggregate':\n          //   return this.datasource\n          //     .metricFindQuery(this.metaBuilder.buildAggregateQuery())\n          //     .then(this.transformToSegments({}))\n          //     .catch(this.handleQueryError.bind(this));\n          case 'column':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery('value'))\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeSelectPart(selectParts, part);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  handleGroupPartEvent(part: any, index: any, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        return this.datasource\n          .metricFindQuery(this.metaBuilder.buildColumnQuery())\n          .then(this.transformToSegments({}))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeGroup(part, index);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  addGroup(partType: string, value: string) {\n    let params = [value];\n    if (partType === 'time') {\n      params = ['$__interval', 'none'];\n    }\n    const partModel = sqlPart.create({ type: partType, params: params });\n\n    if (partType === 'time') {\n      // put timeGroup at start\n      this.groupParts.splice(0, 0, partModel);\n    } else {\n      this.groupParts.push(partModel);\n    }\n\n    // add aggregates when adding group by\n    for (const selectParts of this.selectParts) {\n      if (!selectParts.some((part) => part.def.type === 'aggregate')) {\n        const aggregate = sqlPart.create({ type: 'aggregate', params: ['avg'] });\n        selectParts.splice(1, 0, aggregate);\n        if (!selectParts.some((part) => part.def.type === 'alias')) {\n          const alias = sqlPart.create({ type: 'alias', params: [selectParts[0].part.params[0]] });\n          selectParts.push(alias);\n        }\n      }\n    }\n\n    this.updatePersistedParts();\n  }\n\n  removeGroup(part: { def: { type: string } }, index: number) {\n    if (part.def.type === 'time') {\n      // remove aggregations\n      this.selectParts = map(this.selectParts, (s: any) => {\n        return filter(s, (part: any) => {\n          if (part.def.type === 'aggregate' || part.def.type === 'percentile') {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.groupParts.splice(index, 1);\n    this.updatePersistedParts();\n  }\n\n  handleWherePartEvent(whereParts: any, part: any, evt: any, index: any) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (evt.param.name) {\n          case 'left':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'right':\n            if (['int', 'bigint', 'double', 'datetime'].indexOf(part.datatype) > -1) {\n              // don't do value lookups for numerical fields\n              return Promise.resolve([]);\n            } else {\n              return this.datasource\n                .metricFindQuery(this.metaBuilder.buildValueQuery(part.params[0]))\n                .then(\n                  this.transformToSegments({\n                    addTemplateVars: true,\n                    templateQuoter: (v: string) => {\n                      return this.queryModel.quoteLiteral(v);\n                    },\n                  })\n                )\n                .catch(this.handleQueryError.bind(this));\n            }\n          case 'op':\n            return Promise.resolve(this.uiSegmentSrv.newOperators(this.metaBuilder.getOperators(part.datatype)));\n          default:\n            return Promise.resolve([]);\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.datasource.metricFindQuery(this.metaBuilder.buildDatatypeQuery(part.params[0])).then((d: any) => {\n          if (d.length === 1) {\n            part.datatype = d[0].text;\n          }\n        });\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        // remove element\n        whereParts.splice(index, 1);\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  getWhereOptions() {\n    const options = [];\n    if (this.queryModel.hasUnixEpochTimecolumn()) {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__unixEpochFilter' }));\n    } else {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__timeFilter' }));\n    }\n    options.push(this.uiSegmentSrv.newSegment({ type: 'expression', value: 'Expression' }));\n    return Promise.resolve(options);\n  }\n\n  addWhereAction(part: any, index: number) {\n    switch (this.whereAdd.type) {\n      case 'macro': {\n        const partModel = sqlPart.create({ type: 'macro', name: this.whereAdd.value, params: [] });\n        if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n          // replace current macro\n          this.whereParts[0] = partModel;\n        } else {\n          this.whereParts.splice(0, 0, partModel);\n        }\n        break;\n      }\n      default: {\n        this.whereParts.push(sqlPart.create({ type: 'expression', params: ['value', '=', 'value'] }));\n      }\n    }\n\n    this.updatePersistedParts();\n    this.resetPlusButton(this.whereAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  getGroupOptions() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('group'))\n      .then((tags: any) => {\n        const options = [];\n        if (!this.queryModel.hasTimeGroup()) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'time', value: 'time($__interval,none)' }));\n        }\n        for (const tag of tags) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'column', value: tag.text }));\n        }\n        return options;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  addGroupAction() {\n    switch (this.groupAdd.value) {\n      default: {\n        this.addGroup(this.groupAdd.type, this.groupAdd.value);\n      }\n    }\n\n    this.resetPlusButton(this.groupAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  handleQueryError(err: any): any[] {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n}\n","import { MysqlDatasource } from './datasource';\nimport { MysqlQueryCtrl } from './query_ctrl';\nimport {\n  createChangeHandler,\n  createResetHandler,\n  PasswordFieldEnum,\n} from '../../../features/datasources/utils/passwordHandlers';\nimport { MySQLQuery } from './types';\nimport { DataSourcePlugin } from '@grafana/data';\n\nclass MysqlConfigCtrl {\n  static templateUrl = 'partials/config.html';\n  current: any;\n  onPasswordReset: ReturnType<typeof createResetHandler>;\n  onPasswordChange: ReturnType<typeof createChangeHandler>;\n\n  constructor() {\n    this.onPasswordReset = createResetHandler(this, PasswordFieldEnum.Password);\n    this.onPasswordChange = createChangeHandler(this, PasswordFieldEnum.Password);\n  }\n}\n\nconst defaultQuery = `SELECT\n    UNIX_TIMESTAMP(<time_column>) as time_sec,\n    <text_column> as text,\n    <tags_column> as tags\n  FROM <table name>\n  WHERE $__timeFilter(time_column)\n  ORDER BY <time_column> ASC\n  LIMIT 100\n  `;\n\nclass MysqlAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n\n  declare annotation: any;\n\n  /** @ngInject */\n  constructor($scope: any) {\n    this.annotation = $scope.ctrl.annotation;\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\n  }\n}\n\nexport {\n  MysqlDatasource,\n  MysqlDatasource as Datasource,\n  MysqlQueryCtrl as QueryCtrl,\n  MysqlConfigCtrl as ConfigCtrl,\n  MysqlAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n\nexport const plugin = new DataSourcePlugin<MysqlDatasource, MySQLQuery>(MysqlDatasource)\n  .setQueryCtrl(MysqlQueryCtrl)\n  .setConfigCtrl(MysqlConfigCtrl)\n  .setAnnotationQueryCtrl(MysqlAnnotationsQueryCtrl);\n"],"names":["SqlPartDef","constructor","options","this","type","label","toUpperCase","substring","style","wrapOpen","wrapClose","separator","params","defaultParams","SqlPart","part","def","message","datatype","name","clone","updateParam","strValue","index","optional","splice","PasswordFieldEnum","createResetHandler","ctrl","field","event","preventDefault","current","undefined","secureJsonFields","secureJsonData","createChangeHandler","currentTarget","value","MySQLQueryModel","target","templateSrv","scopedVars","format","timeColumn","metricColumn","group","where","select","rawQuery","interpolateQueryStr","bind","unquoteIdentifier","length","replace","quoteIdentifier","quoteLiteral","escapeLiteral","String","hasTimeGroup","find","g","hasMetricColumn","variable","defaultFormatFn","multi","includeAll","map","join","render","interpolate","rawSql","buildQuery","hasUnixEpochTimecolumn","indexOf","timeColumnType","buildTimeColumn","alias","timeGroup","query","macro","args","buildMetricColumn","buildValueColumns","column","buildValueColumn","aggregate","buildWhereClause","conditions","tag","buildGroupClause","groupSection","i","table","ResponseParser","transformMetricFindResponse","raw","frames","toDataQueryResponse","data","frame","values","textField","fields","f","valueField","push","text","get","flatMap","toArray","v","Array","from","Set","timeField","Error","timeEndField","tagsField","list","timeEnd","Math","floor","annotation","time","tags","trim","split","MysqlDatasource","DataSourceWithBackend","instanceSettings","getTemplateSrv","timeSrv","getTimeSrv","super","queryModel","_map","id","responseParser","settingsData","jsonData","interval","timeInterval","interpolateVariablesInQueries","queries","expandedQueries","datasource","getRef","interpolateVariable","filterQuery","hide","applyTemplateVariables","refId","Promise","reject","lastValueFrom","getBackendSrv","fetch","url","method","range","valueOf","toString","to","requestId","pipe","async","transformAnnotationResponse","res","metricFindQuery","optionalOptions","getSearchFilterScopedVar","wildcardChar","interpolatedQuery","timeRange","rsp","catchError","err","of","testDatasource","intervalMs","maxDataPoints","mapTo","status","toTestingStatus","targetContainsTemplate","variableExists","MysqlMetaQuery","getOperators","quoteIdentAsLiteral","findMetricTable","buildTableConstraint","includes","parts","buildTableQuery","buildColumnQuery","buildValueQuery","buildDatatypeQuery","register","dynamicLookup","quote","create","MysqlQueryCtrl","QueryCtrl","$scope","$injector","uiSegmentSrv","panel","metaBuilder","updateProjection","formats","panelCtrl","then","result","segment","newSegment","tableSegment","html","timeColumnSegment","updateRawSqlAndRefresh","fake","metricColumnSegment","buildSelectMenu","whereAdd","newPlusButton","groupAdd","events","on","PanelEvents","onDataReceived","onDataError","refresh","selectParts","sqlPart","filter","n","whereParts","groupParts","updatePersistedParts","selectMenu","submenu","toggleEditorMode","appEvents","ShowConfirmModalEvent","title","text2","icon","yesText","onConfirm","$evalAsync","resetPlusButton","button","plusButton","getTableSegments","transformToSegments","catch","handleQueryError","tableChanged","task1","r","timeColumnChanged","task2","all","getTimeColumnSegments","partModel","getMetricColumnSegments","addNone","metricColumnChanged","dataList","lastQueryError","lastQueryMeta","meta","results","queryRes","error","config","segments","expandable","addTemplateVars","getVariables","templateQuoter","unshift","findAggregateIndex","findIndex","p","findWindowIndex","addSelectPart","item","subItem","partType","addAlias","addGroup","aggIndex","windowIndex","removeSelectPart","modelsIndex","partIndex","handleSelectPartEvent","evt","resolve","handleGroupPartEvent","removeGroup","some","s","handleWherePartEvent","param","newOperators","d","getWhereOptions","addWhereAction","getGroupOptions","addGroupAction","MysqlConfigCtrl","onPasswordReset","onPasswordChange","MysqlAnnotationsQueryCtrl","plugin","DataSourcePlugin","setQueryCtrl","setConfigCtrl","setAnnotationQueryCtrl"],"sourceRoot":""}