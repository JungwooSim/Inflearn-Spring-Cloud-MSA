{"version":3,"file":"FolderPermissions.1f65f885c5a67f13d9d6.js","mappings":"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","sources":["webpack://grafana/./public/app/features/folders/FolderPermissions.tsx","webpack://grafana/./public/app/features/folders/state/actions.ts","webpack://grafana/./public/app/features/folders/state/navModel.ts"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport Page from 'app/core/components/Page/Page';\nimport { Tooltip, Icon, Button } from '@grafana/ui';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types';\nimport { DashboardAcl, PermissionLevel, NewDashboardAclItem } from 'app/types/acl';\nimport {\n  getFolderByUid,\n  getFolderPermissions,\n  updateFolderPermission,\n  removeFolderPermission,\n  addFolderPermission,\n} from './state/actions';\nimport { getLoadingNav } from './state/navModel';\nimport PermissionList from 'app/core/components/PermissionList/PermissionList';\nimport AddPermission from 'app/core/components/PermissionList/AddPermission';\nimport PermissionsInfo from 'app/core/components/PermissionList/PermissionsInfo';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nexport interface OwnProps extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nconst mapStateToProps = (state: StoreState, props: OwnProps) => {\n  const uid = props.match.params.uid;\n  return {\n    navModel: getNavModel(state.navIndex, `folder-permissions-${uid}`, getLoadingNav(1)),\n    folderUid: uid,\n    folder: state.folder,\n  };\n};\n\nconst mapDispatchToProps = {\n  getFolderByUid,\n  getFolderPermissions,\n  updateFolderPermission,\n  removeFolderPermission,\n  addFolderPermission,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport interface State {\n  isAdding: boolean;\n}\n\nexport class FolderPermissions extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isAdding: false,\n    };\n  }\n\n  componentDidMount() {\n    this.props.getFolderByUid(this.props.folderUid);\n    this.props.getFolderPermissions(this.props.folderUid);\n  }\n\n  onOpenAddPermissions = () => {\n    this.setState({ isAdding: true });\n  };\n\n  onRemoveItem = (item: DashboardAcl) => {\n    this.props.removeFolderPermission(item);\n  };\n\n  onPermissionChanged = (item: DashboardAcl, level: PermissionLevel) => {\n    this.props.updateFolderPermission(item, level);\n  };\n\n  onAddPermission = (newItem: NewDashboardAclItem) => {\n    return this.props.addFolderPermission(newItem);\n  };\n\n  onCancelAddPermission = () => {\n    this.setState({ isAdding: false });\n  };\n\n  render() {\n    const { navModel, folder } = this.props;\n    const { isAdding } = this.state;\n\n    if (folder.id === 0) {\n      return (\n        <Page navModel={navModel}>\n          <Page.Contents isLoading={true}>\n            <span />\n          </Page.Contents>\n        </Page>\n      );\n    }\n\n    const folderInfo = { title: folder.title, url: folder.url, id: folder.id };\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents>\n          <div className=\"page-action-bar\">\n            <h3 className=\"page-sub-heading\">Folder Permissions</h3>\n            <Tooltip placement=\"auto\" content={<PermissionsInfo />}>\n              <Icon className=\"icon--has-hover page-sub-heading-icon\" name=\"question-circle\" />\n            </Tooltip>\n            <div className=\"page-action-bar__spacer\" />\n            <Button className=\"pull-right\" onClick={this.onOpenAddPermissions} disabled={isAdding}>\n              Add Permission\n            </Button>\n          </div>\n          <SlideDown in={isAdding}>\n            <AddPermission onAddPermission={this.onAddPermission} onCancel={this.onCancelAddPermission} />\n          </SlideDown>\n          <PermissionList\n            items={folder.permissions}\n            onRemoveItem={this.onRemoveItem}\n            onPermissionChanged={this.onPermissionChanged}\n            isFetching={false}\n            folderInfo={folderInfo}\n          />\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(FolderPermissions);\n","import { AppEvents, locationUtil } from '@grafana/data';\nimport { getBackendSrv, locationService } from '@grafana/runtime';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { FolderState, ThunkResult } from 'app/types';\nimport { DashboardAcl, DashboardAclUpdateDTO, NewDashboardAclItem, PermissionLevel } from 'app/types/acl';\nimport { updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport appEvents from 'app/core/app_events';\nimport { loadFolder, loadFolderPermissions } from './reducers';\n\nexport function getFolderByUid(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    const folder = await backendSrv.getFolderByUid(uid);\n    dispatch(loadFolder(folder));\n    dispatch(updateNavIndex(buildNavModel(folder)));\n  };\n}\n\nexport function saveFolder(folder: FolderState): ThunkResult<void> {\n  return async (dispatch) => {\n    const res = await backendSrv.put(`/api/folders/${folder.uid}`, {\n      title: folder.title,\n      version: folder.version,\n    });\n\n    // this should be redux action at some point\n    appEvents.emit(AppEvents.alertSuccess, ['Folder saved']);\n    locationService.push(`${res.url}/settings`);\n  };\n}\n\nexport function deleteFolder(uid: string): ThunkResult<void> {\n  return async () => {\n    await backendSrv.delete(`/api/folders/${uid}?forceDeleteRules=false`);\n    locationService.push('/dashboards');\n  };\n}\n\nexport function getFolderPermissions(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    const permissions = await backendSrv.get(`/api/folders/${uid}/permissions`);\n    dispatch(loadFolderPermissions(permissions));\n  };\n}\n\nfunction toUpdateItem(item: DashboardAcl): DashboardAclUpdateDTO {\n  return {\n    userId: item.userId,\n    teamId: item.teamId,\n    role: item.role,\n    permission: item.permission,\n  };\n}\n\nexport function updateFolderPermission(itemToUpdate: DashboardAcl, level: PermissionLevel): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n\n      const updated = toUpdateItem(item);\n\n      // if this is the item we want to update, update it's permission\n      if (itemToUpdate === item) {\n        updated.permission = level;\n      }\n\n      itemsToUpdate.push(updated);\n    }\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function removeFolderPermission(itemToDelete: DashboardAcl): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited || item === itemToDelete) {\n        continue;\n      }\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function addFolderPermission(newItem: NewDashboardAclItem): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    itemsToUpdate.push({\n      userId: newItem.userId,\n      teamId: newItem.teamId,\n      role: newItem.role,\n      permission: newItem.permission,\n    });\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function createNewFolder(folderName: string): ThunkResult<void> {\n  return async () => {\n    const newFolder = await getBackendSrv().post('/api/folders', { title: folderName });\n    appEvents.emit(AppEvents.alertSuccess, ['Folder Created', 'OK']);\n    locationService.push(locationUtil.stripBaseFromUrl(newFolder.url));\n  };\n}\n","import { NavModel, NavModelItem } from '@grafana/data';\n\nimport { FolderDTO } from 'app/types';\n\nexport function buildNavModel(folder: FolderDTO): NavModelItem {\n  const model = {\n    icon: 'folder',\n    id: 'manage-folder',\n    subTitle: 'Manage folder dashboards and permissions',\n    url: '',\n    text: folder.title,\n    breadcrumbs: [{ title: 'Dashboards', url: 'dashboards' }],\n    children: [\n      {\n        active: false,\n        icon: 'apps',\n        id: `folder-dashboards-${folder.uid}`,\n        text: 'Dashboards',\n        url: folder.url,\n      },\n    ],\n  };\n\n  model.children.push({\n    active: false,\n    icon: 'library-panel',\n    id: `folder-library-panels-${folder.uid}`,\n    text: 'Panels',\n    url: `${folder.url}/library-panels`,\n  });\n\n  if (folder.canAdmin) {\n    model.children.push({\n      active: false,\n      icon: 'lock',\n      id: `folder-permissions-${folder.uid}`,\n      text: 'Permissions',\n      url: `${folder.url}/permissions`,\n    });\n  }\n\n  if (folder.canSave) {\n    model.children.push({\n      active: false,\n      icon: 'cog',\n      id: `folder-settings-${folder.uid}`,\n      text: 'Settings',\n      url: `${folder.url}/settings`,\n    });\n  }\n\n  return model;\n}\n\nexport function getLoadingNav(tabIndex: number): NavModel {\n  const main = buildNavModel({\n    id: 1,\n    uid: 'loading',\n    title: 'Loading',\n    url: 'url',\n    canSave: true,\n    canEdit: true,\n    canAdmin: true,\n    version: 0,\n  });\n\n  main.children![tabIndex].active = true;\n\n  return {\n    main: main,\n    node: main.children![tabIndex],\n  };\n}\n"],"names":["mapDispatchToProps","getFolderByUid","getFolderPermissions","updateFolderPermission","removeFolderPermission","addFolderPermission","connector","connect","state","props","uid","match","params","navModel","getNavModel","navIndex","getLoadingNav","folderUid","folder","FolderPermissions","PureComponent","constructor","super","this","setState","isAdding","item","level","newItem","componentDidMount","render","id","isLoading","folderInfo","title","url","className","Tooltip","placement","content","Icon","name","Button","onClick","onOpenAddPermissions","disabled","in","onAddPermission","onCancel","onCancelAddPermission","items","permissions","onRemoveItem","onPermissionChanged","isFetching","async","backendSrv","dispatch","loadFolder","updateNavIndex","buildNavModel","saveFolder","res","version","appEvents","AppEvents","locationService","deleteFolder","loadFolderPermissions","toUpdateItem","userId","teamId","role","permission","itemToUpdate","getStore","itemsToUpdate","inherited","updated","push","itemToDelete","createNewFolder","folderName","newFolder","getBackendSrv","post","locationUtil","model","icon","subTitle","text","breadcrumbs","children","active","canAdmin","canSave","tabIndex","main","canEdit","node"],"sourceRoot":""}