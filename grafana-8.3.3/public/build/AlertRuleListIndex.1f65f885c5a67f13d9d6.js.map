{"version":3,"file":"AlertRuleListIndex.1f65f885c5a67f13d9d6.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useCleanup.ts","webpack://grafana/./public/app/core/hooks/useQueryParams.ts","webpack://grafana/./public/app/features/alerting/AlertRuleItem.tsx","webpack://grafana/./public/app/features/alerting/state/selectors.ts","webpack://grafana/./public/app/features/alerting/AlertHowToModal.tsx","webpack://grafana/./public/app/features/alerting/components/UnifiedAlertingPromotion.tsx","webpack://grafana/./public/app/features/alerting/AlertRuleList.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/NoRulesCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useFilteredRules.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/StateColoredText.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleStats.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/EditCloudGroupModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/CloudRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/GrafanaRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListStateSection.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListErrors.tsx","webpack://grafana/./public/app/features/alerting/unified/RuleList.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListGroupView.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListStateView.tsx","webpack://grafana/./public/app/features/alerting/AlertRuleListIndex.tsx","webpack://grafana/./public/app/features/alerting/state/actions.ts","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/DynamicTableWithGuidelines.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesTable.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useHasRuler.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\n\nexport function useCleanup<T>(stateSelector: StateSelector<T>) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(stateSelector);\n  selectorRef.current = stateSelector;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ stateSelector: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","import { UrlQueryMap } from '@grafana/data';\nimport { locationSearchToObject, locationService } from '@grafana/runtime';\nimport { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport function useQueryParams(): [UrlQueryMap, (values: UrlQueryMap, replace?: boolean) => void] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => locationSearchToObject(search || ''), [search]);\n  const update = useCallback(\n    (values: UrlQueryMap, replace?: boolean) => setImmediate(() => locationService.partial(values, replace)),\n    []\n  );\n  return [queryParams, update];\n}\n","import React, { useCallback } from 'react';\n// @ts-ignore\nimport Highlighter from 'react-highlight-words';\nimport { Icon, IconName, Button, LinkButton, Card } from '@grafana/ui';\nimport { AlertRule } from '../../types';\n\nexport interface Props {\n  rule: AlertRule;\n  search: string;\n  onTogglePause: () => void;\n}\n\nconst AlertRuleItem = ({ rule, search, onTogglePause }: Props) => {\n  const ruleUrl = `${rule.url}?editPanel=${rule.panelId}&tab=alert`;\n  const renderText = useCallback(\n    (text) => (\n      <Highlighter\n        key={text}\n        highlightClassName=\"highlight-search-match\"\n        textToHighlight={text}\n        searchWords={[search]}\n      />\n    ),\n    [search]\n  );\n\n  return (\n    <Card heading={<a href={ruleUrl}>{renderText(rule.name)}</a>}>\n      <Card.Figure>\n        <Icon size=\"xl\" name={rule.stateIcon as IconName} className={`alert-rule-item__icon ${rule.stateClass}`} />\n      </Card.Figure>\n      <Card.Meta>\n        <span key=\"state\">\n          <span key=\"text\" className={`${rule.stateClass}`}>\n            {renderText(rule.stateText)}{' '}\n          </span>\n          for {rule.stateAge}\n        </span>\n        {rule.info ? renderText(rule.info) : null}\n      </Card.Meta>\n      <Card.Actions>\n        <Button\n          key=\"play\"\n          variant=\"secondary\"\n          icon={rule.state === 'paused' ? 'play' : 'pause'}\n          onClick={onTogglePause}\n        >\n          {rule.state === 'paused' ? 'Resume' : 'Pause'}\n        </Button>\n        <LinkButton key=\"edit\" variant=\"secondary\" href={ruleUrl} icon=\"cog\">\n          Edit alert\n        </LinkButton>\n      </Card.Actions>\n    </Card>\n  );\n};\n\nexport default AlertRuleItem;\n","import { AlertRule, AlertRulesState, NotificationChannelState, StoreState } from 'app/types';\n\nexport const getSearchQuery = (state: AlertRulesState) => state.searchQuery;\n\nexport const getAlertRuleItems = (state: StoreState): AlertRule[] => {\n  const regex = new RegExp(state.alertRules.searchQuery, 'i');\n\n  return state.alertRules.items.filter((item) => {\n    return regex.test(item.name) || regex.test(item.stateText) || regex.test(item.info!);\n  });\n};\n\nexport const getNotificationChannel = (state: NotificationChannelState, channelId: number) => {\n  if (state.notificationChannel.id === channelId) {\n    return state.notificationChannel;\n  }\n\n  return null;\n};\n","import { Modal, VerticalGroup } from '@grafana/ui';\nimport React from 'react';\n\nexport interface AlertHowToModalProps {\n  onDismiss: () => void;\n}\n\nexport function AlertHowToModal({ onDismiss }: AlertHowToModalProps): JSX.Element {\n  return (\n    <Modal title=\"Adding an Alert\" isOpen onDismiss={onDismiss} onClickBackdrop={onDismiss}>\n      <VerticalGroup spacing=\"sm\">\n        <img src=\"public/img/alert_howto_new.png\" alt=\"link to how to alert image\" />\n        <p>\n          Alerts are added and configured in the Alert tab of any dashboard graph panel, letting you build and visualize\n          an alert using existing queries.\n        </p>\n        <p>Remember to save the dashboard to persist your alert rule changes.</p>\n      </VerticalGroup>\n    </Modal>\n  );\n}\n","import React, { FC } from 'react';\n\nimport { Alert } from '@grafana/ui';\nimport { useLocalStorage } from 'react-use';\n\nexport const LOCAL_STORAGE_KEY = 'grafana.legacyalerting.unifiedalertingpromo';\n\nconst UnifiedAlertingPromotion: FC<{}> = () => {\n  const [showUnifiedAlertingPromotion, setShowUnifiedAlertingPromotion] = useLocalStorage<boolean>(\n    LOCAL_STORAGE_KEY,\n    true\n  );\n\n  if (!showUnifiedAlertingPromotion) {\n    return null;\n  }\n\n  return (\n    <Alert\n      severity=\"info\"\n      title=\"Try out the Grafana 8 alerting!\"\n      onRemove={() => setShowUnifiedAlertingPromotion(false)}\n    >\n      <p>\n        You are using the legacy Grafana alerting.\n        <br />\n        While we have no plans of deprecating it any time soon, we invite you to give the improved Grafana 8 alerting a\n        try.\n      </p>\n      <p>\n        See{' '}\n        <a href=\"https://grafana.com/docs/grafana/latest/alerting/unified-alerting/difference-old-new/\">\n          What’s New with Grafana 8 alerting\n        </a>{' '}\n        to learn more about what&lsquo;s new in Grafana 8 alerting or learn{' '}\n        <a href=\"https://grafana.com/docs/grafana/latest/alerting/unified-alerting/opt-in/\">\n          how to enable the new Grafana 8 alerting feature\n        </a>\n        .\n      </p>\n    </Alert>\n  );\n};\n\nexport { UnifiedAlertingPromotion };\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport Page from 'app/core/components/Page/Page';\nimport AlertRuleItem from './AlertRuleItem';\nimport appEvents from 'app/core/app_events';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AlertRule, StoreState } from 'app/types';\nimport { getAlertRulesAsync, togglePauseAlertRule } from './state/actions';\nimport { getAlertRuleItems, getSearchQuery } from './state/selectors';\nimport { SelectableValue } from '@grafana/data';\nimport { config, locationService } from '@grafana/runtime';\nimport { setSearchQuery } from './state/reducers';\nimport { Button, FilterInput, LinkButton, Select, VerticalGroup } from '@grafana/ui';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { ShowModalReactEvent } from '../../types/events';\nimport { AlertHowToModal } from './AlertHowToModal';\nimport { UnifiedAlertingPromotion } from './components/UnifiedAlertingPromotion';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'alert-list'),\n    alertRules: getAlertRuleItems(state),\n    search: getSearchQuery(state.alertRules),\n    isLoading: state.alertRules.isLoading,\n  };\n}\n\nconst mapDispatchToProps = {\n  getAlertRulesAsync,\n  setSearchQuery,\n  togglePauseAlertRule,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps extends GrafanaRouteComponentProps<{}, { state: string }> {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class AlertRuleListUnconnected extends PureComponent<Props> {\n  stateFilters = [\n    { label: 'All', value: 'all' },\n    { label: 'OK', value: 'ok' },\n    { label: 'Not OK', value: 'not_ok' },\n    { label: 'Alerting', value: 'alerting' },\n    { label: 'No data', value: 'no_data' },\n    { label: 'Paused', value: 'paused' },\n    { label: 'Pending', value: 'pending' },\n  ];\n\n  componentDidMount() {\n    this.fetchRules();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.queryParams.state !== this.props.queryParams.state) {\n      this.fetchRules();\n    }\n  }\n\n  async fetchRules() {\n    await this.props.getAlertRulesAsync({ state: this.getStateFilter() });\n  }\n\n  getStateFilter(): string {\n    return this.props.queryParams.state ?? 'all';\n  }\n\n  onStateFilterChanged = (option: SelectableValue) => {\n    locationService.partial({ state: option.value });\n  };\n\n  onOpenHowTo = () => {\n    appEvents.publish(new ShowModalReactEvent({ component: AlertHowToModal }));\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchQuery(value);\n  };\n\n  onTogglePause = (rule: AlertRule) => {\n    this.props.togglePauseAlertRule(rule.id, { paused: rule.state !== 'paused' });\n  };\n\n  alertStateFilterOption = ({ text, value }: { text: string; value: string }) => {\n    return (\n      <option key={value} value={value}>\n        {text}\n      </option>\n    );\n  };\n\n  render() {\n    const { navModel, alertRules, search, isLoading } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <div className=\"gf-form gf-form--grow\">\n              <FilterInput placeholder=\"Search alerts\" value={search} onChange={this.onSearchQueryChange} />\n            </div>\n            <div className=\"gf-form\">\n              <label className=\"gf-form-label\" htmlFor=\"alert-state-filter\">\n                States\n              </label>\n\n              <div className=\"width-13\">\n                <Select\n                  inputId={'alert-state-filter'}\n                  menuShouldPortal\n                  options={this.stateFilters}\n                  onChange={this.onStateFilterChanged}\n                  value={this.getStateFilter()}\n                />\n              </div>\n            </div>\n            <div className=\"page-action-bar__spacer\" />\n            {config.unifiedAlertingEnabled && (\n              <LinkButton variant=\"primary\" href=\"alerting/ng/new\">\n                Add NG Alert\n              </LinkButton>\n            )}\n            <Button variant=\"secondary\" onClick={this.onOpenHowTo}>\n              How to add an alert\n            </Button>\n          </div>\n          <UnifiedAlertingPromotion />\n          <VerticalGroup spacing=\"none\">\n            {alertRules.map((rule) => {\n              return (\n                <AlertRuleItem\n                  rule={rule as AlertRule}\n                  key={rule.id}\n                  search={search}\n                  onTogglePause={() => this.onTogglePause(rule as AlertRule)}\n                />\n              );\n            })}\n          </VerticalGroup>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(AlertRuleListUnconnected);\n","import EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport React, { FC } from 'react';\nimport { CallToActionCard } from '@grafana/ui';\n\nexport const NoRulesSplash: FC = () => {\n  if (contextSrv.hasEditPermissionInFolders || contextSrv.isEditor) {\n    return (\n      <EmptyListCTA\n        title=\"You haven`t created any alert rules yet\"\n        buttonIcon=\"bell\"\n        buttonLink={'alerting/new'}\n        buttonTitle=\"New alert rule\"\n        proTip=\"you can also create alert rules from existing panels and queries.\"\n        proTipLink=\"https://grafana.com/docs/\"\n        proTipLinkTitle=\"Learn more\"\n        proTipTarget=\"_blank\"\n      />\n    );\n  }\n  return <CallToActionCard message=\"No rules exist yet.\" callToActionElement={<div />} />;\n};\n","import { useMemo } from 'react';\n\nimport { CombinedRuleGroup, CombinedRuleNamespace, FilterState } from 'app/types/unified-alerting';\nimport { isCloudRulesSource } from '../utils/datasource';\nimport { isAlertingRule, isGrafanaRulerRule } from '../utils/rules';\nimport { getFiltersFromUrlParams } from '../utils/misc';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { PromRuleType, RulerGrafanaRuleDTO } from 'app/types/unified-alerting-dto';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { labelsMatchMatchers, parseMatchers } from '../utils/alertmanager';\n\nexport const useFilteredRules = (namespaces: CombinedRuleNamespace[]) => {\n  const [queryParams] = useQueryParams();\n  const filters = getFiltersFromUrlParams(queryParams);\n\n  return useMemo(() => {\n    const filteredNamespaces = namespaces\n      // Filter by data source\n      // TODO: filter by multiple data sources for grafana-managed alerts\n      .filter(({ rulesSource }) =>\n        filters.dataSource && isCloudRulesSource(rulesSource) ? rulesSource.name === filters.dataSource : true\n      )\n      // If a namespace and group have rules that match the rules filters then keep them.\n      .reduce(reduceNamespaces(filters), [] as CombinedRuleNamespace[]);\n    return filteredNamespaces;\n  }, [namespaces, filters]);\n};\n\nconst reduceNamespaces = (filters: FilterState) => {\n  return (namespaceAcc: CombinedRuleNamespace[], namespace: CombinedRuleNamespace) => {\n    const groups = namespace.groups.reduce(reduceGroups(filters), [] as CombinedRuleGroup[]);\n\n    if (groups.length) {\n      namespaceAcc.push({\n        ...namespace,\n        groups,\n      });\n    }\n\n    return namespaceAcc;\n  };\n};\n\n// Reduces groups to only groups that have rules matching the filters\nconst reduceGroups = (filters: FilterState) => {\n  return (groupAcc: CombinedRuleGroup[], group: CombinedRuleGroup) => {\n    const rules = group.rules.filter((rule) => {\n      if (filters.ruleType && filters.ruleType !== rule.promRule?.type) {\n        return false;\n      }\n      if (filters.dataSource && isGrafanaRulerRule(rule.rulerRule) && !isQueryingDataSource(rule.rulerRule, filters)) {\n        return false;\n      }\n      // Query strings can match alert name, label keys, and label values\n      if (filters.queryString) {\n        const normalizedQueryString = filters.queryString.toLocaleLowerCase();\n        const doesNameContainsQueryString = rule.name?.toLocaleLowerCase().includes(normalizedQueryString);\n        const matchers = parseMatchers(filters.queryString);\n\n        const doRuleLabelsMatchQuery = labelsMatchMatchers(rule.labels, matchers);\n        const doAlertsContainMatchingLabels =\n          rule.promRule &&\n          rule.promRule.type === PromRuleType.Alerting &&\n          rule.promRule.alerts &&\n          rule.promRule.alerts.some((alert) => labelsMatchMatchers(alert.labels, matchers));\n\n        if (!(doesNameContainsQueryString || doRuleLabelsMatchQuery || doAlertsContainMatchingLabels)) {\n          return false;\n        }\n      }\n      if (\n        filters.alertState &&\n        !(rule.promRule && isAlertingRule(rule.promRule) && rule.promRule.state === filters.alertState)\n      ) {\n        return false;\n      }\n      return true;\n    });\n    // Add rules to the group that match the rule list filters\n    if (rules.length) {\n      groupAcc.push({\n        ...group,\n        rules,\n      });\n    }\n    return groupAcc;\n  };\n};\n\nconst isQueryingDataSource = (rulerRule: RulerGrafanaRuleDTO, filter: FilterState): boolean => {\n  if (!filter.dataSource) {\n    return true;\n  }\n\n  return !!rulerRule.grafana_alert.data.find((query) => {\n    if (!query.datasourceUid) {\n      return false;\n    }\n    const ds = getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n    return ds?.name === filter.dataSource;\n  });\n};\n","import React, { FormEvent, useState } from 'react';\nimport { Button, Icon, Input, Label, RadioButtonGroup, Tooltip, useStyles } from '@grafana/ui';\nimport { DataSourceInstanceSettings, GrafanaTheme, SelectableValue } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { debounce } from 'lodash';\n\nimport { PromAlertingRuleState, PromRuleType } from 'app/types/unified-alerting-dto';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { getFiltersFromUrlParams } from '../../utils/misc';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { alertStateToReadable } from '../../utils/rules';\n\nconst ViewOptions: SelectableValue[] = [\n  {\n    icon: 'folder',\n    label: 'Groups',\n    value: 'group',\n  },\n  {\n    icon: 'heart-rate',\n    label: 'State',\n    value: 'state',\n  },\n];\n\nconst RuleTypeOptions: SelectableValue[] = [\n  {\n    label: 'Alert ',\n    value: PromRuleType.Alerting,\n  },\n  {\n    label: 'Recording ',\n    value: PromRuleType.Recording,\n  },\n];\n\nconst RulesFilter = () => {\n  const [queryParams, setQueryParams] = useQueryParams();\n  // This key is used to force a rerender on the inputs when the filters are cleared\n  const [filterKey, setFilterKey] = useState<number>(Math.floor(Math.random() * 100));\n  const dataSourceKey = `dataSource-${filterKey}`;\n  const queryStringKey = `queryString-${filterKey}`;\n\n  const { dataSource, alertState, queryString, ruleType } = getFiltersFromUrlParams(queryParams);\n\n  const styles = useStyles(getStyles);\n  const stateOptions = Object.entries(PromAlertingRuleState).map(([key, value]) => ({\n    label: alertStateToReadable(value),\n    value,\n  }));\n\n  const handleDataSourceChange = (dataSourceValue: DataSourceInstanceSettings) => {\n    setQueryParams({ dataSource: dataSourceValue.name });\n  };\n\n  const clearDataSource = () => {\n    setQueryParams({ dataSource: null });\n  };\n\n  const handleQueryStringChange = debounce((e: FormEvent<HTMLInputElement>) => {\n    const target = e.target as HTMLInputElement;\n    setQueryParams({ queryString: target.value || null });\n  }, 600);\n\n  const handleAlertStateChange = (value: string) => {\n    setQueryParams({ alertState: value });\n  };\n\n  const handleViewChange = (view: string) => {\n    setQueryParams({ view });\n  };\n\n  const handleRuleTypeChange = (ruleType: PromRuleType) => {\n    setQueryParams({ ruleType });\n  };\n\n  const handleClearFiltersClick = () => {\n    setQueryParams({\n      alertState: null,\n      queryString: null,\n      dataSource: null,\n      ruleType: null,\n    });\n    setTimeout(() => setFilterKey(filterKey + 1), 100);\n  };\n\n  const searchIcon = <Icon name={'search'} />;\n  return (\n    <div className={styles.container}>\n      <div className={styles.inputWidth}>\n        <Label>Search by data source</Label>\n        <DataSourcePicker\n          key={dataSourceKey}\n          alerting\n          noDefault\n          placeholder=\"All data sources\"\n          current={dataSource}\n          onChange={handleDataSourceChange}\n          onClear={clearDataSource}\n        />\n      </div>\n      <div className={cx(styles.flexRow, styles.spaceBetween)}>\n        <div className={styles.flexRow}>\n          <div className={styles.rowChild}>\n            <Label>\n              <Tooltip\n                content={\n                  <div>\n                    Filter rules and alerts using label querying, ex:\n                    <pre>{`{severity=\"critical\", instance=~\"cluster-us-.+\"}`}</pre>\n                  </div>\n                }\n              >\n                <Icon name=\"info-circle\" className={styles.tooltip} />\n              </Tooltip>\n              Search by label\n            </Label>\n            <Input\n              key={queryStringKey}\n              className={styles.inputWidth}\n              prefix={searchIcon}\n              onChange={handleQueryStringChange}\n              defaultValue={queryString}\n              placeholder=\"Search\"\n              data-testid=\"search-query-input\"\n            />\n          </div>\n          <div className={styles.rowChild}>\n            <Label>State</Label>\n            <RadioButtonGroup options={stateOptions} value={alertState} onChange={handleAlertStateChange} />\n          </div>\n          <div className={styles.rowChild}>\n            <Label>Rule type</Label>\n            <RadioButtonGroup\n              options={RuleTypeOptions}\n              value={ruleType as PromRuleType}\n              onChange={handleRuleTypeChange}\n            />\n          </div>\n          <div className={styles.rowChild}>\n            <Label>View as</Label>\n            <RadioButtonGroup\n              options={ViewOptions}\n              value={String(queryParams['view'] || 'group')}\n              onChange={handleViewChange}\n            />\n          </div>\n        </div>\n        {(dataSource || alertState || queryString || ruleType) && (\n          <div className={styles.flexRow}>\n            <Button\n              className={styles.clearButton}\n              fullWidth={false}\n              icon=\"times\"\n              variant=\"secondary\"\n              onClick={handleClearFiltersClick}\n            >\n              Clear filters\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    container: css`\n      display: flex;\n      flex-direction: column;\n      border-bottom: 1px solid ${theme.colors.border1};\n      padding-bottom: ${theme.spacing.sm};\n\n      & > div {\n        margin-bottom: ${theme.spacing.sm};\n      }\n    `,\n    inputWidth: css`\n      width: 340px;\n      flex-grow: 0;\n    `,\n    flexRow: css`\n      display: flex;\n      flex-direction: row;\n      align-items: flex-end;\n      width: 100%;\n      flex-wrap: wrap;\n    `,\n    spaceBetween: css`\n      justify-content: space-between;\n    `,\n    rowChild: css`\n      margin-right: ${theme.spacing.sm};\n      margin-top: ${theme.spacing.sm};\n    `,\n    tooltip: css`\n      margin: 0 ${theme.spacing.xs};\n    `,\n    clearButton: css`\n      margin-top: ${theme.spacing.sm};\n    `,\n  };\n};\n\nexport default RulesFilter;\n","import { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\nimport { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\ntype Props = {\n  status: PromAlertingRuleState | 'neutral';\n};\n\nexport const StateColoredText: FC<Props> = ({ children, status }) => {\n  const styles = useStyles2(getStyles);\n\n  return <span className={styles[status]}>{children || status}</span>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  [PromAlertingRuleState.Inactive]: css`\n    color: ${theme.colors.success.text};\n  `,\n  [PromAlertingRuleState.Pending]: css`\n    color: ${theme.colors.warning.text};\n  `,\n  [PromAlertingRuleState.Firing]: css`\n    color: ${theme.colors.error.text};\n  `,\n  neutral: css`\n    color: ${theme.colors.text.secondary};\n  `,\n});\n","import { CombinedRule, CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\nimport pluralize from 'pluralize';\nimport React, { FC, Fragment, useMemo } from 'react';\nimport { isAlertingRule, isRecordingRule, isRecordingRulerRule } from '../../utils/rules';\nimport { StateColoredText } from '../StateColoredText';\n\ninterface Props {\n  showInactive?: boolean;\n  showRecording?: boolean;\n  group?: CombinedRuleGroup;\n  namespaces?: CombinedRuleNamespace[];\n}\n\nconst emptyStats = {\n  total: 0,\n  recording: 0,\n  [PromAlertingRuleState.Firing]: 0,\n  [PromAlertingRuleState.Pending]: 0,\n  [PromAlertingRuleState.Inactive]: 0,\n  error: 0,\n} as const;\n\nexport const RuleStats: FC<Props> = ({ showInactive, showRecording, group, namespaces }) => {\n  const calculated = useMemo(() => {\n    const stats = { ...emptyStats };\n    const calcRule = (rule: CombinedRule) => {\n      if (rule.promRule && isAlertingRule(rule.promRule)) {\n        stats[rule.promRule.state] += 1;\n      }\n      if (rule.promRule?.health === 'err' || rule.promRule?.health === 'error') {\n        stats.error += 1;\n      }\n      if (\n        (rule.promRule && isRecordingRule(rule.promRule)) ||\n        (rule.rulerRule && isRecordingRulerRule(rule.rulerRule))\n      ) {\n        stats.recording += 1;\n      }\n      stats.total += 1;\n    };\n    if (group) {\n      group.rules.forEach(calcRule);\n    }\n    if (namespaces) {\n      namespaces.forEach((namespace) => namespace.groups.forEach((group) => group.rules.forEach(calcRule)));\n    }\n    return stats;\n  }, [group, namespaces]);\n\n  const statsComponents: React.ReactNode[] = [];\n  if (calculated[PromAlertingRuleState.Firing]) {\n    statsComponents.push(\n      <StateColoredText key=\"firing\" status={PromAlertingRuleState.Firing}>\n        {calculated[PromAlertingRuleState.Firing]} firing\n      </StateColoredText>\n    );\n  }\n  if (calculated.error) {\n    statsComponents.push(\n      <StateColoredText key=\"errors\" status={PromAlertingRuleState.Firing}>\n        {calculated.error} errors\n      </StateColoredText>\n    );\n  }\n  if (calculated[PromAlertingRuleState.Pending]) {\n    statsComponents.push(\n      <StateColoredText key=\"pending\" status={PromAlertingRuleState.Pending}>\n        {calculated[PromAlertingRuleState.Pending]} pending\n      </StateColoredText>\n    );\n  }\n  if (showInactive && calculated[PromAlertingRuleState.Inactive]) {\n    statsComponents.push(\n      <StateColoredText key=\"inactive\" status=\"neutral\">\n        {calculated[PromAlertingRuleState.Inactive]} normal\n      </StateColoredText>\n    );\n  }\n  if (showRecording && calculated.recording) {\n    statsComponents.push(\n      <StateColoredText key=\"recording\" status=\"neutral\">\n        {calculated.recording} recording\n      </StateColoredText>\n    );\n  }\n\n  return (\n    <div>\n      <span>\n        {calculated.total} {pluralize('rule', calculated.total)}\n      </span>\n      {!!statsComponents.length && (\n        <>\n          <span>: </span>\n          {statsComponents.reduce<React.ReactNode[]>(\n            (prev, curr, idx) =>\n              prev.length\n                ? [\n                    prev,\n                    <Fragment key={idx}>\n                      <span>, </span>\n                    </Fragment>,\n                    curr,\n                  ]\n                : [curr],\n            []\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useMemo } from 'react';\nimport { CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { Modal, Button, Form, Field, Input, useStyles2 } from '@grafana/ui';\nimport { durationValidationPattern } from '../../utils/time';\nimport { css } from '@emotion/css';\nimport { useDispatch } from 'react-redux';\nimport { updateLotexNamespaceAndGroupAction } from '../../state/actions';\nimport { getRulesSourceName } from '../../utils/datasource';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { initialAsyncRequestState } from '../../utils/redux';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\n\ninterface Props {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  onClose: () => void;\n}\n\ninterface FormValues {\n  namespaceName: string;\n  groupName: string;\n  groupInterval: string;\n}\n\nexport function EditCloudGroupModal(props: Props): React.ReactElement {\n  const { namespace, group, onClose } = props;\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  const { loading, error, dispatched } =\n    useUnifiedAlertingSelector((state) => state.updateLotexNamespaceAndGroup) ?? initialAsyncRequestState;\n\n  const defaultValues = useMemo(\n    (): FormValues => ({\n      namespaceName: namespace.name,\n      groupName: group.name,\n      groupInterval: group.interval ?? '',\n    }),\n    [namespace, group]\n  );\n\n  // close modal if successfully saved\n  useEffect(() => {\n    if (dispatched && !loading && !error) {\n      onClose();\n    }\n  }, [dispatched, loading, onClose, error]);\n\n  useCleanup((state) => state.unifiedAlerting.updateLotexNamespaceAndGroup);\n\n  const onSubmit = (values: FormValues) => {\n    dispatch(\n      updateLotexNamespaceAndGroupAction({\n        rulesSourceName: getRulesSourceName(namespace.rulesSource),\n        groupName: group.name,\n        newGroupName: values.groupName,\n        namespaceName: namespace.name,\n        newNamespaceName: values.namespaceName,\n        groupInterval: values.groupInterval || undefined,\n      })\n    );\n  };\n\n  return (\n    <Modal\n      className={styles.modal}\n      isOpen={true}\n      title=\"Edit namespace or rule group\"\n      onDismiss={onClose}\n      onClickBackdrop={onClose}\n    >\n      <Form defaultValues={defaultValues} onSubmit={onSubmit} key={JSON.stringify(defaultValues)}>\n        {({ register, errors, formState: { isDirty } }) => (\n          <>\n            <Field label=\"Namespace\" invalid={!!errors.namespaceName} error={errors.namespaceName?.message}>\n              <Input\n                id=\"namespaceName\"\n                {...register('namespaceName', {\n                  required: 'Namespace name is required.',\n                })}\n              />\n            </Field>\n            <Field label=\"Rule group\" invalid={!!errors.groupName} error={errors.groupName?.message}>\n              <Input\n                id=\"groupName\"\n                {...register('groupName', {\n                  required: 'Rule group name is required.',\n                })}\n              />\n            </Field>\n            <Field\n              label=\"Rule group evaluation interval\"\n              invalid={!!errors.groupInterval}\n              error={errors.groupInterval?.message}\n            >\n              <Input\n                id=\"groupInterval\"\n                placeholder=\"1m\"\n                {...register('groupInterval', {\n                  pattern: durationValidationPattern,\n                })}\n              />\n            </Field>\n\n            <Modal.ButtonRow>\n              <Button variant=\"secondary\" type=\"button\" disabled={loading} onClick={onClose} fill=\"outline\">\n                Close\n              </Button>\n              <Button type=\"submit\" disabled={!isDirty || loading}>\n                {loading ? 'Saving...' : 'Save changes'}\n              </Button>\n            </Modal.ButtonRow>\n          </>\n        )}\n      </Form>\n    </Modal>\n  );\n}\n\nconst getStyles = () => ({\n  modal: css`\n    max-width: 560px;\n  `,\n});\n","import { CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport React, { FC, useState, useEffect } from 'react';\nimport { HorizontalGroup, Icon, Spinner, Tooltip, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { isGrafanaRulerRule } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { RulesTable } from './RulesTable';\nimport { GRAFANA_RULES_SOURCE_NAME, isCloudRulesSource } from '../../utils/datasource';\nimport { ActionIcon } from './ActionIcon';\nimport { useHasRuler } from '../../hooks/useHasRuler';\nimport kbn from 'app/core/utils/kbn';\nimport { useFolder } from '../../hooks/useFolder';\nimport { RuleStats } from './RuleStats';\nimport { EditCloudGroupModal } from './EditCloudGroupModal';\n\ninterface Props {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  expandAll: boolean;\n}\n\nexport const RulesGroup: FC<Props> = React.memo(({ group, namespace, expandAll }) => {\n  const { rulesSource } = namespace;\n  const styles = useStyles2(getStyles);\n\n  const [isEditingGroup, setIsEditingGroup] = useState(false);\n  const [isCollapsed, setIsCollapsed] = useState(!expandAll);\n\n  useEffect(() => {\n    setIsCollapsed(!expandAll);\n  }, [expandAll]);\n\n  const hasRuler = useHasRuler();\n  const rulerRule = group.rules[0]?.rulerRule;\n  const folderUID = (rulerRule && isGrafanaRulerRule(rulerRule) && rulerRule.grafana_alert.namespace_uid) || undefined;\n  const { folder } = useFolder(folderUID);\n\n  // group \"is deleting\" if rules source has ruler, but this group has no rules that are in ruler\n  const isDeleting = hasRuler(rulesSource) && !group.rules.find((rule) => !!rule.rulerRule);\n\n  const actionIcons: React.ReactNode[] = [];\n\n  // for grafana, link to folder views\n  if (isDeleting) {\n    actionIcons.push(\n      <HorizontalGroup key=\"is-deleting\">\n        <Spinner />\n        deleting\n      </HorizontalGroup>\n    );\n  } else if (rulesSource === GRAFANA_RULES_SOURCE_NAME) {\n    if (folderUID) {\n      const baseUrl = `/dashboards/f/${folderUID}/${kbn.slugifyForUrl(namespace.name)}`;\n      if (folder?.canSave) {\n        actionIcons.push(\n          <ActionIcon\n            aria-label=\"edit folder\"\n            key=\"edit\"\n            icon=\"pen\"\n            tooltip=\"edit folder\"\n            to={baseUrl + '/settings'}\n            target=\"__blank\"\n          />\n        );\n      }\n      if (folder?.canAdmin) {\n        actionIcons.push(\n          <ActionIcon\n            aria-label=\"manage permissions\"\n            key=\"manage-perms\"\n            icon=\"lock\"\n            tooltip=\"manage permissions\"\n            to={baseUrl + '/permissions'}\n            target=\"__blank\"\n          />\n        );\n      }\n    }\n  } else if (hasRuler(rulesSource)) {\n    actionIcons.push(\n      <ActionIcon\n        aria-label=\"edit rule group\"\n        data-testid=\"edit-group\"\n        key=\"edit\"\n        icon=\"pen\"\n        tooltip=\"edit rule group\"\n        onClick={() => setIsEditingGroup(true)}\n      />\n    );\n  }\n\n  const groupName = isCloudRulesSource(rulesSource) ? `${namespace.name} > ${group.name}` : namespace.name;\n\n  return (\n    <div className={styles.wrapper} data-testid=\"rule-group\">\n      <div className={styles.header} data-testid=\"rule-group-header\">\n        <CollapseToggle\n          className={styles.collapseToggle}\n          isCollapsed={isCollapsed}\n          onToggle={setIsCollapsed}\n          data-testid=\"group-collapse-toggle\"\n        />\n        <Icon name={isCollapsed ? 'folder' : 'folder-open'} />\n        {isCloudRulesSource(rulesSource) && (\n          <Tooltip content={rulesSource.name} placement=\"top\">\n            <img\n              alt={rulesSource.meta.name}\n              className={styles.dataSourceIcon}\n              src={rulesSource.meta.info.logos.small}\n            />\n          </Tooltip>\n        )}\n        <h6 className={styles.heading}>{groupName}</h6>\n        <div className={styles.spacer} />\n        <div className={styles.headerStats}>\n          <RuleStats showInactive={false} group={group} />\n        </div>\n        {!!actionIcons.length && (\n          <>\n            <div className={styles.actionsSeparator}>|</div>\n            <div className={styles.actionIcons}>{actionIcons}</div>\n          </>\n        )}\n      </div>\n      {!isCollapsed && (\n        <RulesTable showSummaryColumn={true} className={styles.rulesTable} showGuidelines={true} rules={group.rules} />\n      )}\n      {isEditingGroup && (\n        <EditCloudGroupModal group={group} namespace={namespace} onClose={() => setIsEditingGroup(false)} />\n      )}\n    </div>\n  );\n});\n\nRulesGroup.displayName = 'RulesGroup';\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    & + & {\n      margin-top: ${theme.spacing(2)};\n    }\n  `,\n  header: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    padding: ${theme.spacing(1)} ${theme.spacing(1)} ${theme.spacing(1)} 0;\n    background-color: ${theme.colors.background.secondary};\n    flex-wrap: wrap;\n  `,\n  headerStats: css`\n    span {\n      vertical-align: middle;\n    }\n\n    ${theme.breakpoints.down('sm')} {\n      order: 2;\n      width: 100%;\n      padding-left: ${theme.spacing(1)};\n    }\n  `,\n  heading: css`\n    margin-left: ${theme.spacing(1)};\n    margin-bottom: 0;\n  `,\n  spacer: css`\n    flex: 1;\n  `,\n  collapseToggle: css`\n    background: none;\n    border: none;\n    margin-top: -${theme.spacing(1)};\n    margin-bottom: -${theme.spacing(1)};\n\n    svg {\n      margin-bottom: 0;\n    }\n  `,\n  dataSourceIcon: css`\n    width: ${theme.spacing(2)};\n    height: ${theme.spacing(2)};\n    margin-left: ${theme.spacing(2)};\n  `,\n  dataSourceOrigin: css`\n    margin-right: 1em;\n    color: ${theme.colors.text.disabled};\n  `,\n  actionsSeparator: css`\n    margin: 0 ${theme.spacing(2)};\n  `,\n  actionIcons: css`\n    & > * + * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  rulesTable: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\nimport { LoadingPlaceholder, useStyles } from '@grafana/ui';\nimport React, { FC, useMemo } from 'react';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { RulesGroup } from './RulesGroup';\nimport { getRulesDataSources, getRulesSourceName } from '../../utils/datasource';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport pluralize from 'pluralize';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const CloudRules: FC<Props> = ({ namespaces, expandAll }) => {\n  const styles = useStyles(getStyles);\n  const rules = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulesDataSources = useMemo(getRulesDataSources, []);\n\n  const dataSourcesLoading = useMemo(() => rulesDataSources.filter((ds) => rules[ds.name]?.loading), [\n    rules,\n    rulesDataSources,\n  ]);\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <h5>Cortex / Loki</h5>\n        {dataSourcesLoading.length ? (\n          <LoadingPlaceholder\n            className={styles.loader}\n            text={`Loading rules from ${dataSourcesLoading.length} ${pluralize('source', dataSourcesLoading.length)}`}\n          />\n        ) : (\n          <div />\n        )}\n      </div>\n\n      {namespaces.map((namespace) => {\n        const { groups, rulesSource } = namespace;\n        return groups.map((group) => (\n          <RulesGroup\n            group={group}\n            key={`${getRulesSourceName(rulesSource)}-${name}-${group.name}`}\n            namespace={namespace}\n            expandAll={expandAll}\n          />\n        ));\n      })}\n      {namespaces?.length === 0 && !!rulesDataSources.length && <p>No rules found.</p>}\n      {!rulesDataSources.length && <p>There are no Prometheus or Loki datas sources configured.</p>}\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  loader: css`\n    margin-bottom: 0;\n  `,\n  sectionHeader: css`\n    display: flex;\n    justify-content: space-between;\n  `,\n  wrapper: css`\n    margin-bottom: ${theme.spacing.xl};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\nimport { LoadingPlaceholder, useStyles } from '@grafana/ui';\nimport React, { FC } from 'react';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { RulesGroup } from './RulesGroup';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { initialAsyncRequestState } from '../../utils/redux';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const GrafanaRules: FC<Props> = ({ namespaces, expandAll }) => {\n  const styles = useStyles(getStyles);\n  const { loading } = useUnifiedAlertingSelector(\n    (state) => state.promRules[GRAFANA_RULES_SOURCE_NAME] || initialAsyncRequestState\n  );\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <h5>Grafana</h5>\n        {loading ? <LoadingPlaceholder className={styles.loader} text=\"Loading...\" /> : <div />}\n      </div>\n\n      {namespaces?.map((namespace) =>\n        namespace.groups.map((group) => (\n          <RulesGroup\n            group={group}\n            key={`${namespace.name}-${group.name}`}\n            namespace={namespace}\n            expandAll={expandAll}\n          />\n        ))\n      )}\n      {namespaces?.length === 0 && <p>No rules found.</p>}\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  loader: css`\n    margin-bottom: 0;\n  `,\n  sectionHeader: css`\n    display: flex;\n    justify-content: space-between;\n  `,\n  wrapper: css`\n    margin-bottom: ${theme.spacing.xl};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\nimport React, { FC, useState } from 'react';\nimport { alertStateToReadable } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { RulesTable } from './RulesTable';\n\ninterface Props {\n  rules: CombinedRule[];\n  state: PromAlertingRuleState;\n  defaultCollapsed?: boolean;\n}\n\nexport const RuleListStateSection: FC<Props> = ({ rules, state, defaultCollapsed = false }) => {\n  const [collapsed, setCollapsed] = useState(defaultCollapsed);\n  const styles = useStyles2(getStyles);\n  return (\n    <>\n      <h4 className={styles.header}>\n        <CollapseToggle\n          className={styles.collapseToggle}\n          size=\"xxl\"\n          isCollapsed={collapsed}\n          onToggle={() => setCollapsed(!collapsed)}\n        />\n        {alertStateToReadable(state)} ({rules.length})\n      </h4>\n      {!collapsed && <RulesTable className={styles.rulesTable} rules={rules} showGroupColumn={true} />}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  collapseToggle: css`\n    vertical-align: middle;\n  `,\n  header: css`\n    margin-top: ${theme.spacing(2)};\n  `,\n  rulesTable: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { DataSourceInstanceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, useStyles2 } from '@grafana/ui';\nimport { SerializedError } from '@reduxjs/toolkit';\nimport pluralize from 'pluralize';\nimport React, { useMemo, ReactElement, useState } from 'react';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getRulesDataSources, GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { isRulerNotSupportedResponse } from '../../utils/rules';\n\nexport function RuleListErrors(): ReactElement {\n  const [expanded, setExpanded] = useState(false);\n  const [closed, setClosed] = useState(false);\n  const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const styles = useStyles2(getStyles);\n\n  const errors = useMemo((): JSX.Element[] => {\n    const [promRequestErrors, rulerRequestErrors] = [promRuleRequests, rulerRuleRequests].map((requests) =>\n      getRulesDataSources().reduce<Array<{ error: SerializedError; dataSource: DataSourceInstanceSettings }>>(\n        (result, dataSource) => {\n          const error = requests[dataSource.name]?.error;\n          if (requests[dataSource.name] && error && !isRulerNotSupportedResponse(requests[dataSource.name])) {\n            return [...result, { dataSource, error }];\n          }\n          return result;\n        },\n        []\n      )\n    );\n    const grafanaPromError = promRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n    const grafanaRulerError = rulerRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n\n    const result: JSX.Element[] = [];\n\n    if (grafanaPromError) {\n      result.push(<>Failed to load Grafana rules state: {grafanaPromError.message || 'Unknown error.'}</>);\n    }\n    if (grafanaRulerError) {\n      result.push(<>Failed to load Grafana rules config: {grafanaRulerError.message || 'Unknown error.'}</>);\n    }\n\n    promRequestErrors.forEach(({ dataSource, error }) =>\n      result.push(\n        <>\n          Failed to load rules state from <a href={`datasources/edit/${dataSource.uid}`}>{dataSource.name}</a>:{' '}\n          {error.message || 'Unknown error.'}\n        </>\n      )\n    );\n\n    rulerRequestErrors.forEach(({ dataSource, error }) =>\n      result.push(\n        <>\n          Failed to load rules config from <a href={`datasources/edit/${dataSource.uid}`}>{dataSource.name}</a>:{' '}\n          {error.message || 'Unknown error.'}\n        </>\n      )\n    );\n\n    return result;\n  }, [promRuleRequests, rulerRuleRequests]);\n\n  return (\n    <>\n      {!!errors.length && !closed && (\n        <Alert\n          data-testid=\"cloud-rulessource-errors\"\n          title=\"Errors loading rules\"\n          severity=\"error\"\n          onRemove={() => setClosed(true)}\n        >\n          {expanded && errors.map((item, idx) => <div key={idx}>{item}</div>)}\n          {!expanded && (\n            <>\n              <div>{errors[0]}</div>\n              {errors.length >= 2 && (\n                <Button\n                  className={styles.moreButton}\n                  fill=\"text\"\n                  icon=\"angle-right\"\n                  size=\"sm\"\n                  onClick={() => setExpanded(true)}\n                >\n                  {errors.length - 1} more {pluralize('error', errors.length - 1)}\n                </Button>\n              )}\n            </>\n          )}\n        </Alert>\n      )}\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  moreButton: css`\n    padding: 0;\n  `,\n});\n","import { GrafanaTheme2, urlUtil } from '@grafana/data';\nimport { useStyles2, LinkButton, withErrorBoundary, Button } from '@grafana/ui';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { NoRulesSplash } from './components/rules/NoRulesCTA';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { useFilteredRules } from './hooks/useFilteredRules';\nimport { fetchAllPromAndRulerRulesAction } from './state/actions';\nimport { getAllRulesSourceNames } from './utils/datasource';\nimport { css } from '@emotion/css';\nimport { useCombinedRuleNamespaces } from './hooks/useCombinedRuleNamespaces';\nimport { RULE_LIST_POLL_INTERVAL_MS } from './utils/constants';\nimport RulesFilter from './components/rules/RulesFilter';\nimport { RuleListGroupView } from './components/rules/RuleListGroupView';\nimport { RuleListStateView } from './components/rules/RuleListStateView';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { useLocation } from 'react-router-dom';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { RuleStats } from './components/rules/RuleStats';\nimport { RuleListErrors } from './components/rules/RuleListErrors';\nimport { getFiltersFromUrlParams } from './utils/misc';\n\nconst VIEWS = {\n  groups: RuleListGroupView,\n  state: RuleListStateView,\n};\n\nexport const RuleList = withErrorBoundary(\n  () => {\n    const dispatch = useDispatch();\n    const styles = useStyles2(getStyles);\n    const rulesDataSourceNames = useMemo(getAllRulesSourceNames, []);\n    const location = useLocation();\n    const [expandAll, setExpandAll] = useState(false);\n\n    const [queryParams] = useQueryParams();\n    const filters = getFiltersFromUrlParams(queryParams);\n    const filtersActive = Object.values(filters).some((filter) => filter !== undefined);\n\n    const view = VIEWS[queryParams['view'] as keyof typeof VIEWS]\n      ? (queryParams['view'] as keyof typeof VIEWS)\n      : 'groups';\n\n    const ViewComponent = VIEWS[view];\n\n    // fetch rules, then poll every RULE_LIST_POLL_INTERVAL_MS\n    useEffect(() => {\n      dispatch(fetchAllPromAndRulerRulesAction());\n      const interval = setInterval(() => dispatch(fetchAllPromAndRulerRulesAction()), RULE_LIST_POLL_INTERVAL_MS);\n      return () => {\n        clearInterval(interval);\n      };\n    }, [dispatch]);\n\n    const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n    const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n\n    const dispatched = rulesDataSourceNames.some(\n      (name) => promRuleRequests[name]?.dispatched || rulerRuleRequests[name]?.dispatched\n    );\n    const loading = rulesDataSourceNames.some(\n      (name) => promRuleRequests[name]?.loading || rulerRuleRequests[name]?.loading\n    );\n    const haveResults = rulesDataSourceNames.some(\n      (name) =>\n        (promRuleRequests[name]?.result?.length && !promRuleRequests[name]?.error) ||\n        (Object.keys(rulerRuleRequests[name]?.result || {}).length && !rulerRuleRequests[name]?.error)\n    );\n\n    const showNewAlertSplash = dispatched && !loading && !haveResults;\n\n    const combinedNamespaces = useCombinedRuleNamespaces();\n    const filteredNamespaces = useFilteredRules(combinedNamespaces);\n    return (\n      <AlertingPageWrapper pageId=\"alert-list\" isLoading={loading && !haveResults}>\n        <RuleListErrors />\n        {!showNewAlertSplash && (\n          <>\n            <RulesFilter />\n            <div className={styles.break} />\n            <div className={styles.buttonsContainer}>\n              <div className={styles.statsContainer}>\n                {view === 'groups' && filtersActive && (\n                  <Button\n                    className={styles.expandAllButton}\n                    icon={expandAll ? 'angle-double-up' : 'angle-double-down'}\n                    variant=\"secondary\"\n                    onClick={() => setExpandAll(!expandAll)}\n                  >\n                    {expandAll ? 'Collapse all' : 'Expand all'}\n                  </Button>\n                )}\n                <RuleStats showInactive={true} showRecording={true} namespaces={filteredNamespaces} />\n              </div>\n              {(contextSrv.hasEditPermissionInFolders || contextSrv.isEditor) && (\n                <LinkButton\n                  href={urlUtil.renderUrl('alerting/new', { returnTo: location.pathname + location.search })}\n                  icon=\"plus\"\n                >\n                  New alert rule\n                </LinkButton>\n              )}\n            </div>\n          </>\n        )}\n        {showNewAlertSplash && <NoRulesSplash />}\n        {haveResults && <ViewComponent expandAll={expandAll} namespaces={filteredNamespaces} />}\n      </AlertingPageWrapper>\n    );\n  },\n  { style: 'page' }\n);\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  break: css`\n    width: 100%;\n    height: 0;\n    margin-bottom: ${theme.spacing(2)};\n    border-bottom: solid 1px ${theme.colors.border.medium};\n  `,\n  buttonsContainer: css`\n    margin-bottom: ${theme.spacing(2)};\n    display: flex;\n    justify-content: space-between;\n  `,\n  statsContainer: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  `,\n  expandAllButton: css`\n    margin-right: ${theme.spacing(1)};\n  `,\n});\n","import { CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport React, { FC, useMemo } from 'react';\nimport { isCloudRulesSource, isGrafanaRulesSource } from '../../utils/datasource';\nimport { CloudRules } from './CloudRules';\nimport { GrafanaRules } from './GrafanaRules';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const RuleListGroupView: FC<Props> = ({ namespaces, expandAll }) => {\n  const [grafanaNamespaces, cloudNamespaces] = useMemo(() => {\n    const sorted = namespaces\n      .map((namespace) => ({\n        ...namespace,\n        groups: namespace.groups.sort((a, b) => a.name.localeCompare(b.name)),\n      }))\n      .sort((a, b) => a.name.localeCompare(b.name));\n    return [\n      sorted.filter((ns) => isGrafanaRulesSource(ns.rulesSource)),\n      sorted.filter((ns) => isCloudRulesSource(ns.rulesSource)),\n    ];\n  }, [namespaces]);\n\n  return (\n    <>\n      <GrafanaRules namespaces={grafanaNamespaces} expandAll={expandAll} />\n      <CloudRules namespaces={cloudNamespaces} expandAll={expandAll} />\n    </>\n  );\n};\n","import { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { CombinedRule, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\nimport React, { FC, useMemo } from 'react';\nimport { getFiltersFromUrlParams } from '../../utils/misc';\nimport { isAlertingRule } from '../../utils/rules';\nimport { RuleListStateSection } from './RuleListStateSection';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll?: boolean;\n}\n\ntype GroupedRules = Record<PromAlertingRuleState, CombinedRule[]>;\n\nexport const RuleListStateView: FC<Props> = ({ namespaces }) => {\n  const filters = getFiltersFromUrlParams(useQueryParams()[0]);\n\n  const groupedRules = useMemo(() => {\n    const result: GroupedRules = {\n      [PromAlertingRuleState.Firing]: [],\n      [PromAlertingRuleState.Inactive]: [],\n      [PromAlertingRuleState.Pending]: [],\n    };\n\n    namespaces.forEach((namespace) =>\n      namespace.groups.forEach((group) =>\n        group.rules.forEach((rule) => {\n          if (rule.promRule && isAlertingRule(rule.promRule)) {\n            result[rule.promRule.state].push(rule);\n          }\n        })\n      )\n    );\n\n    Object.values(result).forEach((rules) => rules.sort((a, b) => a.name.localeCompare(b.name)));\n\n    return result;\n  }, [namespaces]);\n  return (\n    <>\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Firing) && (\n        <RuleListStateSection state={PromAlertingRuleState.Firing} rules={groupedRules[PromAlertingRuleState.Firing]} />\n      )}\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Pending) && (\n        <RuleListStateSection\n          state={PromAlertingRuleState.Pending}\n          rules={groupedRules[PromAlertingRuleState.Pending]}\n        />\n      )}\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Inactive) && (\n        <RuleListStateSection\n          defaultCollapsed={filters.alertState !== PromAlertingRuleState.Inactive}\n          state={PromAlertingRuleState.Inactive}\n          rules={groupedRules[PromAlertingRuleState.Inactive]}\n        />\n      )}\n    </>\n  );\n};\n","import { config } from '@grafana/runtime';\nimport { RuleList } from './unified/RuleList';\nimport AlertRuleList from './AlertRuleList';\n\n// route between unified and \"old\" alerting pages based on feature flag\n\nexport default config.unifiedAlertingEnabled ? RuleList : AlertRuleList;\n","import { AppEvents } from '@grafana/data';\nimport { getBackendSrv, locationService } from '@grafana/runtime';\nimport { appEvents } from 'app/core/core';\nimport { loadAlertRules, loadedAlertRules, notificationChannelLoaded, setNotificationChannels } from './reducers';\nimport { AlertRuleDTO, NotifierDTO, ThunkResult } from 'app/types';\n\nexport function getAlertRulesAsync(options: { state: string }): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(loadAlertRules());\n    const rules: AlertRuleDTO[] = await getBackendSrv().get('/api/alerts', options);\n    dispatch(loadedAlertRules(rules));\n  };\n}\n\nexport function togglePauseAlertRule(id: number, options: { paused: boolean }): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().post(`/api/alerts/${id}/pause`, options);\n    const stateFilter = locationService.getSearchObject().state || 'all';\n    dispatch(getAlertRulesAsync({ state: stateFilter.toString() }));\n  };\n}\n\nexport function createNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().post(`/api/alert-notifications`, data);\n      appEvents.emit(AppEvents.alertSuccess, ['Notification created']);\n      locationService.push('/alerting/notifications');\n    } catch (error) {\n      appEvents.emit(AppEvents.alertError, [error.data.error]);\n    }\n  };\n}\n\nexport function updateNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().put(`/api/alert-notifications/${data.id}`, data);\n      appEvents.emit(AppEvents.alertSuccess, ['Notification updated']);\n    } catch (error) {\n      appEvents.emit(AppEvents.alertError, [error.data.error]);\n    }\n  };\n}\n\nexport function testNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const channel = getState().notificationChannel.notificationChannel;\n    await getBackendSrv().post('/api/alert-notifications/test', { id: channel.id, ...data });\n  };\n}\n\nexport function loadNotificationTypes(): ThunkResult<void> {\n  return async (dispatch) => {\n    const alertNotifiers: NotifierDTO[] = await getBackendSrv().get(`/api/alert-notifiers`);\n\n    const notificationTypes = alertNotifiers.sort((o1, o2) => {\n      if (o1.name > o2.name) {\n        return 1;\n      }\n      return -1;\n    });\n\n    dispatch(setNotificationChannels(notificationTypes));\n  };\n}\n\nexport function loadNotificationChannel(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await dispatch(loadNotificationTypes());\n    const notificationChannel = await getBackendSrv().get(`/api/alert-notifications/${id}`);\n    dispatch(notificationChannelLoaded(notificationChannel));\n  };\n}\n","import React, { FC } from 'react';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper: FC<Props> = ({ children, pageId, isLoading }) => {\n  const navModel = getNavModel(\n    useSelector((state: StoreState) => state.navIndex),\n    pageId\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\nimport { DynamicTable, DynamicTableProps } from './DynamicTable';\n\nexport type DynamicTableWithGuidelinesProps<T> = Omit<DynamicTableProps<T>, 'renderPrefixHeader, renderPrefixCell'>;\n\n// DynamicTable, but renders visual guidelines on the left, for larger screen widths\nexport const DynamicTableWithGuidelines = <T extends object>({\n  renderExpandedContent,\n  ...props\n}: DynamicTableWithGuidelinesProps<T>) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <DynamicTable\n      renderExpandedContent={\n        renderExpandedContent\n          ? (item, index, items) => (\n              <>\n                {!(index === items.length - 1) && <div className={cx(styles.contentGuideline, styles.guideline)} />}\n                {renderExpandedContent(item, index, items)}\n              </>\n            )\n          : undefined\n      }\n      renderPrefixHeader={() => (\n        <div className={styles.relative}>\n          <div className={cx(styles.headerGuideline, styles.guideline)} />\n        </div>\n      )}\n      renderPrefixCell={(_, index, items) => (\n        <div className={styles.relative}>\n          <div className={cx(styles.topGuideline, styles.guideline)} />\n          {!(index === items.length - 1) && <div className={cx(styles.bottomGuideline, styles.guideline)} />}\n        </div>\n      )}\n      {...props}\n    />\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  relative: css`\n    position: relative;\n    height: 100%;\n  `,\n  guideline: css`\n    left: -19px;\n    border-left: 1px solid ${theme.colors.border.medium};\n    position: absolute;\n\n    ${theme.breakpoints.down('md')} {\n      display: none;\n    }\n  `,\n  topGuideline: css`\n    width: 18px;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n    top: 0;\n    bottom: 50%;\n  `,\n  bottomGuideline: css`\n    top: 50%;\n    bottom: 0;\n  `,\n  contentGuideline: css`\n    top: 0;\n    bottom: 0;\n    left: -49px !important;\n  `,\n  headerGuideline: css`\n    top: -25px;\n    bottom: 0;\n  `,\n});\n","import { Icon, IconName, useStyles, Tooltip } from '@grafana/ui';\nimport { PopoverContent } from '@grafana/ui/src/components/Tooltip/Tooltip';\nimport { TooltipPlacement } from '@grafana/ui/src/components/Tooltip/PopoverController';\nimport React, { FC } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { Link } from 'react-router-dom';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon: FC<Props> = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}) => {\n  const iconEl = (\n    <Icon role=\"button\" className={cx(useStyles(getStyle), className)} onClick={onClick} name={icon} {...rest} />\n  );\n\n  const ariaLabel = typeof tooltip === 'string' ? tooltip : undefined;\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {(() => {\n        if (to) {\n          return (\n            <Link aria-label={ariaLabel} to={to} target={target}>\n              {iconEl}\n            </Link>\n          );\n        }\n        return iconEl;\n      })()}\n    </Tooltip>\n  );\n};\n\nexport const getStyle = () => css`\n  cursor: pointer;\n`;\n","import { CombinedRule } from 'app/types/unified-alerting';\nimport React, { FC } from 'react';\nimport { useStyles2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { AlertLabels } from '../AlertLabels';\nimport { DetailsField } from '../DetailsField';\nimport { RuleDetailsActionButtons } from './RuleDetailsActionButtons';\nimport { RuleDetailsDataSources } from './RuleDetailsDataSources';\nimport { RuleDetailsMatchingInstances } from './RuleDetailsMatchingInstances';\nimport { RuleDetailsExpression } from './RuleDetailsExpression';\nimport { RuleDetailsAnnotations } from './RuleDetailsAnnotations';\n\ninterface Props {\n  rule: CombinedRule;\n}\n\nexport const RuleDetails: FC<Props> = ({ rule }) => {\n  const styles = useStyles2(getStyles);\n  const {\n    promRule,\n    namespace: { rulesSource },\n  } = rule;\n\n  const annotations = Object.entries(rule.annotations).filter(([_, value]) => !!value.trim());\n\n  return (\n    <div>\n      <RuleDetailsActionButtons rule={rule} rulesSource={rulesSource} />\n      <div className={styles.wrapper}>\n        <div className={styles.leftSide}>\n          {!!rule.labels && !!Object.keys(rule.labels).length && (\n            <DetailsField label=\"Labels\" horizontal={true}>\n              <AlertLabels labels={rule.labels} />\n            </DetailsField>\n          )}\n          <RuleDetailsExpression rulesSource={rulesSource} rule={rule} annotations={annotations} />\n          <RuleDetailsAnnotations annotations={annotations} />\n        </div>\n        <div className={styles.rightSide}>\n          <RuleDetailsDataSources rulesSource={rulesSource} rule={rule} />\n        </div>\n      </div>\n      <RuleDetailsMatchingInstances promRule={promRule} />\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    display: flex;\n    flex-direction: row;\n    ${theme.breakpoints.down('md')} {\n      flex-direction: column;\n    }\n  `,\n  leftSide: css`\n    flex: 1;\n  `,\n  rightSide: css`\n    ${theme.breakpoints.up('md')} {\n      padding-left: 90px;\n      width: 300px;\n    }\n  `,\n});\n","import { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport React, { FC, useMemo } from 'react';\nimport { css, cx } from '@emotion/css';\nimport { RuleDetails } from './RuleDetails';\nimport { isCloudRulesSource } from '../../utils/datasource';\nimport { useHasRuler } from '../../hooks/useHasRuler';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { Annotation } from '../../utils/constants';\nimport { RuleState } from './RuleState';\nimport { RuleHealth } from './RuleHealth';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { DynamicTableWithGuidelines } from '../DynamicTableWithGuidelines';\n\ntype RuleTableColumnProps = DynamicTableColumnProps<CombinedRule>;\ntype RuleTableItemProps = DynamicTableItemProps<CombinedRule>;\n\ninterface Props {\n  rules: CombinedRule[];\n  showGuidelines?: boolean;\n  showGroupColumn?: boolean;\n  showSummaryColumn?: boolean;\n  emptyMessage?: string;\n  className?: string;\n}\n\nexport const RulesTable: FC<Props> = ({\n  rules,\n  className,\n  showGuidelines = false,\n  emptyMessage = 'No rules found.',\n  showGroupColumn = false,\n  showSummaryColumn = false,\n}) => {\n  const styles = useStyles2(getStyles);\n\n  const wrapperClass = cx(styles.wrapper, className, { [styles.wrapperMargin]: showGuidelines });\n\n  const items = useMemo((): RuleTableItemProps[] => {\n    const seenKeys: string[] = [];\n    return rules.map((rule, ruleIdx) => {\n      let key = JSON.stringify([rule.promRule?.type, rule.labels, rule.query, rule.name, rule.annotations]);\n      if (seenKeys.includes(key)) {\n        key += `-${ruleIdx}`;\n      }\n      seenKeys.push(key);\n      return {\n        id: key,\n        data: rule,\n      };\n    });\n  }, [rules]);\n\n  const columns = useColumns(showSummaryColumn, showGroupColumn);\n\n  if (!rules.length) {\n    return <div className={cx(wrapperClass, styles.emptyMessage)}>{emptyMessage}</div>;\n  }\n\n  const TableComponent = showGuidelines ? DynamicTableWithGuidelines : DynamicTable;\n\n  return (\n    <div className={wrapperClass} data-testid=\"rules-table\">\n      <TableComponent\n        cols={columns}\n        isExpandable={true}\n        items={items}\n        renderExpandedContent={({ data: rule }) => <RuleDetails rule={rule} />}\n      />\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapperMargin: css`\n    ${theme.breakpoints.up('md')} {\n      margin-left: 36px;\n    }\n  `,\n  emptyMessage: css`\n    padding: ${theme.spacing(1)};\n  `,\n  wrapper: css`\n    width: auto;\n    background-color: ${theme.colors.background.secondary};\n    border-radius: ${theme.shape.borderRadius()};\n  `,\n});\n\nfunction useColumns(showSummaryColumn: boolean, showGroupColumn: boolean) {\n  const hasRuler = useHasRuler();\n\n  return useMemo((): RuleTableColumnProps[] => {\n    const columns: RuleTableColumnProps[] = [\n      {\n        id: 'state',\n        label: 'State',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => {\n          const { namespace } = rule;\n          const { rulesSource } = namespace;\n          const { promRule, rulerRule } = rule;\n          const isDeleting = !!(hasRuler(rulesSource) && promRule && !rulerRule);\n          const isCreating = !!(hasRuler(rulesSource) && rulerRule && !promRule);\n          return <RuleState rule={rule} isDeleting={isDeleting} isCreating={isCreating} />;\n        },\n        size: '165px',\n      },\n      {\n        id: 'name',\n        label: 'Name',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => rule.name,\n        size: 5,\n      },\n      {\n        id: 'health',\n        label: 'Health',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: { promRule } }) => (promRule ? <RuleHealth rule={promRule} /> : null),\n        size: '75px',\n      },\n    ];\n    if (showSummaryColumn) {\n      columns.push({\n        id: 'summary',\n        label: 'Summary',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => rule.annotations[Annotation.summary] ?? '',\n        size: 5,\n      });\n    }\n    if (showGroupColumn) {\n      columns.push({\n        id: 'group',\n        label: 'Group',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => {\n          const { namespace, group } = rule;\n          const { rulesSource } = namespace;\n          return isCloudRulesSource(rulesSource) ? `${namespace.name} > ${group.name}` : namespace.name;\n        },\n        size: 5,\n      });\n    }\n    return columns;\n  }, [hasRuler, showSummaryColumn, showGroupColumn]);\n}\n","import { RulesSource } from 'app/types/unified-alerting';\nimport { useCallback } from 'react';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\n// datasource has ruler if it's grafana managed or if we're able to load rules from it\nexport function useHasRuler(): (rulesSource: string | RulesSource) => boolean {\n  const rulerRules = useUnifiedAlertingSelector((state) => state.rulerRules);\n  return useCallback(\n    (rulesSource: string | RulesSource) => {\n      const rulesSourceName = typeof rulesSource === 'string' ? rulesSource : rulesSource.name;\n      return rulesSourceName === GRAFANA_RULES_SOURCE_NAME || !!rulerRules[rulesSourceName]?.result;\n    },\n    [rulerRules]\n  );\n}\n"],"names":["useCleanup","stateSelector","dispatch","useDispatch","selectorRef","useRef","current","useEffect","cleanUpAction","useQueryParams","search","useLocation","useMemo","locationSearchToObject","useCallback","values","replace","setImmediate","locationService","rule","onTogglePause","ruleUrl","url","panelId","renderText","text","highlightClassName","textToHighlight","searchWords","Card","heading","href","name","Icon","size","stateIcon","className","stateClass","stateText","stateAge","info","Button","variant","icon","state","onClick","LinkButton","getSearchQuery","searchQuery","getAlertRuleItems","regex","RegExp","alertRules","items","filter","item","test","AlertHowToModal","onDismiss","Modal","title","isOpen","onClickBackdrop","VerticalGroup","spacing","src","alt","UnifiedAlertingPromotion","showUnifiedAlertingPromotion","setShowUnifiedAlertingPromotion","useLocalStorage","Alert","severity","onRemove","mapDispatchToProps","getAlertRulesAsync","setSearchQuery","togglePauseAlertRule","connector","connect","navModel","getNavModel","navIndex","isLoading","AlertRuleListUnconnected","PureComponent","label","value","option","appEvents","ShowModalReactEvent","component","this","props","id","paused","componentDidMount","fetchRules","componentDidUpdate","prevProps","queryParams","getStateFilter","render","Page","FilterInput","placeholder","onChange","onSearchQueryChange","htmlFor","Select","inputId","menuShouldPortal","options","stateFilters","onStateFilterChanged","config","onOpenHowTo","map","NoRulesSplash","contextSrv","EmptyListCTA","buttonIcon","buttonLink","buttonTitle","proTip","proTipLink","proTipLinkTitle","proTipTarget","CallToActionCard","message","callToActionElement","reduceNamespaces","filters","namespaceAcc","namespace","groups","reduce","reduceGroups","length","push","groupAcc","group","rules","ruleType","promRule","type","dataSource","isGrafanaRulerRule","rulerRule","isQueryingDataSource","queryString","normalizedQueryString","toLocaleLowerCase","doesNameContainsQueryString","includes","matchers","parseMatchers","doRuleLabelsMatchQuery","labelsMatchMatchers","labels","doAlertsContainMatchingLabels","PromRuleType","alerts","some","alert","alertState","isAlertingRule","grafana_alert","data","find","query","datasourceUid","ds","getDataSourceSrv","getInstanceSettings","ViewOptions","RuleTypeOptions","getStyles","theme","container","css","colors","border1","sm","inputWidth","flexRow","spaceBetween","rowChild","tooltip","xs","clearButton","setQueryParams","filterKey","setFilterKey","useState","Math","floor","random","dataSourceKey","queryStringKey","getFiltersFromUrlParams","styles","useStyles","stateOptions","Object","entries","PromAlertingRuleState","key","alertStateToReadable","handleQueryStringChange","debounce","e","target","searchIcon","Label","DataSourcePicker","alerting","noDefault","dataSourceValue","onClear","cx","Tooltip","content","Input","prefix","defaultValue","RadioButtonGroup","String","view","fullWidth","setTimeout","StateColoredText","children","status","useStyles2","success","warning","error","neutral","secondary","emptyStats","total","recording","RuleStats","showInactive","showRecording","namespaces","calculated","stats","calcRule","health","isRecordingRule","isRecordingRulerRule","forEach","statsComponents","pluralize","prev","curr","idx","Fragment","EditCloudGroupModal","onClose","loading","dispatched","useUnifiedAlertingSelector","updateLotexNamespaceAndGroup","initialAsyncRequestState","defaultValues","namespaceName","groupName","groupInterval","interval","unifiedAlerting","modal","Form","onSubmit","updateLotexNamespaceAndGroupAction","rulesSourceName","getRulesSourceName","rulesSource","newGroupName","newNamespaceName","undefined","register","errors","formState","isDirty","Field","invalid","required","pattern","durationValidationPattern","disabled","fill","JSON","stringify","RulesGroup","React","expandAll","isEditingGroup","setIsEditingGroup","isCollapsed","setIsCollapsed","hasRuler","useHasRuler","folderUID","namespace_uid","folder","useFolder","actionIcons","HorizontalGroup","Spinner","GRAFANA_RULES_SOURCE_NAME","baseUrl","kbn","canSave","ActionIcon","A","to","canAdmin","isCloudRulesSource","wrapper","header","CollapseToggle","collapseToggle","onToggle","placement","meta","dataSourceIcon","logos","small","spacer","headerStats","actionsSeparator","RulesTable","showSummaryColumn","rulesTable","showGuidelines","displayName","background","breakpoints","down","dataSourceOrigin","CloudRules","promRules","rulesDataSources","getRulesDataSources","dataSourcesLoading","sectionHeader","LoadingPlaceholder","loader","xl","GrafanaRules","RuleListStateSection","defaultCollapsed","collapsed","setCollapsed","showGroupColumn","RuleListErrors","expanded","setExpanded","closed","setClosed","promRuleRequests","rulerRuleRequests","rulerRules","promRequestErrors","rulerRequestErrors","requests","result","isRulerNotSupportedResponse","grafanaPromError","grafanaRulerError","uid","moreButton","VIEWS","grafanaNamespaces","cloudNamespaces","sorted","sort","a","b","localeCompare","ns","isGrafanaRulesSource","groupedRules","RuleList","withErrorBoundary","rulesDataSourceNames","getAllRulesSourceNames","location","setExpandAll","filtersActive","ViewComponent","fetchAllPromAndRulerRulesAction","setInterval","RULE_LIST_POLL_INTERVAL_MS","clearInterval","haveResults","keys","showNewAlertSplash","filteredNamespaces","useFilteredRules","useCombinedRuleNamespaces","AlertingPageWrapper","pageId","break","buttonsContainer","statsContainer","expandAllButton","urlUtil","returnTo","pathname","style","border","medium","AlertRuleList","async","loadAlertRules","getBackendSrv","get","loadedAlertRules","post","toString","createNotificationChannel","AppEvents","updateNotificationChannel","put","testNotificationChannel","getState","channel","notificationChannel","loadNotificationTypes","notificationTypes","o1","o2","setNotificationChannels","loadNotificationChannel","notificationChannelLoaded","useSelector","DynamicTableWithGuidelines","renderExpandedContent","index","contentGuideline","guideline","renderPrefixHeader","relative","headerGuideline","renderPrefixCell","_","topGuideline","bottomGuideline","tooltipPlacement","rest","iconEl","role","getStyle","ariaLabel","Link","RuleDetails","annotations","trim","RuleDetailsActionButtons","leftSide","DetailsField","horizontal","AlertLabels","RuleDetailsExpression","RuleDetailsAnnotations","rightSide","RuleDetailsDataSources","RuleDetailsMatchingInstances","up","emptyMessage","wrapperClass","wrapperMargin","seenKeys","ruleIdx","columns","renderCell","isDeleting","isCreating","RuleState","RuleHealth","Annotation","useColumns","TableComponent","DynamicTable","cols","isExpandable","shape","borderRadius"],"sourceRoot":""}