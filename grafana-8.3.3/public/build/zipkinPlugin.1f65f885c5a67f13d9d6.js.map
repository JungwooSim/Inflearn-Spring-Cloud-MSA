{"version":3,"file":"zipkinPlugin.1f65f885c5a67f13d9d6.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/NodeGraphSettings.tsx","webpack://grafana/./public/app/core/components/TraceToLogsSettings.tsx","webpack://grafana/./public/app/core/utils/tracing.ts","webpack://grafana/./public/app/plugins/datasource/zipkin/utils/graphTransform.ts","webpack://grafana/./public/app/plugins/datasource/zipkin/datasource.ts","webpack://grafana/./public/app/plugins/datasource/zipkin/QueryField.tsx","webpack://grafana/./public/app/plugins/datasource/zipkin/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/zipkin/module.ts","webpack://grafana/./public/app/plugins/datasource/zipkin/utils/transforms.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-ca2705900f/3/opt/drone/yarncache/react-use-npm-17.2.4-c702db5427-3c885c3798.zip/node_modules/react-use/esm/useMount.js"],"sourcesContent":["import React from 'react';\nimport { css } from '@emotion/css';\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { InlineField, InlineFieldRow, InlineSwitch, useStyles } from '@grafana/ui';\n\nexport interface NodeGraphOptions {\n  enabled?: boolean;\n}\n\nexport interface NodeGraphData extends DataSourceJsonData {\n  nodeGraph?: NodeGraphOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<NodeGraphData> {}\n\nexport function NodeGraphSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <h3 className=\"page-heading\">Node Graph</h3>\n      <InlineFieldRow className={styles.row}>\n        <InlineField\n          tooltip=\"Enables the Node Graph visualization in the trace viewer.\"\n          label=\"Enable Node Graph\"\n          labelWidth={26}\n        >\n          <InlineSwitch\n            value={options.jsonData.nodeGraph?.enabled}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'nodeGraph', {\n                ...options.jsonData.nodeGraph,\n                enabled: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  container: css`\n    label: container;\n    width: 100%;\n  `,\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n});\n","import { css } from '@emotion/css';\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { InlineField, InlineFieldRow, Input, TagsInput, useStyles, InlineSwitch } from '@grafana/ui';\nimport React from 'react';\n\nexport interface TraceToLogsOptions {\n  datasourceUid?: string;\n  tags?: string[];\n  spanStartTimeShift?: string;\n  spanEndTimeShift?: string;\n  filterByTraceID?: boolean;\n  filterBySpanID?: boolean;\n  lokiSearch?: boolean;\n}\n\nexport interface TraceToLogsData extends DataSourceJsonData {\n  tracesToLogs?: TraceToLogsOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TraceToLogsData> {}\n\nexport function TraceToLogsSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={css({ width: '100%' })}>\n      <h3 className=\"page-heading\">Trace to logs</h3>\n\n      <div className={styles.infoText}>\n        Trace to logs let&apos;s you navigate from a trace span to the selected data source&apos;s log.\n      </div>\n\n      <InlineFieldRow>\n        <InlineField tooltip=\"The data source the trace is going to navigate to\" label=\"Data source\" labelWidth={26}>\n          <DataSourcePicker\n            pluginId=\"loki\"\n            current={options.jsonData.tracesToLogs?.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                datasourceUid: ds.uid,\n                tags: options.jsonData.tracesToLogs?.tags,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          tooltip=\"Tags that will be used in the Loki query. Default tags: 'cluster', 'hostname', 'namespace', 'pod'\"\n          label=\"Tags\"\n          labelWidth={26}\n        >\n          <TagsInput\n            tags={options.jsonData.tracesToLogs?.tags}\n            width={40}\n            onChange={(tags) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                datasourceUid: options.jsonData.tracesToLogs?.datasourceUid,\n                tags: tags,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Span start time shift\"\n          labelWidth={26}\n          grow\n          tooltip=\"Shifts the start time of the span. Default 0 (Time units can be used here, for example: 5s, 1m, 3h)\"\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"1h\"\n            width={40}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                spanStartTimeShift: v.currentTarget.value,\n              })\n            }\n            value={options.jsonData.tracesToLogs?.spanStartTimeShift || ''}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Span end time shift\"\n          labelWidth={26}\n          grow\n          tooltip=\"Shifts the end time of the span. Default 0 Time units can be used here, for example: 5s, 1m, 3h\"\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"1h\"\n            width={40}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                spanEndTimeShift: v.currentTarget.value,\n              })\n            }\n            value={options.jsonData.tracesToLogs?.spanEndTimeShift || ''}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Filter by Trace ID\"\n          labelWidth={26}\n          grow\n          tooltip=\"Filters logs by Trace ID. Appends '|=<trace id>' to the query.\"\n        >\n          <InlineSwitch\n            value={options.jsonData.tracesToLogs?.filterByTraceID}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                filterByTraceID: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Filter by Span ID\"\n          labelWidth={26}\n          grow\n          tooltip=\"Filters logs by Span ID. Appends '|=<span id>' to the query.\"\n        >\n          <InlineSwitch\n            value={options.jsonData.tracesToLogs?.filterBySpanID}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                filterBySpanID: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField label=\"Loki Search\" labelWidth={26} grow tooltip=\"Use this logs data source to search for traces.\">\n          <InlineSwitch\n            defaultChecked={true}\n            value={options.jsonData.tracesToLogs?.lokiSearch}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                lokiSearch: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing.md};\n    color: ${theme.colors.textSemiWeak};\n  `,\n});\n","/**\n * Get non overlapping duration of the ranges as they can overlap or have gaps.\n */\nimport { FieldType, MutableDataFrame, NodeGraphDataFrameFieldNames as Fields } from '@grafana/data';\n\nexport function getNonOverlappingDuration(ranges: Array<[number, number]>): number {\n  ranges.sort((a, b) => a[0] - b[0]);\n  const mergedRanges = ranges.reduce((acc, range) => {\n    if (!acc.length) {\n      return [range];\n    }\n    const tail = acc.slice(-1)[0];\n    const [prevStart, prevEnd] = tail;\n    const [start, end] = range;\n    if (end < prevEnd) {\n      // In this case the range is completely inside the prev range so we can just ignore it.\n      return acc;\n    }\n\n    if (start > prevEnd) {\n      // There is no overlap so we can just add it to stack\n      return [...acc, range];\n    }\n\n    // We know there is overlap and current range ends later than previous so we can just extend the range\n    return [...acc.slice(0, -1), [prevStart, end]] as Array<[number, number]>;\n  }, [] as Array<[number, number]>);\n\n  return mergedRanges.reduce((acc, range) => {\n    return acc + (range[1] - range[0]);\n  }, 0);\n}\n\n/**\n * Returns a map of the spans with children array for easier processing. It will also contain empty spans in case\n * span is missing but other spans are it's children. This is more generic because it needs to allow iterating over\n * both arrays and dataframe views.\n */\nexport function makeSpanMap<T>(\n  getSpan: (index: number) => { span: T; id: string; parentIds: string[] } | undefined\n): { [id: string]: { span: T; children: string[] } } {\n  const spanMap: { [id: string]: { span?: T; children: string[] } } = {};\n\n  let span;\n  for (let index = 0; (span = getSpan(index)), !!span; index++) {\n    if (!spanMap[span.id]) {\n      spanMap[span.id] = {\n        span: span.span,\n        children: [],\n      };\n    } else {\n      spanMap[span.id].span = span.span;\n    }\n\n    for (const parentId of span.parentIds) {\n      if (parentId) {\n        if (!spanMap[parentId]) {\n          spanMap[parentId] = {\n            span: undefined,\n            children: [span.id],\n          };\n        } else {\n          spanMap[parentId].children.push(span.id);\n        }\n      }\n    }\n  }\n  return spanMap as { [id: string]: { span: T; children: string[] } };\n}\n\nexport function getStats(duration: number, traceDuration: number, selfDuration: number) {\n  return {\n    main: `${toFixedNoTrailingZeros(duration)}ms (${toFixedNoTrailingZeros((duration / traceDuration) * 100)}%)`,\n    secondary: `${toFixedNoTrailingZeros(selfDuration)}ms (${toFixedNoTrailingZeros(\n      (selfDuration / duration) * 100\n    )}%)`,\n  };\n}\n\nfunction toFixedNoTrailingZeros(n: number) {\n  return parseFloat(n.toFixed(2));\n}\n\n/**\n * Create default frames used when returning data for node graph.\n */\nexport function makeFrames() {\n  const nodesFrame = new MutableDataFrame({\n    fields: [\n      { name: Fields.id, type: FieldType.string },\n      { name: Fields.title, type: FieldType.string },\n      { name: Fields.subTitle, type: FieldType.string },\n      { name: Fields.mainStat, type: FieldType.string, config: { displayName: 'Total time (% of trace)' } },\n      { name: Fields.secondaryStat, type: FieldType.string, config: { displayName: 'Self time (% of total)' } },\n      {\n        name: Fields.color,\n        type: FieldType.number,\n        config: { color: { mode: 'continuous-GrYlRd' }, displayName: 'Self time / Trace duration' },\n      },\n    ],\n    meta: {\n      preferredVisualisationType: 'nodeGraph',\n    },\n  });\n\n  const edgesFrame = new MutableDataFrame({\n    fields: [\n      { name: Fields.id, type: FieldType.string },\n      { name: Fields.target, type: FieldType.string },\n      { name: Fields.source, type: FieldType.string },\n    ],\n    meta: {\n      preferredVisualisationType: 'nodeGraph',\n    },\n  });\n\n  return [nodesFrame, edgesFrame];\n}\n","import { DataFrame, NodeGraphDataFrameFieldNames as Fields } from '@grafana/data';\nimport { ZipkinSpan } from '../types';\nimport { getNonOverlappingDuration, getStats, makeFrames, makeSpanMap } from '../../../../core/utils/tracing';\n\ninterface Node {\n  [Fields.id]: string;\n  [Fields.title]: string;\n  [Fields.subTitle]: string;\n  [Fields.mainStat]: string;\n  [Fields.secondaryStat]: string;\n  [Fields.color]: number;\n}\n\ninterface Edge {\n  [Fields.id]: string;\n  [Fields.target]: string;\n  [Fields.source]: string;\n}\n\nexport function createGraphFrames(data: ZipkinSpan[]): DataFrame[] {\n  const { nodes, edges } = convertTraceToGraph(data);\n  const [nodesFrame, edgesFrame] = makeFrames();\n\n  for (const node of nodes) {\n    nodesFrame.add(node);\n  }\n\n  for (const edge of edges) {\n    edgesFrame.add(edge);\n  }\n\n  return [nodesFrame, edgesFrame];\n}\n\nfunction convertTraceToGraph(spans: ZipkinSpan[]): { nodes: Node[]; edges: Edge[] } {\n  const nodes: Node[] = [];\n  const edges: Edge[] = [];\n\n  const traceDuration = findTraceDuration(spans);\n  const spanMap = makeSpanMap((index) => {\n    if (index >= spans.length) {\n      return undefined;\n    }\n    return {\n      span: spans[index],\n      id: spans[index].id,\n      parentIds: spans[index].parentId ? [spans[index].parentId!] : [],\n    };\n  });\n\n  for (const span of spans) {\n    const ranges: Array<[number, number]> = spanMap[span.id].children.map((c) => {\n      const span = spanMap[c].span;\n      return [span.timestamp, span.timestamp + span.duration];\n    });\n    const childrenDuration = getNonOverlappingDuration(ranges);\n    const selfDuration = span.duration - childrenDuration;\n    const stats = getStats(span.duration / 1000, traceDuration / 1000, selfDuration / 1000);\n\n    nodes.push({\n      [Fields.id]: span.id,\n      [Fields.title]: span.localEndpoint?.serviceName || span.remoteEndpoint?.serviceName || 'unknown',\n      [Fields.subTitle]: span.name,\n      [Fields.mainStat]: stats.main,\n      [Fields.secondaryStat]: stats.secondary,\n      [Fields.color]: selfDuration / traceDuration,\n    });\n\n    if (span.parentId && spanMap[span.parentId].span) {\n      edges.push({\n        [Fields.id]: span.parentId + '--' + span.id,\n        [Fields.target]: span.id,\n        [Fields.source]: span.parentId,\n      });\n    }\n  }\n\n  return { nodes, edges };\n}\n\n/**\n * Get the duration of the whole trace as it isn't a part of the response data.\n * Note: Seems like this should be the same as just longest span, but this is probably safer.\n */\nfunction findTraceDuration(spans: ZipkinSpan[]): number {\n  let traceEndTime = 0;\n  let traceStartTime = Infinity;\n\n  for (const span of spans) {\n    if (span.timestamp < traceStartTime) {\n      traceStartTime = span.timestamp;\n    }\n\n    if (span.timestamp + span.duration > traceEndTime) {\n      traceEndTime = span.timestamp + span.duration;\n    }\n  }\n  return traceEndTime - traceStartTime;\n}\n","import { lastValueFrom, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BackendSrvRequest, FetchResponse, getBackendSrv } from '@grafana/runtime';\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  DataSourceJsonData,\n  FieldType,\n  MutableDataFrame,\n} from '@grafana/data';\n\nimport { serializeParams } from '../../../core/utils/fetch';\nimport { apiPrefix } from './constants';\nimport { ZipkinQuery, ZipkinSpan } from './types';\nimport { createGraphFrames } from './utils/graphTransform';\nimport { transformResponse } from './utils/transforms';\nimport { NodeGraphOptions } from 'app/core/components/NodeGraphSettings';\n\nexport interface ZipkinJsonData extends DataSourceJsonData {\n  nodeGraph?: NodeGraphOptions;\n}\n\nexport class ZipkinDatasource extends DataSourceApi<ZipkinQuery, ZipkinJsonData> {\n  uploadedJson: string | ArrayBuffer | null = null;\n  nodeGraph?: NodeGraphOptions;\n  constructor(private instanceSettings: DataSourceInstanceSettings<ZipkinJsonData>) {\n    super(instanceSettings);\n    this.nodeGraph = instanceSettings.jsonData.nodeGraph;\n  }\n\n  query(options: DataQueryRequest<ZipkinQuery>): Observable<DataQueryResponse> {\n    const target = options.targets[0];\n    if (target.queryType === 'upload') {\n      if (!this.uploadedJson) {\n        return of({ data: [] });\n      }\n\n      try {\n        const traceData = JSON.parse(this.uploadedJson as string);\n        return of(responseToDataQueryResponse({ data: traceData }, this.nodeGraph?.enabled));\n      } catch (error) {\n        return of({ error: { message: 'JSON is not valid Zipkin format' }, data: [] });\n      }\n    }\n\n    if (target.query) {\n      return this.request<ZipkinSpan[]>(`${apiPrefix}/trace/${encodeURIComponent(target.query)}`).pipe(\n        map((res) => responseToDataQueryResponse(res, this.nodeGraph?.enabled))\n      );\n    }\n    return of(emptyDataQueryResponse);\n  }\n\n  async metadataRequest(url: string, params?: Record<string, any>): Promise<any> {\n    const res = await lastValueFrom(this.request(url, params, { hideFromInspector: true }));\n    return res.data;\n  }\n\n  async testDatasource(): Promise<{ status: string; message: string }> {\n    await this.metadataRequest(`${apiPrefix}/services`);\n    return { status: 'success', message: 'Data source is working' };\n  }\n\n  getQueryDisplayText(query: ZipkinQuery): string {\n    return query.query;\n  }\n\n  private request<T = any>(\n    apiUrl: string,\n    data?: any,\n    options?: Partial<BackendSrvRequest>\n  ): Observable<FetchResponse<T>> {\n    const params = data ? serializeParams(data) : '';\n    const url = `${this.instanceSettings.url}${apiUrl}${params.length ? `?${params}` : ''}`;\n    const req = {\n      ...options,\n      url,\n    };\n\n    return getBackendSrv().fetch<T>(req);\n  }\n}\n\nfunction responseToDataQueryResponse(response: { data: ZipkinSpan[] }, nodeGraph = false): DataQueryResponse {\n  let data = response?.data ? [transformResponse(response?.data)] : [];\n  if (nodeGraph) {\n    data.push(...createGraphFrames(response?.data));\n  }\n  return {\n    data,\n  };\n}\n\nconst emptyDataQueryResponse = {\n  data: [\n    new MutableDataFrame({\n      fields: [\n        {\n          name: 'trace',\n          type: FieldType.trace,\n          values: [],\n        },\n      ],\n      meta: {\n        preferredVisualisationType: 'trace',\n        custom: {\n          traceFormat: 'zipkin',\n        },\n      },\n    }),\n  ],\n};\n","import { css } from '@emotion/css';\nimport { QueryEditorProps } from '@grafana/data';\nimport {\n  ButtonCascader,\n  CascaderOption,\n  FileDropzone,\n  InlineField,\n  InlineFieldRow,\n  RadioButtonGroup,\n  useTheme2,\n  QueryField,\n} from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { dispatch } from 'app/store/store';\nimport { fromPairs } from 'lodash';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { useAsyncFn, useMount, useMountedState } from 'react-use';\nimport { AsyncState } from 'react-use/lib/useAsyncFn';\nimport { apiPrefix } from './constants';\nimport { ZipkinDatasource } from './datasource';\nimport { ZipkinQuery, ZipkinQueryType, ZipkinSpan } from './types';\n\ntype Props = QueryEditorProps<ZipkinDatasource, ZipkinQuery>;\n\nexport const ZipkinQueryField = ({ query, onChange, onRunQuery, datasource }: Props) => {\n  const serviceOptions = useServices(datasource);\n  const theme = useTheme2();\n  const { onLoadOptions, allOptions } = useLoadOptions(datasource);\n\n  const onSelectTrace = useCallback(\n    (values: string[], selectedOptions: CascaderOption[]) => {\n      if (selectedOptions.length === 3) {\n        const traceID = selectedOptions[2].value;\n        onChange({ ...query, query: traceID });\n        onRunQuery();\n      }\n    },\n    [onChange, onRunQuery, query]\n  );\n\n  const onChangeQuery = (value: string) => {\n    const nextQuery = { ...query, query: value };\n    onChange(nextQuery);\n  };\n\n  let cascaderOptions = useMapToCascaderOptions(serviceOptions, allOptions);\n\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField label=\"Query type\">\n          <RadioButtonGroup<ZipkinQueryType>\n            options={[\n              { value: 'traceID', label: 'TraceID' },\n              { value: 'upload', label: 'JSON file' },\n            ]}\n            value={query.queryType || 'traceID'}\n            onChange={(v) =>\n              onChange({\n                ...query,\n                queryType: v,\n              })\n            }\n            size=\"md\"\n          />\n        </InlineField>\n      </InlineFieldRow>\n      {query.queryType === 'upload' ? (\n        <div className={css({ padding: theme.spacing(2) })}>\n          <FileDropzone\n            options={{ multiple: false }}\n            onLoad={(result) => {\n              datasource.uploadedJson = result;\n              onRunQuery();\n            }}\n          />\n        </div>\n      ) : (\n        <InlineFieldRow>\n          <ButtonCascader options={cascaderOptions} onChange={onSelectTrace} loadData={onLoadOptions}>\n            Traces\n          </ButtonCascader>\n          <div className=\"gf-form gf-form--grow flex-shrink-1 min-width-15\">\n            <QueryField\n              query={query.query}\n              onChange={onChangeQuery}\n              onRunQuery={onRunQuery}\n              placeholder={'Insert Trace ID (run with Shift+Enter)'}\n              portalOrigin=\"zipkin\"\n            />\n          </div>\n        </InlineFieldRow>\n      )}\n    </>\n  );\n};\n\n// Exported for tests\nexport function useServices(datasource: ZipkinDatasource): AsyncState<CascaderOption[]> {\n  const url = `${apiPrefix}/services`;\n\n  const [servicesOptions, fetch] = useAsyncFn(async (): Promise<CascaderOption[]> => {\n    try {\n      const services: string[] | null = await datasource.metadataRequest(url);\n      if (services) {\n        return services.sort().map((service) => ({\n          label: service,\n          value: service,\n          isLeaf: false,\n        }));\n      }\n      return [];\n    } catch (error) {\n      dispatch(notifyApp(createErrorNotification('Failed to load services from Zipkin', error)));\n      throw error;\n    }\n  }, [datasource]);\n\n  useMount(() => {\n    // We should probably call this periodically to get new services after mount.\n    fetch();\n  });\n\n  return servicesOptions;\n}\n\ntype OptionsState = {\n  [serviceName: string]: {\n    [spanName: string]: {\n      [traceId: string]: string;\n    };\n  };\n};\n\n// Exported for tests\nexport function useLoadOptions(datasource: ZipkinDatasource) {\n  const isMounted = useMountedState();\n  const [allOptions, setAllOptions] = useState({} as OptionsState);\n\n  const [, fetchSpans] = useAsyncFn(\n    async function findSpans(service: string): Promise<void> {\n      const url = `${apiPrefix}/spans`;\n      try {\n        // The response of this should have been full ZipkinSpan objects based on API docs but is just list\n        // of span names.\n        // TODO: check if this is some issue of version used or something else\n        const response: string[] = await datasource.metadataRequest(url, { serviceName: service });\n        if (isMounted()) {\n          setAllOptions((state) => {\n            const spanOptions = fromPairs(response.map((span: string) => [span, undefined]));\n            return {\n              ...state,\n              [service]: spanOptions as any,\n            };\n          });\n        }\n      } catch (error) {\n        dispatch(notifyApp(createErrorNotification('Failed to load spans from Zipkin', error)));\n        throw error;\n      }\n    },\n    [datasource, allOptions]\n  );\n\n  const [, fetchTraces] = useAsyncFn(\n    async function findTraces(serviceName: string, spanName: string): Promise<void> {\n      const url = `${apiPrefix}/traces`;\n      const search = {\n        serviceName,\n        spanName,\n        // See other params and default here https://zipkin.io/zipkin-api/#/default/get_traces\n      };\n      try {\n        // This should return just root traces as there isn't any nesting\n        const traces: ZipkinSpan[][] = await datasource.metadataRequest(url, search);\n        if (isMounted()) {\n          const newTraces = traces.length\n            ? fromPairs(\n                traces.map((trace) => {\n                  const rootSpan = trace.find((span) => !span.parentId)!;\n\n                  return [`${rootSpan.name} [${Math.floor(rootSpan.duration / 1000)} ms]`, rootSpan.traceId];\n                })\n              )\n            : noTracesOptions;\n\n          setAllOptions((state) => {\n            const spans = state[serviceName];\n            return {\n              ...state,\n              [serviceName]: {\n                ...spans,\n                [spanName]: newTraces,\n              },\n            };\n          });\n        }\n      } catch (error) {\n        dispatch(notifyApp(createErrorNotification('Failed to load spans from Zipkin', error)));\n        throw error;\n      }\n    },\n    [datasource]\n  );\n\n  const onLoadOptions = useCallback(\n    (selectedOptions: CascaderOption[]) => {\n      const service = selectedOptions[0].value;\n      if (selectedOptions.length === 1) {\n        fetchSpans(service);\n      } else if (selectedOptions.length === 2) {\n        const spanName = selectedOptions[1].value;\n        fetchTraces(service, spanName);\n      }\n    },\n    [fetchSpans, fetchTraces]\n  );\n\n  return {\n    onLoadOptions,\n    allOptions,\n  };\n}\n\nfunction useMapToCascaderOptions(services: AsyncState<CascaderOption[]>, allOptions: OptionsState) {\n  return useMemo(() => {\n    let cascaderOptions: CascaderOption[] = [];\n\n    if (services.value && services.value.length) {\n      cascaderOptions = services.value.map((services) => {\n        return {\n          ...services,\n          children:\n            allOptions[services.value] &&\n            Object.keys(allOptions[services.value]).map((spanName) => {\n              return {\n                label: spanName,\n                value: spanName,\n                isLeaf: false,\n                children:\n                  allOptions[services.value][spanName] &&\n                  Object.keys(allOptions[services.value][spanName]).map((traceName) => {\n                    return {\n                      label: traceName,\n                      value: allOptions[services.value][spanName][traceName],\n                    };\n                  }),\n              };\n            }),\n        };\n      });\n    } else if (services.value && !services.value.length) {\n      cascaderOptions = noTracesFoundOptions;\n    }\n\n    return cascaderOptions;\n  }, [services, allOptions]);\n}\n\nconst NO_TRACES_KEY = '__NO_TRACES__';\nconst noTracesFoundOptions = [\n  {\n    label: 'No traces found',\n    value: 'no_traces',\n    isLeaf: true,\n\n    // Cannot be disabled because then cascader shows 'loading' for some reason.\n    // disabled: true,\n  },\n];\n\nconst noTracesOptions = {\n  '[No traces in time range]': NO_TRACES_KEY,\n};\n","import { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { DataSourceHttpSettings } from '@grafana/ui';\nimport { NodeGraphSettings } from 'app/core/components/NodeGraphSettings';\nimport { TraceToLogsSettings } from 'app/core/components/TraceToLogsSettings';\nimport React from 'react';\n\nexport type Props = DataSourcePluginOptionsEditorProps;\n\nexport const ConfigEditor: React.FC<Props> = ({ options, onOptionsChange }) => {\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl=\"http://localhost:9411\"\n        dataSourceConfig={options}\n        showAccessOptions={false}\n        onChange={onOptionsChange}\n      />\n\n      <div className=\"gf-form-group\">\n        <TraceToLogsSettings options={options} onOptionsChange={onOptionsChange} />\n      </div>\n\n      <div className=\"gf-form-group\">\n        <NodeGraphSettings options={options} onOptionsChange={onOptionsChange} />\n      </div>\n    </>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport { ZipkinDatasource } from './datasource';\nimport { ZipkinQueryField } from './QueryField';\nimport { ConfigEditor } from './ConfigEditor';\n\nexport const plugin = new DataSourcePlugin(ZipkinDatasource)\n  .setQueryEditor(ZipkinQueryField)\n  .setConfigEditor(ConfigEditor);\n","import { identity } from 'lodash';\nimport { ZipkinAnnotation, ZipkinEndpoint, ZipkinSpan } from '../types';\nimport { DataFrame, FieldType, MutableDataFrame, TraceKeyValuePair, TraceLog, TraceSpanRow } from '@grafana/data';\n\n/**\n * Transforms response to Grafana trace data frame.\n */\nexport function transformResponse(zSpans: ZipkinSpan[]): DataFrame {\n  const spanRows = zSpans.map(transformSpan);\n  const frame = new MutableDataFrame({\n    fields: [\n      { name: 'traceID', type: FieldType.string },\n      { name: 'spanID', type: FieldType.string },\n      { name: 'parentSpanID', type: FieldType.string },\n      { name: 'operationName', type: FieldType.string },\n      { name: 'serviceName', type: FieldType.string },\n      { name: 'serviceTags', type: FieldType.other },\n      { name: 'startTime', type: FieldType.number },\n      { name: 'duration', type: FieldType.number },\n      { name: 'logs', type: FieldType.other },\n      { name: 'tags', type: FieldType.other },\n    ],\n    meta: {\n      preferredVisualisationType: 'trace',\n      custom: {\n        traceFormat: 'zipkin',\n      },\n    },\n  });\n\n  for (const span of spanRows) {\n    frame.add(span);\n  }\n\n  return frame;\n}\n\nfunction transformSpan(span: ZipkinSpan): TraceSpanRow {\n  const row = {\n    traceID: span.traceId,\n    spanID: span.id,\n    parentSpanID: span.parentId,\n    operationName: span.name,\n    serviceName: span.localEndpoint?.serviceName || span.remoteEndpoint?.serviceName || 'unknown',\n    serviceTags: serviceTags(span),\n    startTime: span.timestamp / 1000,\n    duration: span.duration / 1000,\n    logs: span.annotations?.map(transformAnnotation) ?? [],\n    tags: Object.keys(span.tags || {}).reduce<TraceKeyValuePair[]>((acc, key) => {\n      // If tag is error we remap it to simple boolean so that the trace ui will show an error icon.\n      if (key === 'error') {\n        acc.push({\n          key: 'error',\n          value: true,\n        });\n\n        acc.push({\n          key: 'errorValue',\n          value: span.tags!['error'],\n        });\n        return acc;\n      }\n      acc.push({ key, value: span.tags![key] });\n      return acc;\n    }, []),\n  };\n\n  if (span.kind) {\n    row.tags = [\n      {\n        key: 'kind',\n        value: span.kind,\n      },\n      ...(row.tags ?? []),\n    ];\n  }\n\n  if (span.shared) {\n    row.tags = [\n      {\n        key: 'shared',\n        value: span.shared,\n      },\n      ...(row.tags ?? []),\n    ];\n  }\n\n  return row;\n}\n\n/**\n * Maps annotations as a log as that seems to be the closest thing.\n * See https://zipkin.io/zipkin-api/#/default/get_trace__traceId_\n */\nfunction transformAnnotation(annotation: ZipkinAnnotation): TraceLog {\n  return {\n    timestamp: annotation.timestamp,\n    fields: [\n      {\n        key: 'annotation',\n        value: annotation.value,\n      },\n    ],\n  };\n}\n\nfunction serviceTags(span: ZipkinSpan): TraceKeyValuePair[] {\n  const endpoint = span.localEndpoint || span.remoteEndpoint;\n  if (!endpoint) {\n    return [];\n  }\n  return [\n    valueToTag('ipv4', endpoint.ipv4),\n    valueToTag('ipv6', endpoint.ipv6),\n    valueToTag('port', endpoint.port),\n    valueToTag('endpointType', span.localEndpoint ? 'local' : 'remote'),\n  ].filter(identity) as TraceKeyValuePair[];\n}\n\nfunction valueToTag<T>(key: string, value: T): TraceKeyValuePair<T> | undefined {\n  if (!value) {\n    return undefined;\n  }\n  return {\n    key,\n    value,\n  };\n}\n\n/**\n * Transforms data frame to Zipkin response\n */\nexport const transformToZipkin = (data: MutableDataFrame): ZipkinSpan[] => {\n  let response: ZipkinSpan[] = [];\n\n  for (let i = 0; i < data.length; i++) {\n    const span = data.get(i);\n    response.push({\n      traceId: span.traceID,\n      parentId: span.parentSpanID,\n      name: span.operationName,\n      id: span.spanID,\n      timestamp: span.startTime * 1000,\n      duration: span.duration * 1000,\n      ...getEndpoint(span),\n      annotations: span.logs.length\n        ? span.logs.map((l: TraceLog) => ({ timestamp: l.timestamp, value: l.fields[0].value }))\n        : undefined,\n      tags: span.tags.length\n        ? span.tags\n            .filter((t: TraceKeyValuePair) => t.key !== 'kind' && t.key !== 'endpointType' && t.key !== 'shared')\n            .reduce((tags: { [key: string]: string }, t: TraceKeyValuePair) => {\n              if (t.key === 'error') {\n                return {\n                  ...tags,\n                  [t.key]: span.tags.find((t: TraceKeyValuePair) => t.key === 'errorValue').value || '',\n                };\n              }\n              return { ...tags, [t.key]: t.value };\n            }, {})\n        : undefined,\n      kind: span.tags.find((t: TraceKeyValuePair) => t.key === 'kind')?.value,\n      shared: span.tags.find((t: TraceKeyValuePair) => t.key === 'shared')?.value,\n    });\n  }\n\n  return response;\n};\n\n// Returns remote or local endpoint object\nconst getEndpoint = (span: any): { [key: string]: ZipkinEndpoint } | undefined => {\n  const key =\n    span.serviceTags.find((t: TraceKeyValuePair) => t.key === 'endpointType')?.value === 'local'\n      ? 'localEndpoint'\n      : 'remoteEndpoint';\n  return span.serviceName !== 'unknown'\n    ? {\n        [key]: {\n          serviceName: span.serviceName,\n          ipv4: span.serviceTags.find((t: TraceKeyValuePair) => t.key === 'ipv4')?.value,\n          ipv6: span.serviceTags.find((t: TraceKeyValuePair) => t.key === 'ipv6')?.value,\n          port: span.serviceTags.find((t: TraceKeyValuePair) => t.key === 'port')?.value,\n        },\n      }\n    : undefined;\n};\n","import useEffectOnce from './useEffectOnce';\nvar useMount = function (fn) {\n    useEffectOnce(function () {\n        fn();\n    });\n};\nexport default useMount;\n"],"names":["NodeGraphSettings","options","onOptionsChange","styles","useStyles","getStyles","className","container","InlineFieldRow","row","InlineField","tooltip","label","labelWidth","InlineSwitch","value","jsonData","nodeGraph","enabled","onChange","event","updateDatasourcePluginJsonDataOption","currentTarget","checked","theme","css","TraceToLogsSettings","width","infoText","DataSourcePicker","pluginId","current","tracesToLogs","datasourceUid","noDefault","ds","uid","tags","TagsInput","grow","Input","type","placeholder","v","spanStartTimeShift","spanEndTimeShift","filterByTraceID","filterBySpanID","defaultChecked","lokiSearch","spacing","md","colors","textSemiWeak","getNonOverlappingDuration","ranges","sort","a","b","reduce","acc","range","length","tail","slice","prevStart","prevEnd","start","end","makeSpanMap","getSpan","spanMap","span","index","id","children","parentId","parentIds","push","undefined","getStats","duration","traceDuration","selfDuration","main","toFixedNoTrailingZeros","secondary","n","parseFloat","toFixed","makeFrames","MutableDataFrame","fields","name","Fields","FieldType","config","displayName","color","mode","meta","preferredVisualisationType","createGraphFrames","data","nodes","edges","spans","traceEndTime","traceStartTime","Infinity","timestamp","findTraceDuration","map","c","childrenDuration","stats","localEndpoint","serviceName","remoteEndpoint","convertTraceToGraph","nodesFrame","edgesFrame","node","add","edge","ZipkinDatasource","DataSourceApi","constructor","instanceSettings","super","this","query","target","targets","queryType","uploadedJson","of","traceData","JSON","parse","responseToDataQueryResponse","error","message","request","encodeURIComponent","pipe","res","emptyDataQueryResponse","url","params","lastValueFrom","hideFromInspector","metadataRequest","status","getQueryDisplayText","apiUrl","serializeParams","req","getBackendSrv","fetch","response","transformResponse","values","custom","traceFormat","noTracesFoundOptions","isLeaf","noTracesOptions","plugin","DataSourcePlugin","setQueryEditor","onRunQuery","datasource","serviceOptions","servicesOptions","useAsyncFn","async","services","service","dispatch","notifyApp","createErrorNotification","useMount","useServices","useTheme2","onLoadOptions","allOptions","isMounted","useMountedState","setAllOptions","useState","fetchSpans","state","spanOptions","fromPairs","fetchTraces","spanName","search","traces","newTraces","trace","rootSpan","find","Math","floor","traceId","useCallback","selectedOptions","useLoadOptions","onSelectTrace","traceID","cascaderOptions","useMemo","Object","keys","traceName","useMapToCascaderOptions","RadioButtonGroup","size","padding","FileDropzone","multiple","onLoad","result","ButtonCascader","loadData","QueryField","nextQuery","portalOrigin","setConfigEditor","DataSourceHttpSettings","defaultUrl","dataSourceConfig","showAccessOptions","zSpans","spanRows","transformSpan","frame","spanID","parentSpanID","operationName","serviceTags","startTime","logs","annotations","transformAnnotation","key","kind","shared","annotation","endpoint","valueToTag","ipv4","ipv6","port","filter","identity","transformToZipkin","i","get","getEndpoint","l","t","fn"],"sourceRoot":""}