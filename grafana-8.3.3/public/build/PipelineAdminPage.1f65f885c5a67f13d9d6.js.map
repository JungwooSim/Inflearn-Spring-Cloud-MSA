{"version":3,"file":"PipelineAdminPage.1f65f885c5a67f13d9d6.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useNavModel.ts","webpack://grafana/./public/app/features/live/pages/RuleSettingsEditor.tsx","webpack://grafana/./public/app/features/live/pages/utils.ts","webpack://grafana/./public/app/features/live/pages/RuleSettingsArray.tsx","webpack://grafana/./public/app/features/live/pages/RuleTest.tsx","webpack://grafana/./public/app/features/live/pages/RuleModal.tsx","webpack://grafana/./public/app/features/live/pages/PipelineTable.tsx","webpack://grafana/./public/app/features/live/pages/AddNewRule.tsx","webpack://grafana/./public/app/features/live/pages/PipelineAdminPage.tsx"],"sourcesContent":["import { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\nimport { getNavModel } from '../selectors/navModel';\nimport { NavModel } from '@grafana/data';\n\nexport const useNavModel = (id: string): NavModel => {\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  return getNavModel(navIndex, id);\n};\n","import React from 'react';\nimport { CodeEditor, Select } from '@grafana/ui';\nimport { RuleType, RuleSetting, PipeLineEntitiesInfo } from './types';\n\ninterface Props {\n  ruleType: RuleType;\n  onChange: (value: RuleSetting) => void;\n  value: RuleSetting;\n  entitiesInfo: PipeLineEntitiesInfo;\n}\n\nexport const RuleSettingsEditor: React.FC<Props> = ({ onChange, value, ruleType, entitiesInfo }) => {\n  return (\n    <>\n      <Select\n        menuShouldPortal={true}\n        key={ruleType}\n        options={entitiesInfo[ruleType]}\n        placeholder=\"Select an option\"\n        value={value?.type ?? ''}\n        onChange={(value) => {\n          // set the body with example\n          const type = value.value;\n          onChange({\n            type,\n            [type]: entitiesInfo.getExample(ruleType, type),\n          });\n        }}\n      />\n      <CodeEditor\n        height={'50vh'}\n        value={value ? JSON.stringify(value[value.type], null, '\\t') : ''}\n        showLineNumbers={true}\n        readOnly={false}\n        language=\"json\"\n        showMiniMap={false}\n        onBlur={(text: string) => {\n          const body = JSON.parse(text);\n          onChange({\n            type: value.type,\n            [value.type]: body,\n          });\n        }}\n      />\n    </>\n  );\n};\n","import { getBackendSrv } from '@grafana/runtime';\nimport { PipelineListOption, PipeLineEntitiesInfo } from './types';\n\nexport async function getPipeLineEntities(): Promise<PipeLineEntitiesInfo> {\n  return await getBackendSrv()\n    .get(`api/live/pipeline-entities`)\n    .then((data) => {\n      return {\n        converter: transformLabel(data, 'converters'),\n        frameProcessors: transformLabel(data, 'frameProcessors'),\n        frameOutputs: transformLabel(data, 'frameOutputs'),\n        getExample: (ruleType, type) => {\n          return data[`${ruleType}s`]?.filter((option: PipelineListOption) => option.type === type)?.[0]?.['example'];\n        },\n      };\n    });\n}\n\nexport function transformLabel(data: any, key: keyof typeof data) {\n  if (Array.isArray(data)) {\n    return data.map((d) => ({\n      label: d[key],\n      value: d[key],\n    }));\n  }\n  return data[key].map((typeObj: PipelineListOption) => ({\n    label: typeObj.type,\n    value: typeObj.type,\n  }));\n}\n","import React, { useState } from 'react';\nimport { RuleSettingsEditor } from './RuleSettingsEditor';\nimport { RuleType, RuleSetting, PipeLineEntitiesInfo } from './types';\nimport { Select } from '@grafana/ui';\nimport { SelectableValue } from '../../../../../packages/grafana-data/src';\n\ninterface Props {\n  ruleType: RuleType;\n  onChange: (value: RuleSetting[]) => void;\n  value: RuleSetting[];\n  entitiesInfo: PipeLineEntitiesInfo;\n}\n\nexport const RuleSettingsArray: React.FC<Props> = ({ onChange, value, ruleType, entitiesInfo }) => {\n  const [index, setIndex] = useState<number>(0);\n  const arr = value ?? [];\n  const onRuleChange = (v: RuleSetting) => {\n    if (!value) {\n      onChange([v]);\n    } else {\n      const copy = [...value];\n      copy[index] = v;\n      onChange(copy);\n    }\n  };\n  // create array of value.length + 1\n  let indexArr: Array<SelectableValue<number>> = [];\n  for (let i = 0; i <= arr.length; i++) {\n    indexArr.push({\n      label: `${ruleType}: ${i}`,\n      value: i,\n    });\n  }\n\n  return (\n    <>\n      <Select\n        placeholder=\"Select an index\"\n        menuShouldPortal={true}\n        options={indexArr}\n        value={index}\n        onChange={(index) => {\n          // set index to find the correct setting\n          setIndex(index.value!);\n        }}\n      ></Select>\n      <RuleSettingsEditor onChange={onRuleChange} value={arr[index]} ruleType={ruleType} entitiesInfo={entitiesInfo} />\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { Button, CodeEditor, Table, useStyles, Field } from '@grafana/ui';\nimport { ChannelFrame, Rule } from './types';\nimport { getBackendSrv, config } from '@grafana/runtime';\nimport { css } from '@emotion/css';\nimport { getDisplayProcessor, GrafanaTheme, StreamingDataFrame } from '@grafana/data';\n\ninterface Props {\n  rule: Rule;\n}\n\nexport const RuleTest: React.FC<Props> = (props) => {\n  const [response, setResponse] = useState<ChannelFrame[]>();\n  const [data, setData] = useState<string>();\n  const styles = useStyles(getStyles);\n\n  const onBlur = (text: string) => {\n    setData(text);\n  };\n\n  const onClick = () => {\n    getBackendSrv()\n      .post(`api/live/pipeline-convert-test`, {\n        channelRules: [props.rule],\n        channel: props.rule.pattern,\n        data: data,\n      })\n      .then((data: any) => {\n        const t = data.channelFrames as any[];\n        if (t) {\n          setResponse(\n            t.map((f) => {\n              const frame = new StreamingDataFrame(f.frame);\n              for (const field of frame.fields) {\n                field.display = getDisplayProcessor({ field, theme: config.theme2 });\n              }\n              return { channel: f.channel, frame };\n            })\n          );\n        }\n      })\n      .catch((e) => {\n        setResponse(e);\n      });\n  };\n\n  return (\n    <div>\n      <CodeEditor\n        height={100}\n        value=\"\"\n        showLineNumbers={true}\n        readOnly={false}\n        language=\"json\"\n        showMiniMap={false}\n        onBlur={onBlur}\n      />\n\n      <Button onClick={onClick} className={styles.margin}>\n        Test\n      </Button>\n\n      {response?.length &&\n        response.map((r) => (\n          <Field key={r.channel} label={r.channel}>\n            <Table data={r.frame} width={700} height={Math.min(10 * r.frame.length + 10, 150)} showTypeIcons></Table>\n          </Field>\n        ))}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    margin: css`\n      margin-bottom: 15px;\n    `,\n  };\n};\n","import React, { useState, useMemo } from 'react';\nimport { Modal, TabContent, TabsBar, Tab, Button, useStyles } from '@grafana/ui';\nimport { Rule, RuleType, PipeLineEntitiesInfo, RuleSetting } from './types';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\nimport { RuleSettingsEditor } from './RuleSettingsEditor';\nimport { getPipeLineEntities } from './utils';\nimport { RuleSettingsArray } from './RuleSettingsArray';\nimport { RuleTest } from './RuleTest';\n\ninterface Props {\n  rule: Rule;\n  isOpen: boolean;\n  onClose: () => void;\n  clickColumn: RuleType;\n}\ninterface TabInfo {\n  label: string;\n  type?: RuleType;\n  isTest?: boolean;\n  isConverter?: boolean;\n  icon?: string;\n}\nconst tabs: TabInfo[] = [\n  { label: 'Converter', type: 'converter', isConverter: true },\n  { label: 'Processors', type: 'frameProcessors' },\n  { label: 'Outputs', type: 'frameOutputs' },\n  { label: 'Test', isTest: true, icon: 'flask' },\n];\n\nexport const RuleModal: React.FC<Props> = (props) => {\n  const { isOpen, onClose, clickColumn } = props;\n  const [rule, setRule] = useState<Rule>(props.rule);\n  const [activeTab, setActiveTab] = useState<TabInfo | undefined>(tabs.find((t) => t.type === clickColumn));\n  // to show color of Save button\n  const [hasChange, setChange] = useState<boolean>(false);\n  const [ruleSetting, setRuleSetting] = useState<any>(activeTab?.type ? rule?.settings?.[activeTab.type] : undefined);\n  const [entitiesInfo, setEntitiesInfo] = useState<PipeLineEntitiesInfo>();\n  const styles = useStyles(getStyles);\n\n  const onRuleSettingChange = (value: RuleSetting | RuleSetting[]) => {\n    setChange(true);\n    if (activeTab?.type) {\n      setRule({\n        ...rule,\n        settings: {\n          ...rule.settings,\n          [activeTab?.type]: value,\n        },\n      });\n    }\n    setRuleSetting(value);\n  };\n\n  // load pipeline entities info\n  useMemo(() => {\n    getPipeLineEntities().then((data) => {\n      setEntitiesInfo(data);\n    });\n  }, []);\n\n  const onSave = () => {\n    getBackendSrv()\n      .put(`api/live/channel-rules`, rule)\n      .then(() => {\n        setChange(false);\n        onClose();\n      })\n      .catch((e) => console.error(e));\n  };\n\n  return (\n    <Modal isOpen={isOpen} title={rule.pattern} onDismiss={onClose} closeOnEscape>\n      <TabsBar>\n        {tabs.map((tab, index) => {\n          return (\n            <Tab\n              key={index}\n              label={tab.label}\n              active={tab === activeTab}\n              icon={tab.icon as any}\n              onChangeTab={() => {\n                setActiveTab(tab);\n                if (tab.type) {\n                  // to notify children of the new rule\n                  setRuleSetting(rule?.settings?.[tab.type]);\n                }\n              }}\n            />\n          );\n        })}\n      </TabsBar>\n      <TabContent>\n        {entitiesInfo && rule && activeTab && (\n          <>\n            {activeTab?.isTest && <RuleTest rule={rule} />}\n            {activeTab.isConverter && (\n              <RuleSettingsEditor\n                onChange={onRuleSettingChange}\n                value={ruleSetting}\n                ruleType={'converter'}\n                entitiesInfo={entitiesInfo}\n              />\n            )}\n            {!activeTab.isConverter && activeTab.type && (\n              <RuleSettingsArray\n                onChange={onRuleSettingChange}\n                value={ruleSetting}\n                ruleType={activeTab.type}\n                entitiesInfo={entitiesInfo}\n              />\n            )}\n          </>\n        )}\n        <Button onClick={onSave} className={styles.save} variant={hasChange ? 'primary' : 'secondary'}>\n          Save\n        </Button>\n      </TabContent>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    save: css`\n      margin-top: 5px;\n    `,\n  };\n};\n","import React, { useEffect, useState } from 'react';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Tag, useStyles, IconButton } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\nimport { Rule, Output, RuleType } from './types';\nimport { RuleModal } from './RuleModal';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\n\nfunction renderOutputTags(key: string, output?: Output): React.ReactNode {\n  if (!output?.type) {\n    return null;\n  }\n  return <Tag key={key} name={output.type} />;\n}\n\ninterface Props {\n  rules: Rule[];\n  onRuleChanged: () => void;\n  selectRule?: Rule;\n}\n\nexport const PipelineTable: React.FC<Props> = (props) => {\n  const { rules } = props;\n  const [isOpen, setOpen] = useState(false);\n  const [selectedRule, setSelectedRule] = useState<Rule>();\n  const [clickColumn, setClickColumn] = useState<RuleType>('converter');\n  const styles = useStyles(getStyles);\n\n  const onRowClick = (rule: Rule, event?: any) => {\n    if (!rule) {\n      return;\n    }\n    let column = event?.target?.getAttribute('data-column');\n    if (!column || column === 'pattern') {\n      column = 'converter';\n    }\n    setClickColumn(column);\n    setSelectedRule(rule);\n    setOpen(true);\n  };\n\n  // Supports selecting a rule from external config (after add rule)\n  useEffect(() => {\n    if (props.selectRule) {\n      onRowClick(props.selectRule);\n    }\n  }, [props.selectRule]);\n\n  const onRemoveRule = (pattern: string) => {\n    getBackendSrv()\n      .delete(`api/live/channel-rules`, JSON.stringify({ pattern: pattern }))\n      .catch((e) => console.error(e))\n      .finally(() => {\n        props.onRuleChanged();\n      });\n  };\n\n  const renderPattern = (pattern: string) => {\n    if (pattern.startsWith('ds/')) {\n      const idx = pattern.indexOf('/', 4);\n      if (idx > 3) {\n        const uid = pattern.substring(3, idx);\n        const ds = getDatasourceSrv().getInstanceSettings(uid);\n        if (ds) {\n          return (\n            <div>\n              <Tag name={ds.name} colorIndex={1} /> &nbsp;\n              <span>{pattern.substring(idx + 1)}</span>\n            </div>\n          );\n        }\n      }\n    }\n    return pattern;\n  };\n\n  return (\n    <div>\n      <div className=\"admin-list-table\">\n        <table className=\"filter-table filter-table--hover form-inline\">\n          <thead>\n            <tr>\n              <th>Channel</th>\n              <th>Converter</th>\n              <th>Processor</th>\n              <th>Output</th>\n              <th style={{ width: 10 }}>&nbsp;</th>\n            </tr>\n          </thead>\n          <tbody>\n            {rules.map((rule) => (\n              <tr key={rule.pattern} onClick={(e) => onRowClick(rule, e)} className={styles.row}>\n                <td data-pattern={rule.pattern} data-column=\"pattern\">\n                  {renderPattern(rule.pattern)}\n                </td>\n                <td data-pattern={rule.pattern} data-column=\"converter\">\n                  {rule.settings?.converter?.type}\n                </td>\n                <td data-pattern={rule.pattern} data-column=\"processor\">\n                  {rule.settings?.frameProcessors?.map((processor) => (\n                    <span key={rule.pattern + processor.type}>{processor.type}</span>\n                  ))}\n                </td>\n                <td data-pattern={rule.pattern} data-column=\"output\">\n                  {rule.settings?.frameOutputs?.map((output) => (\n                    <span key={rule.pattern + output.type}>{renderOutputTags('out', output)}</span>\n                  ))}\n                </td>\n                <td>\n                  <IconButton\n                    name=\"trash-alt\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onRemoveRule(rule.pattern);\n                    }}\n                  ></IconButton>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      {isOpen && selectedRule && (\n        <RuleModal\n          rule={selectedRule}\n          isOpen={isOpen}\n          onClose={() => {\n            setOpen(false);\n          }}\n          clickColumn={clickColumn}\n        />\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    row: css`\n      cursor: pointer;\n    `,\n  };\n};\n","import React, { useState } from 'react';\nimport { Input, Field, Button, ValuePicker, HorizontalGroup } from '@grafana/ui';\nimport { DataSourcePicker, getBackendSrv } from '@grafana/runtime';\nimport { AppEvents, DataSourceRef, LiveChannelScope, SelectableValue } from '@grafana/data';\nimport appEvents from 'app/core/app_events';\nimport { Rule } from './types';\n\ninterface Props {\n  onRuleAdded: (rule: Rule) => void;\n}\n\ntype PatternType = 'ds' | 'any';\n\nconst patternTypes: Array<SelectableValue<PatternType>> = [\n  {\n    label: 'Data source',\n    description: 'Configure a channel scoped to a data source instance',\n    value: 'ds',\n  },\n  {\n    label: 'Any',\n    description: 'Enter an arbitray channel pattern',\n    value: 'any',\n  },\n];\n\nexport function AddNewRule({ onRuleAdded }: Props) {\n  const [patternType, setPatternType] = useState<PatternType>();\n  const [pattern, setPattern] = useState<string>();\n  const [patternPrefix, setPatternPrefix] = useState<string>('');\n  const [datasource, setDatasource] = useState<DataSourceRef>();\n\n  const onSubmit = () => {\n    if (!pattern) {\n      appEvents.emit(AppEvents.alertError, ['Enter path']);\n      return;\n    }\n    if (patternType === 'ds' && !patternPrefix.length) {\n      appEvents.emit(AppEvents.alertError, ['Select datasource']);\n      return;\n    }\n\n    getBackendSrv()\n      .post(`api/live/channel-rules`, {\n        pattern: patternPrefix + pattern,\n        settings: {\n          converter: {\n            type: 'jsonAuto',\n          },\n          frameOutputs: [\n            {\n              type: 'managedStream',\n            },\n          ],\n        },\n      })\n      .then((v: any) => {\n        console.log('ADDED', v);\n        setPattern(undefined);\n        setPatternType(undefined);\n        onRuleAdded(v.rule);\n      })\n      .catch((e) => {\n        appEvents.emit(AppEvents.alertError, ['Error adding rule', e]);\n        e.isHandled = true;\n      });\n  };\n\n  if (patternType) {\n    return (\n      <div>\n        <HorizontalGroup>\n          {patternType === 'any' && (\n            <Field label=\"Pattern\">\n              <Input\n                value={pattern ?? ''}\n                onChange={(e) => setPattern(e.currentTarget.value)}\n                placeholder=\"scope/namespace/path\"\n              />\n            </Field>\n          )}\n          {patternType === 'ds' && (\n            <>\n              <Field label=\"Data source\">\n                <DataSourcePicker\n                  current={datasource}\n                  onChange={(ds) => {\n                    setDatasource(ds);\n                    setPatternPrefix(`${LiveChannelScope.DataSource}/${ds.uid}/`);\n                  }}\n                />\n              </Field>\n              <Field label=\"Path\">\n                <Input value={pattern ?? ''} onChange={(e) => setPattern(e.currentTarget.value)} placeholder=\"path\" />\n              </Field>\n            </>\n          )}\n\n          <Field label=\"\">\n            <Button onClick={onSubmit} variant={pattern?.length ? 'primary' : 'secondary'}>\n              Add\n            </Button>\n          </Field>\n\n          <Field label=\"\">\n            <Button variant=\"secondary\" onClick={() => setPatternType(undefined)}>\n              Cancel\n            </Button>\n          </Field>\n        </HorizontalGroup>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <ValuePicker\n        label=\"Add channel rule\"\n        variant=\"secondary\"\n        size=\"md\"\n        icon=\"plus\"\n        menuPlacement=\"auto\"\n        isFullWidth={false}\n        options={patternTypes}\n        onChange={(v) => setPatternType(v.value)}\n      />\n    </div>\n  );\n}\n","import React, { useEffect, useState, ChangeEvent } from 'react';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Input } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { useNavModel } from 'app/core/hooks/useNavModel';\nimport { Rule } from './types';\nimport { PipelineTable } from './PipelineTable';\nimport { AddNewRule } from './AddNewRule';\n\nexport default function PipelineAdminPage() {\n  const [rules, setRules] = useState<Rule[]>([]);\n  const [defaultRules, setDefaultRules] = useState<any[]>([]);\n  const [newRule, setNewRule] = useState<Rule>();\n  const navModel = useNavModel('live-pipeline');\n  const [error, setError] = useState<string>();\n\n  const loadRules = () => {\n    getBackendSrv()\n      .get(`api/live/channel-rules`)\n      .then((data) => {\n        setRules(data.rules ?? []);\n        setDefaultRules(data.rules ?? []);\n      })\n      .catch((e) => {\n        if (e.data) {\n          setError(JSON.stringify(e.data, null, 2));\n        }\n      });\n  };\n\n  useEffect(() => {\n    loadRules();\n  }, []);\n\n  const onSearchQueryChange = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.value) {\n      setRules(rules.filter((rule) => rule.pattern.toLowerCase().includes(e.target.value.toLowerCase())));\n    } else {\n      setRules(defaultRules);\n    }\n  };\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        {error && <pre>{error}</pre>}\n        <div className=\"page-action-bar\">\n          <div className=\"gf-form gf-form--grow\">\n            <Input placeholder=\"Search pattern...\" onChange={onSearchQueryChange} />\n          </div>\n        </div>\n\n        <PipelineTable rules={rules} onRuleChanged={loadRules} selectRule={newRule} />\n\n        <AddNewRule\n          onRuleAdded={(r: Rule) => {\n            console.log('GOT', r, 'vs', rules[0]);\n            setNewRule(r);\n            loadRules();\n          }}\n        />\n      </Page.Contents>\n    </Page>\n  );\n}\n"],"names":["useNavModel","id","navIndex","useSelector","state","getNavModel","RuleSettingsEditor","onChange","value","ruleType","entitiesInfo","Select","menuShouldPortal","options","placeholder","type","getExample","CodeEditor","height","JSON","stringify","showLineNumbers","readOnly","language","showMiniMap","onBlur","text","body","parse","transformLabel","data","key","Array","isArray","map","d","label","typeObj","RuleSettingsArray","index","setIndex","useState","arr","indexArr","i","length","push","v","copy","RuleTest","props","response","setResponse","setData","styles","useStyles","getStyles","Button","onClick","getBackendSrv","post","channelRules","rule","channel","pattern","then","t","channelFrames","f","frame","StreamingDataFrame","field","fields","display","getDisplayProcessor","theme","config","catch","e","className","margin","r","Field","Table","width","Math","min","showTypeIcons","css","tabs","isConverter","isTest","icon","RuleModal","isOpen","onClose","clickColumn","setRule","activeTab","setActiveTab","find","hasChange","setChange","ruleSetting","setRuleSetting","settings","undefined","setEntitiesInfo","onRuleSettingChange","useMemo","async","get","converter","frameProcessors","frameOutputs","filter","option","getPipeLineEntities","Modal","title","onDismiss","closeOnEscape","TabsBar","tab","Tab","active","onChangeTab","TabContent","put","console","error","save","variant","renderOutputTags","output","Tag","name","PipelineTable","rules","setOpen","selectedRule","setSelectedRule","setClickColumn","onRowClick","event","column","target","getAttribute","useEffect","selectRule","renderPattern","startsWith","idx","indexOf","uid","substring","ds","getDatasourceSrv","getInstanceSettings","colorIndex","style","row","processor","IconButton","stopPropagation","delete","finally","onRuleChanged","patternTypes","description","AddNewRule","onRuleAdded","patternType","setPatternType","setPattern","patternPrefix","setPatternPrefix","datasource","setDatasource","onSubmit","log","appEvents","AppEvents","isHandled","HorizontalGroup","Input","currentTarget","DataSourcePicker","current","LiveChannelScope","ValuePicker","size","menuPlacement","isFullWidth","PipelineAdminPage","setRules","defaultRules","setDefaultRules","newRule","setNewRule","navModel","setError","loadRules","Page","toLowerCase","includes"],"sourceRoot":""}