{"version":3,"file":"SnapshotListPage.1f65f885c5a67f13d9d6.js","mappings":"q4BAgBO,MAAMA,EAAwB,KACnC,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAqB,KAChDC,EAAgBC,IAAqBF,EAAAA,EAAAA,YACtCG,EAAcC,EAAAA,gBAAAA,cAA8BC,SAC5CC,EAAUC,OAAOC,SAASC,KAC1BC,EAAUJ,EAAQK,OAAO,EAAGL,EAAQM,QAAQT,KAElDU,EAAAA,EAAAA,IAASC,UACP,MAAMC,QAjBDC,EAAAA,EAAAA,iBACJC,IAAI,4BACJC,MAAMC,GACEA,EAAOC,KAAKC,GAAD,iBACbA,EADa,CAEhBC,IAAM,uBAAsBD,EAASE,YAazCxB,EAAagB,KACZ,CAAChB,IAEJ,MAAMyB,GAAmBC,EAAAA,EAAAA,cACvBX,MAAAA,IACE,MAAMY,EAAoB5B,EAAU6B,QAAQC,GAAOA,EAAGL,MAAQF,EAASE,MACvExB,EAAa2B,SACPV,EAAAA,EAAAA,iBACHa,OAAQ,kBAAiBR,EAASE,OAClCO,OAAM,KACL/B,EAAaD,QAGnB,CAACA,IAGH,OACE,4BACE,mBAAOiC,UAAU,eAAjB,WACE,4BACE,iCACE,yBACE,wCAFJ,OAIE,yBACE,iDAEF,eAAIC,MAAO,CAAEC,MAAO,WACpB,eAAID,MAAO,CAAEC,MAAO,WACpB,eAAID,MAAO,CAAEC,MAAO,gBAGxB,2BACGnC,EAAUsB,KAAKC,IACd,MAAMC,EAAMD,EAASa,aAAeb,EAASC,IACvChB,EAAUe,EAASa,aAAgB,GAAExB,IAAUW,EAASC,MAC9D,OACE,2BACE,yBACE,cAAGb,KAAMa,EAAT,SAAeD,EAASc,UAE1B,yBACE,cAAG1B,KAAMa,EAAT,SAAehB,OAEjB,wBAAKe,EAASe,WAAT,OAAqB,iBAAML,UAAU,gBAAhB,2BAC1B,eAAIA,UAAU,cAAd,UACE,SAAC,EAAAM,WAAD,CAAY5B,KAAMa,EAAKgB,QAAQ,YAAYC,KAAK,KAAKC,KAAK,MAA1D,qBAIF,eAAIT,UAAU,aAAd,UACE,SAAC,EAAAU,OAAD,CAAQH,QAAQ,cAAcC,KAAK,KAAKC,KAAK,QAAQE,QAAS,IAAMxC,EAAkBmB,SAdjFA,EAASE,cAsB1B,SAAC,EAAAoB,aAAD,CACEC,SAAU3C,EACVuC,KAAK,YACLK,MAAM,SACNC,KAAO,oCAAmC7C,MAAAA,OAApC,EAAoCA,EAAgBkC,SAC1DY,YAAY,SACZC,UAAW,IAAM9C,OAAkB+C,GACnCC,UAAW,KACT1B,EAAiBvB,GACjBC,OAAkB+C,U,qDC/ErB,MAAME,EAA8B,EAAGC,SAAAA,EAAU5C,SAAAA,MAEpD,SAAC6C,EAAA,EAAD,CAAMD,SAAUA,EAAhB,gBACE,SAACC,EAAA,WAAD,WACE,SAACxD,EAAD,SAUR,GAAeyD,EAAAA,EAAAA,UAJ2DC,IAAD,CACvEH,UAAUI,EAAAA,EAAAA,GAAYD,EAAME,SAAU,gBAGxC,CAAwCN,I,yKC1BxC,IAAIO,EAAU,EAAQ,uGAClBC,EAAU,EAAQ,oGAClBC,EAAeF,EAAQG,gBAAgB,EAAQ,mKAWnDC,EAAQ,EAVR,SAAkBC,EAAIC,QACL,IAATA,IAAmBA,EAAO,IAC9B,IAAIC,EAAKL,EAAaM,QAAQH,EAAIC,EAAM,CACpCG,SAAS,IACTZ,EAAQU,EAAG,GAAIG,EAAWH,EAAG,GAIjC,OAHAN,EAAQU,WAAU,WACdD,MACD,CAACA,IACGb","sources":["webpack://grafana/./public/app/features/manage-dashboards/components/SnapshotListTable.tsx","webpack://grafana/./public/app/features/manage-dashboards/SnapshotListPage.tsx","webpack://grafana/./.yarn/__virtual__/react-use-virtual-ca2705900f/3/opt/drone/yarncache/react-use-npm-17.2.4-c702db5427-3c885c3798.zip/node_modules/react-use/lib/useAsync.js"],"sourcesContent":["import React, { FC, useState, useCallback } from 'react';\nimport { ConfirmModal, Button, LinkButton } from '@grafana/ui';\nimport { getBackendSrv, locationService } from '@grafana/runtime';\nimport { Snapshot } from '../types';\nimport useAsync from 'react-use/lib/useAsync';\n\nexport function getSnapshots() {\n  return getBackendSrv()\n    .get('/api/dashboard/snapshots')\n    .then((result: Snapshot[]) => {\n      return result.map((snapshot) => ({\n        ...snapshot,\n        url: `/dashboard/snapshot/${snapshot.key}`,\n      }));\n    });\n}\nexport const SnapshotListTable: FC = () => {\n  const [snapshots, setSnapshots] = useState<Snapshot[]>([]);\n  const [removeSnapshot, setRemoveSnapshot] = useState<Snapshot | undefined>();\n  const currentPath = locationService.getLocation().pathname;\n  const fullUrl = window.location.href;\n  const baseUrl = fullUrl.substr(0, fullUrl.indexOf(currentPath));\n\n  useAsync(async () => {\n    const response = await getSnapshots();\n    setSnapshots(response);\n  }, [setSnapshots]);\n\n  const doRemoveSnapshot = useCallback(\n    async (snapshot: Snapshot) => {\n      const filteredSnapshots = snapshots.filter((ss) => ss.key !== snapshot.key);\n      setSnapshots(filteredSnapshots);\n      await getBackendSrv()\n        .delete(`/api/snapshots/${snapshot.key}`)\n        .catch(() => {\n          setSnapshots(snapshots);\n        });\n    },\n    [snapshots]\n  );\n\n  return (\n    <div>\n      <table className=\"filter-table\">\n        <thead>\n          <tr>\n            <th>\n              <strong>Name</strong>\n            </th>\n            <th>\n              <strong>Snapshot url</strong>\n            </th>\n            <th style={{ width: '70px' }}></th>\n            <th style={{ width: '30px' }}></th>\n            <th style={{ width: '25px' }}></th>\n          </tr>\n        </thead>\n        <tbody>\n          {snapshots.map((snapshot) => {\n            const url = snapshot.externalUrl || snapshot.url;\n            const fullUrl = snapshot.externalUrl || `${baseUrl}${snapshot.url}`;\n            return (\n              <tr key={snapshot.key}>\n                <td>\n                  <a href={url}>{snapshot.name}</a>\n                </td>\n                <td>\n                  <a href={url}>{fullUrl}</a>\n                </td>\n                <td>{snapshot.external && <span className=\"query-keyword\">External</span>}</td>\n                <td className=\"text-center\">\n                  <LinkButton href={url} variant=\"secondary\" size=\"sm\" icon=\"eye\">\n                    View\n                  </LinkButton>\n                </td>\n                <td className=\"text-right\">\n                  <Button variant=\"destructive\" size=\"sm\" icon=\"times\" onClick={() => setRemoveSnapshot(snapshot)} />\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n\n      <ConfirmModal\n        isOpen={!!removeSnapshot}\n        icon=\"trash-alt\"\n        title=\"Delete\"\n        body={`Are you sure you want to delete '${removeSnapshot?.name}'?`}\n        confirmText=\"Delete\"\n        onDismiss={() => setRemoveSnapshot(undefined)}\n        onConfirm={() => {\n          doRemoveSnapshot(removeSnapshot!);\n          setRemoveSnapshot(undefined);\n        }}\n      />\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { MapStateToProps, connect } from 'react-redux';\nimport { NavModel } from '@grafana/data';\nimport Page from 'app/core/components/Page/Page';\nimport { StoreState } from 'app/types';\nimport { SnapshotListTable } from './components/SnapshotListTable';\nimport { GrafanaRouteComponentProps } from '../../core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\n\ninterface ConnectedProps {\n  navModel: NavModel;\n}\ninterface Props extends ConnectedProps, GrafanaRouteComponentProps {}\n\nexport const SnapshotListPage: FC<Props> = ({ navModel, location }) => {\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <SnapshotListTable />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, {}, StoreState> = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'snapshots'),\n});\n\nexport default connect(mapStateToProps)(SnapshotListPage);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar react_1 = require(\"react\");\nvar useAsyncFn_1 = tslib_1.__importDefault(require(\"./useAsyncFn\"));\nfunction useAsync(fn, deps) {\n    if (deps === void 0) { deps = []; }\n    var _a = useAsyncFn_1.default(fn, deps, {\n        loading: true,\n    }), state = _a[0], callback = _a[1];\n    react_1.useEffect(function () {\n        callback();\n    }, [callback]);\n    return state;\n}\nexports.default = useAsync;\n"],"names":["SnapshotListTable","snapshots","setSnapshots","useState","removeSnapshot","setRemoveSnapshot","currentPath","locationService","pathname","fullUrl","window","location","href","baseUrl","substr","indexOf","useAsync","async","response","getBackendSrv","get","then","result","map","snapshot","url","key","doRemoveSnapshot","useCallback","filteredSnapshots","filter","ss","delete","catch","className","style","width","externalUrl","name","external","LinkButton","variant","size","icon","Button","onClick","ConfirmModal","isOpen","title","body","confirmText","onDismiss","undefined","onConfirm","SnapshotListPage","navModel","Page","connect","state","getNavModel","navIndex","tslib_1","react_1","useAsyncFn_1","__importDefault","exports","fn","deps","_a","default","loading","callback","useEffect"],"sourceRoot":""}